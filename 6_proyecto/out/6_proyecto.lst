
examples/c/sapi/statecharts/6_proyecto/out/6_proyecto.elf:     file format elf32-littlearm
examples/c/sapi/statecharts/6_proyecto/out/6_proyecto.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a002345

Program Header:
0x70000001 off    0x0001492c vaddr 0x1a00492c paddr 0x1a00492c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010050 vaddr 0x10000050 paddr 0x10000050 align 2**16
         filesz 0x00000000 memsz 0x000002cc flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004934 memsz 0x00004934 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004934 align 2**16
         filesz 0x0000004c memsz 0x0000004c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004924  1a000000  1a000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  10000000  1a004934  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0002004c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0002004c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0002004c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0002004c  2**2
                  CONTENTS
  6 .bss          000002cc  10000050  10000050  00010050  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0002004c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0002004c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0002004c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0002004c  2**2
                  CONTENTS
 11 .init_array   00000008  1a004924  1a004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00492c  1a00492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  0002004c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  0002004c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  0002004c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  0002004c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  0002004c  2**2
                  CONTENTS
 18 .noinit       00000000  1000031c  1000031c  0002004c  2**2
                  CONTENTS
 19 .debug_info   000318d5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005b9e  00000000  00000000  00051921  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000e761  00000000  00000000  000574bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000017b8  00000000  00000000  00065c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000017d8  00000000  00000000  000673d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00011ab5  00000000  00000000  00068bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001ab56  00000000  00000000  0007a665  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00030fd3  00000000  00000000  000951bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000c618e  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000c61f6  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003f04  00000000  00000000  000c6228  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000050 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004924 l    d  .init_array	00000000 .init_array
1a00492c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000031c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.cpp
1a00030c l     F .text	0000002c _Z41__static_initialization_and_destruction_0ii
1a0007bc l     F .text	0000000e _GLOBAL__sub_I_SysTick_Time_Flag
10000058 l     O .bss	00000068 _ZL10statechart
00000000 l    df *ABS*	00000000 DallasTemperature.cpp
00000000 l    df *ABS*	00000000 OneWire.cpp
1a004648 l     O .text	00000020 _ZL15dscrc2x16_table
00000000 l    df *ABS*	00000000 Proyecto.c
1a000e10 l     F .text	0000007c clearInEvents
1a000e8c l     F .text	00000006 check_TECX_DEBOUNCE_tr0_tr0
1a000e92 l     F .text	00000004 check_TECX_NO_OPRIMIDO_tr0_tr0
1a000e96 l     F .text	00000004 check_TECX_OPRIMIDO_tr0_tr0
1a000e9a l     F .text	00000004 check_TECX_VALIDACION_tr0_tr0
1a000e9e l     F .text	00000004 check_TECX_VALIDACION_tr1_tr1
1a000ea2 l     F .text	00000018 check_Teclas_ESPERA_tr0_tr0
1a000eba l     F .text	0000002c check_Teclas_ESPERA_tr1_tr1
1a000ee6 l     F .text	00000022 check_Teclas_ESPERA_tr2_tr2
1a000f08 l     F .text	00000022 check_Teclas_ESPERA_tr3_tr3
1a000f2a l     F .text	00000006 check_Modo_Grupo_MANUAL_tr0_tr0
1a000f30 l     F .text	00000006 check_Modo_Grupo_AUTOMATICO_tr0_tr0
1a000f36 l     F .text	00000018 check_Modo_Grupo_TRANSICION_MODOS_tr0_tr0
1a000f4e l     F .text	00000016 check_Modo_Grupo_TRANSICION_MODOS_tr1_tr1
1a000f64 l     F .text	00000004 check_Servicio_Red_HAY_LUZ_tr0_tr0
1a000f68 l     F .text	00000006 check_Servicio_Red_ESPERA_tr0_tr0
1a000f6e l     F .text	00000004 check_Servicio_Red_VALIDACION_tr0_tr0
1a000f72 l     F .text	00000004 check_Servicio_Red_VALIDACION_tr1_tr1
1a000f76 l     F .text	00000004 check_Servicio_Red_NO_HAY_LUZ_tr0_tr0
1a000f7a l     F .text	00000006 check_Grupo_Electrogeno_GRUPO_APAGADO_tr0_tr0
1a000f80 l     F .text	0000002a check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0
1a000faa l     F .text	00000018 check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1_tr1
1a000fc2 l     F .text	00000022 check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2_tr2
1a000fe4 l     F .text	00000022 check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3_tr3
1a001006 l     F .text	00000016 check_Grupo_Electrogeno_ARRANQUE_EXITO_tr0_tr0
1a00101c l     F .text	00000006 check_Grupo_Electrogeno_ARRANQUE_EXITO_tr1_tr1
1a001022 l     F .text	00000016 check_Grupo_Electrogeno_FALLA_tr0_tr0
1a001038 l     F .text	00000006 check_Grupo_Electrogeno_FALLA_tr1_tr1
1a00103e l     F .text	00000006 check_Grupo_Electrogeno_INICIO_ARRANQUE_tr0_tr0
1a001044 l     F .text	00000020 check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0_tr0
1a001064 l     F .text	00000018 check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1_tr1
1a00107c l     F .text	00000006 check_Grupo_Electrogeno_APAGANDO_GRUPO_tr0_tr0
1a001082 l     F .text	00000006 check_Grupo_Electrogeno_ESPERA_GRUPO_tr0_tr0
1a001088 l     F .text	00000016 check_Grupo_Electrogeno_ESPERA_GRUPO_tr1_tr1
1a00109e l     F .text	00000018 check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0_tr0
1a0010b6 l     F .text	00000018 check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1_tr1
1a0010ce l     F .text	0000000c check_Display_IDLE_lr0_lr0
1a0010da l     F .text	00000016 check_Display_IDLE_tr0_tr0
1a0010f0 l     F .text	00000006 check_Display_MOSTRAR_VALORES_tr0_tr0
1a0010f6 l     F .text	00000006 check_Conmutador_GRUPO_CONMUTADO_tr0_tr0
1a0010fc l     F .text	00000016 check_Conmutador_GRUPO_CONMUTADO_tr1_tr1
1a001112 l     F .text	00000018 check_Conmutador_RED_CONMUTADA_tr0_tr0
1a00112a l     F .text	00000016 check_Conmutador_RED_CONMUTADA_tr1_tr1
1a001140 l     F .text	00000020 check_Conmutador_SIN_CONMUTACION_tr0_tr0
1a001160 l     F .text	00000020 check_Conmutador_SIN_CONMUTACION_tr1_tr1
1a001180 l     F .text	00000006 check_Conmutador_CONMUTACION_INICIAL_tr0_tr0
1a001186 l     F .text	00000004 check_Sensor_Temp_IDLE_tr0_tr0
1a00118a l     F .text	00000006 check_Sensor_Temp_LEYENDO_TEMP_tr0_tr0
1a001190 l     F .text	00000006 effect_Display_IDLE_lr0_lr0
1a001196 l     F .text	0000000c enact_TECX_OPRIMIDO
1a0011a2 l     F .text	0000000c enact_Grupo_Electrogeno_ARRANQUE_EXITO
1a0011ae l     F .text	0000000a enseq_TECX_NO_OPRIMIDO_default
1a0011b8 l     F .text	00000012 enseq_TECX_OPRIMIDO_default
1a0011ca l     F .text	0000000a enseq_TECX_VALIDACION_default
1a0011d4 l     F .text	0000000a enseq_Teclas_ESPERA_default
1a0011de l     F .text	0000000a enseq_Servicio_Red_VALIDACION_default
1a0011e8 l     F .text	00000012 enseq_Grupo_Electrogeno_ARRANQUE_EXITO_default
1a0011fa l     F .text	0000000a enseq_Display_IDLE_default
1a001204 l     F .text	0000000a enseq_Sensor_Temp_IDLE_default
1a00120e l     F .text	00000008 exseq_TECX_NO_OPRIMIDO
1a001216 l     F .text	00000008 exseq_TECX_OPRIMIDO
1a00121e l     F .text	00000010 effect_TECX_OPRIMIDO_tr0
1a00122e l     F .text	00000008 exseq_TECX_VALIDACION
1a001236 l     F .text	00000010 effect_TECX_VALIDACION_tr0
1a001246 l     F .text	00000010 effect_TECX_VALIDACION_tr1
1a001256 l     F .text	0000000a exseq_Teclas_ESPERA
1a001260 l     F .text	00000016 effect_Teclas_ESPERA_tr0
1a001276 l     F .text	00000016 effect_Teclas_ESPERA_tr1
1a00128c l     F .text	00000016 effect_Teclas_ESPERA_tr2
1a0012a2 l     F .text	00000016 effect_Teclas_ESPERA_tr3
1a0012b8 l     F .text	0000000a exseq_Modo_Grupo_MANUAL
1a0012c2 l     F .text	0000000a exseq_Modo_Grupo_AUTOMATICO
1a0012cc l     F .text	0000000a exseq_Servicio_Red_HAY_LUZ
1a0012d6 l     F .text	0000000a exseq_Servicio_Red_VALIDACION
1a0012e0 l     F .text	0000000a exseq_Servicio_Red_NO_HAY_LUZ
1a0012ea l     F .text	0000000a exseq_Grupo_Electrogeno_ARRANQUE_EXITO
1a0012f4 l     F .text	0000000a exseq_Grupo_Electrogeno_FALLA
1a0012fe l     F .text	0000000a exseq_Grupo_Electrogeno_ESPERA_GRUPO
1a001308 l     F .text	0000000a exseq_Grupo_Electrogeno_FIN_ARRANQUE
1a001312 l     F .text	0000000a exseq_Display_IDLE
1a00131c l     F .text	0000000a exseq_Conmutador_GRUPO_CONMUTADO
1a001326 l     F .text	0000000a exseq_Conmutador_RED_CONMUTADA
1a001330 l     F .text	0000000a exseq_Conmutador_CONMUTACION_INICIAL
1a00133a l     F .text	0000000a exseq_Sensor_Temp_IDLE
1a001344 l     F .text	00000014 react_TECX_OPRIMIDO
1a001358 l     F .text	00000024 react_TECX_VALIDACION
1a00137c l     F .text	00000042 react_Teclas_ESPERA
1a0013be l     F .text	00000008 react_TECX__entry_Default
1a0013c6 l     F .text	00000008 enseq_TECX_default
1a0013ce l     F .text	00000008 react_Teclas__entry_Default
1a0013d6 l     F .text	00000008 enseq_Teclas_default
1a0013de l     F .text	00000008 react_Display__entry_Default
1a0013e6 l     F .text	00000008 enseq_Display_default
1a0013ee l     F .text	00000008 react_Sensor_Temp__entry_Default
1a0013f6 l     F .text	00000008 enseq_Sensor_Temp_default
1a0013fe l     F .text	0000000c enact_Modo_Grupo_MANUAL
1a00140a l     F .text	00000012 enseq_Modo_Grupo_MANUAL_default
1a00141c l     F .text	00000008 react_Modo_Grupo__entry_Default
1a001424 l     F .text	00000008 enseq_Modo_Grupo_default
1a00142c l     F .text	00000018 enact_Servicio_Red_HAY_LUZ
1a001444 l     F .text	00000012 enseq_Servicio_Red_HAY_LUZ_default
1a001456 l     F .text	00000008 react_Servicio_Red__entry_Default
1a00145e l     F .text	00000008 enseq_Servicio_Red_default
1a001466 l     F .text	00000010 effect_Servicio_Red_VALIDACION_tr0
1a001476 l     F .text	0000000c enact_Grupo_Electrogeno_ESPERA_GRUPO
1a001482 l     F .text	00000012 enseq_Grupo_Electrogeno_ESPERA_GRUPO_default
1a001494 l     F .text	00000008 react_Grupo_Electrogeno__entry_Default
1a00149c l     F .text	00000008 enseq_Grupo_Electrogeno_default
1a0014a4 l     F .text	0000000c enact_Modo_Grupo_AUTOMATICO
1a0014b0 l     F .text	00000012 enseq_Modo_Grupo_AUTOMATICO_default
1a0014c2 l     F .text	00000016 enact_Servicio_Red_NO_HAY_LUZ
1a0014d8 l     F .text	00000012 enseq_Servicio_Red_NO_HAY_LUZ_default
1a0014ea l     F .text	00000010 effect_Servicio_Red_VALIDACION_tr1
1a0014fa l     F .text	00000024 react_Servicio_Red_VALIDACION
1a00151e l     F .text	00000010 enact_Grupo_Electrogeno_FALLA
1a00152e l     F .text	00000012 enseq_Grupo_Electrogeno_FALLA_default
1a001540 l     F .text	0000001e enact_Conmutador_CONMUTACION_INICIAL
1a00155e l     F .text	00000012 enseq_Conmutador_CONMUTACION_INICIAL_default
1a001570 l     F .text	00000008 react_Conmutador__entry_Default
1a001578 l     F .text	00000008 enseq_Conmutador_default
1a001580 l     F .text	0000000c enact_Grupo_Electrogeno_FIN_ARRANQUE
1a00158c l     F .text	00000012 enseq_Grupo_Electrogeno_FIN_ARRANQUE_default
1a00159e l     F .text	00000012 enact_Conmutador_RED_CONMUTADA
1a0015b0 l     F .text	00000012 enseq_Conmutador_RED_CONMUTADA_default
1a0015c2 l     F .text	00000010 effect_Conmutador_CONMUTACION_INICIAL_tr0
1a0015d2 l     F .text	00000014 react_Conmutador_CONMUTACION_INICIAL
1a0015e6 l     F .text	0000001c enact_Conmutador_GRUPO_CONMUTADO
1a001602 l     F .text	00000012 enseq_Conmutador_GRUPO_CONMUTADO_default
1a001614 l     F .text	0000000c exact_TECX_DEBOUNCE
1a001620 l     F .text	0000000e exseq_TECX_DEBOUNCE
1a00162e l     F .text	00000010 effect_TECX_DEBOUNCE_tr0
1a00163e l     F .text	00000014 react_TECX_DEBOUNCE
1a001652 l     F .text	00000018 exact_Modo_Grupo_TRANSICION_MODOS
1a00166a l     F .text	00000010 exseq_Modo_Grupo_TRANSICION_MODOS
1a00167a l     F .text	00000010 effect_Modo_Grupo_TRANSICION_MODOS_tr0
1a00168a l     F .text	00000010 effect_Modo_Grupo_TRANSICION_MODOS_tr1
1a00169a l     F .text	00000024 react_Modo_Grupo_TRANSICION_MODOS
1a0016be l     F .text	0000000c exact_Servicio_Red_ESPERA
1a0016ca l     F .text	00000010 exseq_Servicio_Red_ESPERA
1a0016da l     F .text	00000010 effect_Servicio_Red_ESPERA_tr0
1a0016ea l     F .text	00000014 react_Servicio_Red_ESPERA
1a0016fe l     F .text	0000000c exact_Grupo_Electrogeno_GRUPO_APAGADO
1a00170a l     F .text	00000010 exseq_Grupo_Electrogeno_GRUPO_APAGADO
1a00171a l     F .text	00000010 effect_Grupo_Electrogeno_GRUPO_APAGADO_tr0
1a00172a l     F .text	00000014 react_Grupo_Electrogeno_GRUPO_APAGADO
1a00173e l     F .text	0000002c exact_Grupo_Electrogeno_CHEQUEO_ENCENDIDO
1a00176a l     F .text	00000010 exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO
1a00177a l     F .text	00000010 effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1
1a00178a l     F .text	00000010 effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2
1a00179a l     F .text	00000010 effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3
1a0017aa l     F .text	0000000c exact_Grupo_Electrogeno_INICIO_ARRANQUE
1a0017b6 l     F .text	00000010 exseq_Grupo_Electrogeno_INICIO_ARRANQUE
1a0017c6 l     F .text	00000010 effect_Grupo_Electrogeno_INICIO_ARRANQUE_tr0
1a0017d6 l     F .text	00000014 react_Grupo_Electrogeno_INICIO_ARRANQUE
1a0017ea l     F .text	00000018 exact_Grupo_Electrogeno_ESTABILIZACION_GRUPO
1a001802 l     F .text	00000010 exseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO
1a001812 l     F .text	0000000c exact_Grupo_Electrogeno_APAGANDO_GRUPO
1a00181e l     F .text	00000010 exseq_Grupo_Electrogeno_APAGANDO_GRUPO
1a00182e l     F .text	00000018 exact_Grupo_Electrogeno_CHEQUEO_APAGADO
1a001846 l     F .text	00000010 exseq_Grupo_Electrogeno_CHEQUEO_APAGADO
1a001856 l     F .text	0000000c exact_Display_MOSTRAR_VALORES
1a001862 l     F .text	00000010 exseq_Display_MOSTRAR_VALORES
1a001872 l     F .text	00000010 effect_Display_MOSTRAR_VALORES_tr0
1a001882 l     F .text	00000014 react_Display_MOSTRAR_VALORES
1a001896 l     F .text	00000018 exact_Conmutador_SIN_CONMUTACION
1a0018ae l     F .text	00000010 exseq_Conmutador_SIN_CONMUTACION
1a0018be l     F .text	00000010 effect_Conmutador_SIN_CONMUTACION_tr0
1a0018ce l     F .text	00000010 effect_Conmutador_SIN_CONMUTACION_tr1
1a0018de l     F .text	00000024 react_Conmutador_SIN_CONMUTACION
1a001902 l     F .text	0000000c exact_Sensor_Temp_LEYENDO_TEMP
1a00190e l     F .text	00000010 exseq_Sensor_Temp_LEYENDO_TEMP
1a00191e l     F .text	00000010 effect_Sensor_Temp_LEYENDO_TEMP_tr0
1a00192e l     F .text	00000014 react_Sensor_Temp_LEYENDO_TEMP
1a001942 l     F .text	00000010 enact_TECX_DEBOUNCE
1a001952 l     F .text	00000012 enseq_TECX_DEBOUNCE_default
1a001964 l     F .text	00000010 effect_TECX_NO_OPRIMIDO_tr0
1a001974 l     F .text	00000014 react_TECX_NO_OPRIMIDO
1a001988 l     F .text	00000024 enact_Modo_Grupo_TRANSICION_MODOS
1a0019ac l     F .text	00000012 enseq_Modo_Grupo_TRANSICION_MODOS_default
1a0019be l     F .text	00000014 effect_Modo_Grupo_MANUAL_tr0
1a0019d2 l     F .text	00000014 react_Modo_Grupo_MANUAL
1a0019e6 l     F .text	00000014 effect_Modo_Grupo_AUTOMATICO_tr0
1a0019fa l     F .text	00000014 react_Modo_Grupo_AUTOMATICO
1a001a0e l     F .text	00000012 enact_Servicio_Red_ESPERA
1a001a20 l     F .text	00000012 enseq_Servicio_Red_ESPERA_default
1a001a32 l     F .text	00000010 effect_Servicio_Red_HAY_LUZ_tr0
1a001a42 l     F .text	00000014 react_Servicio_Red_HAY_LUZ
1a001a56 l     F .text	00000010 effect_Servicio_Red_NO_HAY_LUZ_tr0
1a001a66 l     F .text	00000014 react_Servicio_Red_NO_HAY_LUZ
1a001a7a l     F .text	00000028 enact_Grupo_Electrogeno_INICIO_ARRANQUE
1a001aa2 l     F .text	00000012 enseq_Grupo_Electrogeno_INICIO_ARRANQUE_default
1a001ab4 l     F .text	00000010 effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0
1a001ac4 l     F .text	00000042 react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO
1a001b06 l     F .text	00000010 effect_Grupo_Electrogeno_ESPERA_GRUPO_tr0
1a001b16 l     F .text	00000010 effect_Grupo_Electrogeno_ESPERA_GRUPO_tr1
1a001b26 l     F .text	00000024 react_Grupo_Electrogeno_ESPERA_GRUPO
1a001b4a l     F .text	0000001e enact_Grupo_Electrogeno_APAGANDO_GRUPO
1a001b68 l     F .text	00000012 enseq_Grupo_Electrogeno_APAGANDO_GRUPO_default
1a001b7a l     F .text	00000010 effect_Grupo_Electrogeno_ARRANQUE_EXITO_tr0
1a001b8a l     F .text	00000010 effect_Grupo_Electrogeno_ARRANQUE_EXITO_tr1
1a001b9a l     F .text	00000024 react_Grupo_Electrogeno_ARRANQUE_EXITO
1a001bbe l     F .text	00000010 effect_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0
1a001bce l     F .text	0000003e enact_Grupo_Electrogeno_GRUPO_APAGADO
1a001c0c l     F .text	00000012 enseq_Grupo_Electrogeno_GRUPO_APAGADO_default
1a001c1e l     F .text	00000010 effect_Grupo_Electrogeno_FALLA_tr0
1a001c2e l     F .text	00000010 effect_Grupo_Electrogeno_FALLA_tr1
1a001c3e l     F .text	00000024 react_Grupo_Electrogeno_FALLA
1a001c62 l     F .text	00000010 effect_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1
1a001c72 l     F .text	00000024 react_Grupo_Electrogeno_CHEQUEO_APAGADO
1a001c96 l     F .text	00000024 enact_Grupo_Electrogeno_ESTABILIZACION_GRUPO
1a001cba l     F .text	00000012 enseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO_default
1a001ccc l     F .text	00000010 effect_Grupo_Electrogeno_FIN_ARRANQUE_tr0
1a001cdc l     F .text	00000008 react_Grupo_Electrogeno_FIN_ARRANQUE
1a001ce4 l     F .text	00000042 enact_Conmutador_SIN_CONMUTACION
1a001d26 l     F .text	00000012 enseq_Conmutador_SIN_CONMUTACION_default
1a001d38 l     F .text	00000018 effect_Conmutador_GRUPO_CONMUTADO_tr0
1a001d50 l     F .text	00000018 effect_Conmutador_GRUPO_CONMUTADO_tr1
1a001d68 l     F .text	00000024 react_Conmutador_GRUPO_CONMUTADO
1a001d8c l     F .text	00000018 effect_Conmutador_RED_CONMUTADA_tr0
1a001da4 l     F .text	00000018 effect_Conmutador_RED_CONMUTADA_tr1
1a001dbc l     F .text	00000024 react_Conmutador_RED_CONMUTADA
1a001de0 l     F .text	00000050 enact_Grupo_Electrogeno_CHEQUEO_ENCENDIDO
1a001e30 l     F .text	00000012 enseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_default
1a001e42 l     F .text	00000016 effect_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0
1a001e58 l     F .text	00000010 effect_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1
1a001e68 l     F .text	00000024 react_Grupo_Electrogeno_ESTABILIZACION_GRUPO
1a001e8c l     F .text	0000003a enact_Grupo_Electrogeno_CHEQUEO_APAGADO
1a001ec6 l     F .text	00000012 enseq_Grupo_Electrogeno_CHEQUEO_APAGADO_default
1a001ed8 l     F .text	00000010 effect_Grupo_Electrogeno_APAGANDO_GRUPO_tr0
1a001ee8 l     F .text	00000014 react_Grupo_Electrogeno_APAGANDO_GRUPO
1a001efc l     F .text	0000001a enact_Display_MOSTRAR_VALORES
1a001f16 l     F .text	00000012 enseq_Display_MOSTRAR_VALORES_default
1a001f28 l     F .text	00000016 effect_Display_IDLE_tr0
1a001f3e l     F .text	00000024 react_Display_IDLE
1a001f62 l     F .text	0000001a enact_Sensor_Temp_LEYENDO_TEMP
1a001f7c l     F .text	00000012 enseq_Sensor_Temp_LEYENDO_TEMP_default
1a001f8e l     F .text	00000010 effect_Sensor_Temp_IDLE_tr0
1a001f9e l     F .text	00000014 react_Sensor_Temp_IDLE
00000000 l    df *ABS*	00000000 TimerTicks.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004668 l     O .text	00000004 InitClkStates
1a00466c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a002480 l     F .text	00000044 Board_LED_Init
1a0024c4 l     F .text	00000040 Board_TEC_Init
1a002504 l     F .text	00000040 Board_GPIO_Init
1a002544 l     F .text	00000030 Board_ADC_Init
1a002574 l     F .text	00000038 Board_SPI_Init
1a0025ac l     F .text	00000024 Board_I2C_Init
1a0046e4 l     O .text	00000008 GpioButtons
1a0046ec l     O .text	0000000c GpioLeds
1a0046f8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00262c l     F .text	00000014 Chip_SSP_GetClockIndex
1a002640 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002930 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002944 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004710 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002c94 l     F .text	000000a0 pll_calc_divs
1a002d34 l     F .text	0000010c pll_get_frac
1a002e40 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0030b4 l     F .text	00000022 Chip_Clock_GetDivRate
10000220 l     O .bss	00000008 audio_usb_pll_freq
1a004764 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003220 l     F .text	0000002c Chip_UART_GetIndex
1a0047d0 l     O .text	00000008 UART_BClock
1a0047d8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0033d0 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_i2c.c
00000000 l    df *ABS*	00000000 sapi_tick.c
10000228 l     O .bss	00000004 callBackFuncParams
10000230 l     O .bss	00000008 tickCounter
10000238 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000023c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_convert.c
1a0048c8 l     O .text	00000058 rounders
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 display_lcd_hd44780_gpios.c
1a003b08 l     F .text	00000038 pcf8574TGpioPortWrite
1a003b40 l     F .text	00000028 pcf8574TGpioWrite
1a003b68 l     F .text	00000008 lcdPinSet
1a003b70 l     F .text	0000002e lcdSendNibble
1a003b9e l     F .text	0000001c lcdEnablePulse
1a003bbc l     F .text	0000002c pcf8574TGpioPortInit
1a003be8 l     F .text	00000018 pcf8574TInit
10000240 l     O .bss	0000000a lcd
1000024a l     O .bss	00000001 pcf8574TGpioPortDirections
1000024b l     O .bss	00000001 pcf8574TGpioPortValue
10000048 l     O .data	00000001 pcf8574TI2cAddress
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a00492c l       .init_array	00000000 __init_array_end
1a004924 l       .bss_RAM5	00000000 __preinit_array_end
1a004924 l       .init_array	00000000 __init_array_start
1a004924 l       .bss_RAM5	00000000 __preinit_array_start
1a000ab4 g     F .text	0000000c _ZN17DallasTemperature8getTempCEPKh
1a002ed8 g     F .text	0000001c Chip_Clock_GetDividerSource
10000050 g     O .bss	00000001 SysTick_Time_Flag
1a002af6 g     F .text	0000000e Chip_I2CM_Xfer
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a003684 g     F .text	00000038 i2cInit
1a000184  w    F .text	00000002 DebugMon_Handler
1a003e48 g     F .text	0000001c lcdSendFloat
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a001ff8 g     F .text	00000034 proyecto_enter
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a004180 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a002624 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000348 g     F .text	0000000c proyectoIface_switchSalida
1a000aec g     F .text	00000014 _ZN17DallasTemperatureC2EP7OneWire
1a002700 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a0029ea g     F .text	0000000c Chip_ADC_SetResolution
1a0037bc g     F .text	0000002c SysTick_Handler
1a002342  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a004934 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a000986 g     F .text	00000012 _ZN17DallasTemperature20isConversionCompleteEv
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a000a0a g     F .text	0000002a _ZN17DallasTemperature19requestTemperaturesEv
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff554a g       *ABS*	00000000 __valid_user_code_checksum
1a002218 g     F .text	00000006 proyectoIface_get_temperatura
1a004934 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0022fe g     F .text	00000044 UpdateTimers
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a003156 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a000de0 g     F .text	00000030 _ZN7OneWire4crc8EPKhh
1a0001a8 g     F .text	00000012 bss_init
1a0022ac g     F .text	0000002e IsPendEvent
1a000300 g     F .text	0000000c _Z10myTickHookPv
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0022da g     F .text	00000024 MarkAsAttEvent
1a004108 g     F .text	00000022 .hidden __floatsidf
1a0028ac g     F .text	00000030 Chip_I2C_MasterStateHandler
1a000924 g     F .text	00000062 _ZN17DallasTemperature5beginEv
1a00427c g     F .text	00000000 .hidden __aeabi_uldivmod
1000031c g       .noinit	00000000 _noinit
1000024c g     O .bss	00000004 SystemCoreClock
1a00324c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a0031d4 g     F .text	0000004c Chip_Clock_GetRate
1a000658 g     F .text	0000002a _Z18Buttons_GetStatus_v
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002408 g     F .text	0000006c Board_SetupClocking
1a0021c0 g     F .text	00000012 proyecto_raiseTimeEvent
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0040e8 g     F .text	0000001e .hidden __aeabi_ui2d
1a000644 g     F .text	00000014 proyecto_unsetTimer
1a00287c g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0042ac g     F .text	000002d0 .hidden __udivmoddi4
1a003e64 g     F .text	00000000 .hidden __aeabi_drsub
1a0046e0 g     O .text	00000004 ExtRateIn
1a000b00 g     F .text	0000006e _ZN7OneWire5resetEv
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000882 g     F .text	0000004a _ZN17DallasTemperature14readScratchPadEPKhPh
1a002210 g     F .text	00000004 proyectoIface_get_conmutacionRed
1a000300 g       .text	00000000 __CRP_WORD_END__
1a003dfc g     F .text	00000038 lcdSendChar
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a003d6e g     F .text	00000014 lcdCursorSet
1a0039f0 g     F .text	00000028 floatToStringGlobal
1a00412c g     F .text	00000042 .hidden __extendsfdf2
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003e70 g     F .text	00000276 .hidden __adddf3
1a000998 g     F .text	00000020 _ZN17DallasTemperature25millisToWaitForConversionEh
1a00492c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0021d2 g     F .text	00000006 proyectoIface_raise_evTECXNoOprimido
1a004580 g     F .text	00000048 __libc_init_array
1a001fb2 g     F .text	00000046 proyecto_init
1a0040e8 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0008cc g     F .text	00000022 _ZN17DallasTemperature11isConnectedEPKhPh
1a0025f4 g     F .text	00000030 Board_Init
1a0023ce  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0005f8 g     F .text	00000030 proyectoIface_guardarTemp
1a000ae8 g     F .text	00000004 _ZN17DallasTemperature15setAlarmHandlerEPFvPKhE
1a0041dc g     F .text	0000009e .hidden __aeabi_d2f
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000031c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a002344 g     F .text	00000088 Reset_Handler
1a003740 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002b04 g     F .text	00000024 Chip_I2CM_XferBlocking
1a003878 g     F .text	00000178 floatToString
1a002844 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002e8c g     F .text	0000004c Chip_Clock_EnableCrystal
1a000840 g     F .text	00000042 _ZN17DallasTemperature10getAddressEPhh
10008000 g       *ABS*	00000000 __top_RamLoc32
1a003e70 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a004170 g     F .text	0000006a .hidden __aeabi_ul2d
1a002206 g     F .text	00000006 proyectoIface_get_grupoFalla
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a002820 g     F .text	00000024 Chip_I2C_Init
1a002246 g     F .text	00000032 SetNewTimerTick
1a000ca2 g     F .text	00000018 _ZN7OneWire12reset_searchEv
1a003e34 g     F .text	00000014 lcdSendString
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000a8c g     F .text	00000028 _ZN17DallasTemperature12rawToCelsiusEs
1a003048 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0047e0 g     O .text	000000e6 gpioPinsInit
1a002658 g     F .text	00000012 Chip_SSP_SetClockRate
1a000a64 g     F .text	00000028 _ZN17DallasTemperature7getTempEPKh
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003130 g     F .text	00000026 Chip_Clock_GetBaseClock
1a000ac0 g     F .text	00000028 _ZN17DallasTemperature15getTempCByIndexEh
1a000828 g     F .text	00000018 _ZN17DallasTemperature12validAddressEPKh
1a003c68 g     F .text	000000a4 lcdInit
10000050 g       .bss	00000000 _bss
1a0029b8 g     F .text	00000032 Chip_ADC_SetSampleRate
1a003e6c g     F .text	0000027a .hidden __aeabi_dsub
1a004170 g     F .text	0000006a .hidden __floatundidf
1a0021fc g     F .text	00000004 proyectoIface_get_modoGrupo
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00266a g     F .text	0000003e Chip_SSP_SetBitRate
1a00292c g     F .text	00000002 Chip_GPIO_Init
1a00470c g     O .text	00000004 OscRateIn
1a003a18 g     F .text	0000005a delayInaccurateMs
1a000cd6 g     F .text	0000010a _ZN7OneWire6searchEPhb
1000031c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a002214 g     F .text	00000004 proyectoIface_get_conmutacionGrupo
1a003c38 g     F .text	00000030 lcdData
1a000178 g       .text	00000000 __bss_section_table_end
1a004108 g     F .text	00000022 .hidden __aeabi_i2d
1a003404 g     F .text	000001ac gpioInit
1a00457c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003c00 g     F .text	00000038 lcdCommand
1a000354 g     F .text	00000010 proyectoIface_grupoStatus
1a003dd4 g     F .text	00000028 lcdSendEnter
1a0021f2 g     F .text	00000006 proyectoIface_raise_leerTemp
1a0037e8 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0028dc g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002ef4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0045c8 g     F .text	00000010 memset
1a00221e g     F .text	00000006 proyectoIface_set_temperatura
1a00017c  w    F .text	00000002 MemManage_Handler
1a00068c g     F .text	00000130 main
1a00220c g     F .text	00000004 proyectoIface_get_numDisplay
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a002278 g     F .text	00000034 UnsetTimerTick
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a003d98 g     F .text	0000003c lcdCreateChar
1a0041dc g     F .text	0000009e .hidden __truncdfsf2
100000c0 g     O .bss	00000014 oneWireObjeto
10000254 g     O .bss	000000c8 globalStrConvertBuff
1a004180 g     F .text	0000005a .hidden __aeabi_l2d
1a0008ee g     F .text	00000036 _ZN17DallasTemperature15readPowerSupplyEPKh
1a000628 g     F .text	0000001c proyecto_setTimer
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003164 g     F .text	0000003c Chip_Clock_EnableOpts
1a002f10 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002fc8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000cba g     F .text	0000001c _ZN7OneWire5beginEh
1a000c96 g     F .text	0000000c _ZN7OneWire4skipEv
1a00337c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a003ad0 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0035b0 g     F .text	0000006a gpioWrite
1a0023cc  w    F .text	00000002 _fini
1a0009b8 g     F .text	00000052 _ZN17DallasTemperature27blockTillConversionCompleteEh
1a002200 g     F .text	00000006 proyectoIface_get_grupoExito
1a002978 g     F .text	00000040 Chip_ADC_Init
1a000b6e g     F .text	00000062 _ZN7OneWire9write_bitEh
10000250 g     O .bss	00000004 g_pUsbApi
1a0023d0 g     F .text	00000038 Board_SetupMuxing
1a003d0c g     F .text	00000050 lcdGoToXY
1a0032a0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0036fc g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
100000f0 g     O .bss	00000130 ticks
1a000aec g     F .text	00000014 _ZN17DallasTemperatureC1EP7OneWire
1b000000 g       .text	00000000 __core_m0app_START__
1a003d82 g     F .text	00000016 lcdSendStringRaw
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a0029f6 g     F .text	00000100 Chip_I2CM_XferHandler
1a002224 g     F .text	00000022 InitTimerTicks
10000000 g       .data	00000000 _data
1a003708 g     F .text	00000020 tickCallbackSet
1000031c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0026a8 g     F .text	00000038 Chip_SSP_Init
1a0028f4 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a00202c g     F .text	00000194 proyecto_runCycle
1a0036bc g     F .text	00000040 i2cWrite
1a0025d0 g     F .text	00000024 Board_Debug_Init
1000004c g       .data	00000000 _edata
1a0026e0 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a002b28 g     F .text	00000158 Chip_SetupCoreClock
1a0021d8 g     F .text	00000008 proyectoIface_raise_evTECXOprimido
1a000bd0 g     F .text	00000042 _ZN7OneWire8read_bitEv
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000364 g     F .text	00000294 proyectoIface_displayValores
1a000812 g     F .text	00000016 _ZN17DallasTemperature10setOneWireEP7OneWire
1a000000 g     O .text	00000040 g_pfnVectors
1a002c80 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003d5c g     F .text	00000012 lcdClear
1a003a72 g     F .text	0000005c delayInaccurateUs
1a00457c  w    F .text	00000002 .hidden __aeabi_idiv0
1a000c4e g     F .text	00000022 _ZN7OneWire4readEv
100000d4 g     O .bss	0000001c sensorDS18B20
1a000338 g     F .text	00000010 proyectoIface_opLED
1a00017e  w    F .text	00000002 BusFault_Handler
1a0031a0 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a000c70 g     F .text	00000026 _ZN7OneWire6selectEPKh
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00361a g     F .text	00000068 gpioRead
1a00412c g     F .text	00000042 .hidden __aeabi_f2d
1a003804 g     F .text	00000074 boardInit
1a000a34 g     F .text	00000030 _ZN17DallasTemperature20calculateTemperatureEPKhPh
1a0021e0 g     F .text	00000006 proyectoIface_raise_inputRedFalse
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003e6c g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000682 g     F .text	00000008 _Z11RED_Status_9gpioMap_t
1a000c12 g     F .text	0000003c _ZN7OneWire5writeEhh
1a003728 g     F .text	00000018 tickPowerSet
1a0021f8 g     F .text	00000004 proyectoIface_get_estadoLuz
1a0021e6 g     F .text	00000006 proyectoIface_raise_inputRedTrue
1a0007ca g     F .text	00000048 _ZN17DallasTemperature11validFamilyEPKh
1a0030d8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0033b4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0021ec g     F .text	00000006 proyectoIface_raise_showDisplay
1a002474 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 45 23 00 1a 79 01 00 1a 7b 01 00 1a     ....E#..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 4a 55 ff 53     }...........JU.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	bd 37 00 1a                                         .7..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	e9 37 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .7..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004934 	.word	0x1a004934
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000004c 	.word	0x0000004c
1a000120:	1a004934 	.word	0x1a004934
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004934 	.word	0x1a004934
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004934 	.word	0x1a004934
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004934 	.word	0x1a004934
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000050 	.word	0x10000050
1a000154:	000002cc 	.word	0x000002cc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <_Z10myTickHookPv>:
 * @return	Nothing
 */
void myTickHook( void *ptr ){

	/* The sysTick Interrupt Handler only set a Flag */
	SysTick_Time_Flag = true;
1a000300:	4b01      	ldr	r3, [pc, #4]	; (1a000308 <_Z10myTickHookPv+0x8>)
1a000302:	2201      	movs	r2, #1
1a000304:	701a      	strb	r2, [r3, #0]
}
1a000306:	4770      	bx	lr
1a000308:	10000050 	.word	0x10000050

1a00030c <_Z41__static_initialization_and_destruction_0ii>:


		}

	}
}
1a00030c:	2801      	cmp	r0, #1
1a00030e:	d000      	beq.n	1a000312 <_Z41__static_initialization_and_destruction_0ii+0x6>
1a000310:	4770      	bx	lr
1a000312:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000316:	4299      	cmp	r1, r3
1a000318:	d1fa      	bne.n	1a000310 <_Z41__static_initialization_and_destruction_0ii+0x4>
1a00031a:	b510      	push	{r4, lr}
    uint8_t LastFamilyDiscrepancy;
    bool LastDeviceFlag;
#endif

  public:
    OneWire(uint8_t pin) { begin(pin); }
1a00031c:	4c04      	ldr	r4, [pc, #16]	; (1a000330 <_Z41__static_initialization_and_destruction_0ii+0x24>)
1a00031e:	211e      	movs	r1, #30
1a000320:	4620      	mov	r0, r4
1a000322:	f000 fcca 	bl	1a000cba <_ZN7OneWire5beginEh>
DallasTemperature sensorDS18B20(&oneWireObjeto);
1a000326:	4621      	mov	r1, r4
1a000328:	4802      	ldr	r0, [pc, #8]	; (1a000334 <_Z41__static_initialization_and_destruction_0ii+0x28>)
1a00032a:	f000 fbdf 	bl	1a000aec <_ZN17DallasTemperatureC1EP7OneWire>
}
1a00032e:	bd10      	pop	{r4, pc}
1a000330:	100000c0 	.word	0x100000c0
1a000334:	100000d4 	.word	0x100000d4

1a000338 <proyectoIface_opLED>:
{
1a000338:	b508      	push	{r3, lr}
	gpioWrite( (gpioMap_t)(LEDR + LEDNumber), State );
1a00033a:	f101 0028 	add.w	r0, r1, #40	; 0x28
1a00033e:	4611      	mov	r1, r2
1a000340:	b240      	sxtb	r0, r0
1a000342:	f003 f935 	bl	1a0035b0 <gpioWrite>
}
1a000346:	bd08      	pop	{r3, pc}

1a000348 <proyectoIface_switchSalida>:
{
1a000348:	b508      	push	{r3, lr}
	gpioWrite( (gpioMap_t)output, State );
1a00034a:	b248      	sxtb	r0, r1
1a00034c:	4611      	mov	r1, r2
1a00034e:	f003 f92f 	bl	1a0035b0 <gpioWrite>
}
1a000352:	bd08      	pop	{r3, pc}

1a000354 <proyectoIface_grupoStatus>:
sc_boolean proyectoIface_grupoStatus(const Proyecto* handle, sc_integer input){
1a000354:	b508      	push	{r3, lr}
	return gpioRead( (gpioMap_t)input );
1a000356:	b248      	sxtb	r0, r1
1a000358:	f003 f95f 	bl	1a00361a <gpioRead>
}
1a00035c:	3000      	adds	r0, #0
1a00035e:	bf18      	it	ne
1a000360:	2001      	movne	r0, #1
1a000362:	bd08      	pop	{r3, pc}

1a000364 <proyectoIface_displayValores>:
void proyectoIface_displayValores(const Proyecto* handle){
1a000364:	b530      	push	{r4, r5, lr}
1a000366:	b09f      	sub	sp, #124	; 0x7c
1a000368:	2500      	movs	r5, #0
	const char tempChar[8] = {
1a00036a:	4c96      	ldr	r4, [pc, #600]	; (1a0005c4 <proyectoIface_displayValores+0x260>)
1a00036c:	ab1c      	add	r3, sp, #112	; 0x70
1a00036e:	e894 0003 	ldmia.w	r4, {r0, r1}
1a000372:	e883 0003 	stmia.w	r3, {r0, r1}
	char temp[7] = "Temp: ";
1a000376:	4a94      	ldr	r2, [pc, #592]	; (1a0005c8 <proyectoIface_displayValores+0x264>)
1a000378:	e892 0003 	ldmia.w	r2, {r0, r1}
1a00037c:	901a      	str	r0, [sp, #104]	; 0x68
1a00037e:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
1a000382:	0c09      	lsrs	r1, r1, #16
1a000384:	f88d 106e 	strb.w	r1, [sp, #110]	; 0x6e
	lcdCreateChar( TEMP_CHAR, tempChar );
1a000388:	4619      	mov	r1, r3
1a00038a:	4628      	mov	r0, r5
1a00038c:	f003 fd04 	bl	1a003d98 <lcdCreateChar>
	char red_ext[9] = "Red Ext:";
1a000390:	4a8e      	ldr	r2, [pc, #568]	; (1a0005cc <proyectoIface_displayValores+0x268>)
1a000392:	ab17      	add	r3, sp, #92	; 0x5c
1a000394:	ca07      	ldmia	r2, {r0, r1, r2}
1a000396:	c303      	stmia	r3!, {r0, r1}
1a000398:	701a      	strb	r2, [r3, #0]
	char grupo[8] = "Grupo:";
1a00039a:	f104 0308 	add.w	r3, r4, #8
1a00039e:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0003a2:	9015      	str	r0, [sp, #84]	; 0x54
1a0003a4:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
1a0003a8:	0c09      	lsrs	r1, r1, #16
1a0003aa:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
1a0003ae:	f88d 505b 	strb.w	r5, [sp, #91]	; 0x5b
	char modo[6] = "Modo";
1a0003b2:	f104 0310 	add.w	r3, r4, #16
1a0003b6:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0003ba:	9013      	str	r0, [sp, #76]	; 0x4c
1a0003bc:	f88d 1050 	strb.w	r1, [sp, #80]	; 0x50
1a0003c0:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
	char on[3] = "ON";
1a0003c4:	4b82      	ldr	r3, [pc, #520]	; (1a0005d0 <proyectoIface_displayValores+0x26c>)
1a0003c6:	681b      	ldr	r3, [r3, #0]
1a0003c8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
1a0003cc:	0c1b      	lsrs	r3, r3, #16
1a0003ce:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
	char off[4] = "OFF";
1a0003d2:	4b80      	ldr	r3, [pc, #512]	; (1a0005d4 <proyectoIface_displayValores+0x270>)
1a0003d4:	9311      	str	r3, [sp, #68]	; 0x44
	char grupo_falla[6] = "Falla";
1a0003d6:	4b80      	ldr	r3, [pc, #512]	; (1a0005d8 <proyectoIface_displayValores+0x274>)
1a0003d8:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0003dc:	900f      	str	r0, [sp, #60]	; 0x3c
1a0003de:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
	char modo_manual[7] = "Manual";
1a0003e2:	4b7e      	ldr	r3, [pc, #504]	; (1a0005dc <proyectoIface_displayValores+0x278>)
1a0003e4:	e893 0003 	ldmia.w	r3, {r0, r1}
1a0003e8:	900d      	str	r0, [sp, #52]	; 0x34
1a0003ea:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
1a0003ee:	0c09      	lsrs	r1, r1, #16
1a0003f0:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
	char modo_auto[11] = "Automatico";
1a0003f4:	4a7a      	ldr	r2, [pc, #488]	; (1a0005e0 <proyectoIface_displayValores+0x27c>)
1a0003f6:	ab0a      	add	r3, sp, #40	; 0x28
1a0003f8:	ca07      	ldmia	r2, {r0, r1, r2}
1a0003fa:	c303      	stmia	r3!, {r0, r1}
1a0003fc:	f823 2b02 	strh.w	r2, [r3], #2
1a000400:	0c12      	lsrs	r2, r2, #16
1a000402:	701a      	strb	r2, [r3, #0]
	char salida[9] = "Salida:";
1a000404:	ab07      	add	r3, sp, #28
1a000406:	3418      	adds	r4, #24
1a000408:	e894 0003 	ldmia.w	r4, {r0, r1}
1a00040c:	e883 0003 	stmia.w	r3, {r0, r1}
1a000410:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	char salida_red[4] = "Red";
1a000414:	4b73      	ldr	r3, [pc, #460]	; (1a0005e4 <proyectoIface_displayValores+0x280>)
1a000416:	9306      	str	r3, [sp, #24]
	char salida_grupo[6] = "Grupo";
1a000418:	4b73      	ldr	r3, [pc, #460]	; (1a0005e8 <proyectoIface_displayValores+0x284>)
1a00041a:	e893 0003 	ldmia.w	r3, {r0, r1}
1a00041e:	9004      	str	r0, [sp, #16]
1a000420:	f8ad 1014 	strh.w	r1, [sp, #20]
	char salida_ninguna[8] = "Ninguna";
1a000424:	4a71      	ldr	r2, [pc, #452]	; (1a0005ec <proyectoIface_displayValores+0x288>)
1a000426:	ab02      	add	r3, sp, #8
1a000428:	e892 0003 	ldmia.w	r2, {r0, r1}
1a00042c:	e883 0003 	stmia.w	r3, {r0, r1}
	char error[6] = "Error";
1a000430:	4b6f      	ldr	r3, [pc, #444]	; (1a0005f0 <proyectoIface_displayValores+0x28c>)
1a000432:	e893 0003 	ldmia.w	r3, {r0, r1}
1a000436:	9000      	str	r0, [sp, #0]
1a000438:	f8ad 1004 	strh.w	r1, [sp, #4]
	switch(proyectoIface_get_numDisplay(&statechart)){
1a00043c:	486d      	ldr	r0, [pc, #436]	; (1a0005f4 <proyectoIface_displayValores+0x290>)
1a00043e:	f001 fee5 	bl	1a00220c <proyectoIface_get_numDisplay>
1a000442:	2802      	cmp	r0, #2
1a000444:	d04f      	beq.n	1a0004e6 <proyectoIface_displayValores+0x182>
1a000446:	2803      	cmp	r0, #3
1a000448:	f000 8090 	beq.w	1a00056c <proyectoIface_displayValores+0x208>
1a00044c:	2801      	cmp	r0, #1
1a00044e:	d011      	beq.n	1a000474 <proyectoIface_displayValores+0x110>
			lcdGoToXY( 0, 0 );
1a000450:	2100      	movs	r1, #0
1a000452:	4608      	mov	r0, r1
1a000454:	f003 fc5a 	bl	1a003d0c <lcdGoToXY>
			lcdSendStringRaw(error);
1a000458:	4668      	mov	r0, sp
1a00045a:	f003 fc92 	bl	1a003d82 <lcdSendStringRaw>
			delay(800);
1a00045e:	f44f 7048 	mov.w	r0, #800	; 0x320
1a000462:	2100      	movs	r1, #0
1a000464:	f003 fb34 	bl	1a003ad0 <delay>
			lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a000468:	2000      	movs	r0, #0
1a00046a:	f003 fc80 	bl	1a003d6e <lcdCursorSet>
			lcdClear();
1a00046e:	f003 fc75 	bl	1a003d5c <lcdClear>
}
1a000472:	e02e      	b.n	1a0004d2 <proyectoIface_displayValores+0x16e>
			lcdGoToXY( 0, 0 );
1a000474:	4629      	mov	r1, r5
1a000476:	4628      	mov	r0, r5
1a000478:	f003 fc48 	bl	1a003d0c <lcdGoToXY>
			lcdSendStringRaw(red_ext);
1a00047c:	a817      	add	r0, sp, #92	; 0x5c
1a00047e:	f003 fc80 	bl	1a003d82 <lcdSendStringRaw>
			lcdGoToXY( 9, 0 );
1a000482:	4629      	mov	r1, r5
1a000484:	2009      	movs	r0, #9
1a000486:	f003 fc41 	bl	1a003d0c <lcdGoToXY>
			if (proyectoIface_get_estadoLuz(&statechart) == 0)
1a00048a:	485a      	ldr	r0, [pc, #360]	; (1a0005f4 <proyectoIface_displayValores+0x290>)
1a00048c:	f001 feb4 	bl	1a0021f8 <proyectoIface_get_estadoLuz>
1a000490:	bb08      	cbnz	r0, 1a0004d6 <proyectoIface_displayValores+0x172>
				lcdSendStringRaw(on);
1a000492:	a812      	add	r0, sp, #72	; 0x48
1a000494:	f003 fc75 	bl	1a003d82 <lcdSendStringRaw>
			lcdGoToXY( 0, 1 );
1a000498:	2101      	movs	r1, #1
1a00049a:	2000      	movs	r0, #0
1a00049c:	f003 fc36 	bl	1a003d0c <lcdGoToXY>
			lcdSendStringRaw(modo);
1a0004a0:	a813      	add	r0, sp, #76	; 0x4c
1a0004a2:	f003 fc6e 	bl	1a003d82 <lcdSendStringRaw>
			lcdGoToXY( 5, 1 );
1a0004a6:	2101      	movs	r1, #1
1a0004a8:	2005      	movs	r0, #5
1a0004aa:	f003 fc2f 	bl	1a003d0c <lcdGoToXY>
			if (proyectoIface_get_modoGrupo(&statechart) == 1)
1a0004ae:	4851      	ldr	r0, [pc, #324]	; (1a0005f4 <proyectoIface_displayValores+0x290>)
1a0004b0:	f001 fea4 	bl	1a0021fc <proyectoIface_get_modoGrupo>
1a0004b4:	2801      	cmp	r0, #1
1a0004b6:	d012      	beq.n	1a0004de <proyectoIface_displayValores+0x17a>
				lcdSendStringRaw(modo_auto);
1a0004b8:	a80a      	add	r0, sp, #40	; 0x28
1a0004ba:	f003 fc62 	bl	1a003d82 <lcdSendStringRaw>
			delay(800);
1a0004be:	f44f 7048 	mov.w	r0, #800	; 0x320
1a0004c2:	2100      	movs	r1, #0
1a0004c4:	f003 fb04 	bl	1a003ad0 <delay>
			lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a0004c8:	2000      	movs	r0, #0
1a0004ca:	f003 fc50 	bl	1a003d6e <lcdCursorSet>
			lcdClear(); // Borrar la pantalla
1a0004ce:	f003 fc45 	bl	1a003d5c <lcdClear>
}
1a0004d2:	b01f      	add	sp, #124	; 0x7c
1a0004d4:	bd30      	pop	{r4, r5, pc}
				lcdSendStringRaw(off);
1a0004d6:	a811      	add	r0, sp, #68	; 0x44
1a0004d8:	f003 fc53 	bl	1a003d82 <lcdSendStringRaw>
1a0004dc:	e7dc      	b.n	1a000498 <proyectoIface_displayValores+0x134>
				lcdSendStringRaw(modo_manual);
1a0004de:	a80d      	add	r0, sp, #52	; 0x34
1a0004e0:	f003 fc4f 	bl	1a003d82 <lcdSendStringRaw>
1a0004e4:	e7eb      	b.n	1a0004be <proyectoIface_displayValores+0x15a>
			lcdGoToXY( 0, 0 );
1a0004e6:	2100      	movs	r1, #0
1a0004e8:	4608      	mov	r0, r1
1a0004ea:	f003 fc0f 	bl	1a003d0c <lcdGoToXY>
			lcdSendStringRaw(grupo);
1a0004ee:	a815      	add	r0, sp, #84	; 0x54
1a0004f0:	f003 fc47 	bl	1a003d82 <lcdSendStringRaw>
			lcdGoToXY( 8, 0 );
1a0004f4:	2100      	movs	r1, #0
1a0004f6:	2008      	movs	r0, #8
1a0004f8:	f003 fc08 	bl	1a003d0c <lcdGoToXY>
			if (proyectoIface_get_grupoExito(&statechart) == true)
1a0004fc:	483d      	ldr	r0, [pc, #244]	; (1a0005f4 <proyectoIface_displayValores+0x290>)
1a0004fe:	f001 fe7f 	bl	1a002200 <proyectoIface_get_grupoExito>
1a000502:	b338      	cbz	r0, 1a000554 <proyectoIface_displayValores+0x1f0>
				lcdSendStringRaw(on);
1a000504:	a812      	add	r0, sp, #72	; 0x48
1a000506:	f003 fc3c 	bl	1a003d82 <lcdSendStringRaw>
			lcdGoToXY( 0, 1 );
1a00050a:	2101      	movs	r1, #1
1a00050c:	2000      	movs	r0, #0
1a00050e:	f003 fbfd 	bl	1a003d0c <lcdGoToXY>
			lcdData(TEMP_CHAR);
1a000512:	4628      	mov	r0, r5
1a000514:	f003 fb90 	bl	1a003c38 <lcdData>
			lcdGoToXY( 0, 3 );
1a000518:	2103      	movs	r1, #3
1a00051a:	2000      	movs	r0, #0
1a00051c:	f003 fbf6 	bl	1a003d0c <lcdGoToXY>
			lcdSendStringRaw(temp);
1a000520:	a81a      	add	r0, sp, #104	; 0x68
1a000522:	f003 fc2e 	bl	1a003d82 <lcdSendStringRaw>
			lcdSendFloat(proyectoIface_get_temperatura(&statechart),2);
1a000526:	4833      	ldr	r0, [pc, #204]	; (1a0005f4 <proyectoIface_displayValores+0x290>)
1a000528:	f001 fe76 	bl	1a002218 <proyectoIface_get_temperatura>
1a00052c:	ec51 0b10 	vmov	r0, r1, d0
1a000530:	f003 fe54 	bl	1a0041dc <__aeabi_d2f>
1a000534:	ee00 0a10 	vmov	s0, r0
1a000538:	2002      	movs	r0, #2
1a00053a:	f003 fc85 	bl	1a003e48 <lcdSendFloat>
			delay(800);
1a00053e:	f44f 7048 	mov.w	r0, #800	; 0x320
1a000542:	2100      	movs	r1, #0
1a000544:	f003 fac4 	bl	1a003ad0 <delay>
			lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a000548:	2000      	movs	r0, #0
1a00054a:	f003 fc10 	bl	1a003d6e <lcdCursorSet>
			lcdClear();
1a00054e:	f003 fc05 	bl	1a003d5c <lcdClear>
			break;
1a000552:	e7be      	b.n	1a0004d2 <proyectoIface_displayValores+0x16e>
			else if (proyectoIface_get_grupoFalla(&statechart) == true)
1a000554:	4827      	ldr	r0, [pc, #156]	; (1a0005f4 <proyectoIface_displayValores+0x290>)
1a000556:	f001 fe56 	bl	1a002206 <proyectoIface_get_grupoFalla>
1a00055a:	b118      	cbz	r0, 1a000564 <proyectoIface_displayValores+0x200>
				lcdSendStringRaw(grupo_falla);
1a00055c:	a80f      	add	r0, sp, #60	; 0x3c
1a00055e:	f003 fc10 	bl	1a003d82 <lcdSendStringRaw>
1a000562:	e7d2      	b.n	1a00050a <proyectoIface_displayValores+0x1a6>
				lcdSendStringRaw(off);
1a000564:	a811      	add	r0, sp, #68	; 0x44
1a000566:	f003 fc0c 	bl	1a003d82 <lcdSendStringRaw>
1a00056a:	e7ce      	b.n	1a00050a <proyectoIface_displayValores+0x1a6>
			lcdGoToXY( 0, 0 );
1a00056c:	2100      	movs	r1, #0
1a00056e:	4608      	mov	r0, r1
1a000570:	f003 fbcc 	bl	1a003d0c <lcdGoToXY>
			lcdSendStringRaw(salida);
1a000574:	a807      	add	r0, sp, #28
1a000576:	f003 fc04 	bl	1a003d82 <lcdSendStringRaw>
			lcdGoToXY( 7, 0 );
1a00057a:	2100      	movs	r1, #0
1a00057c:	2007      	movs	r0, #7
1a00057e:	f003 fbc5 	bl	1a003d0c <lcdGoToXY>
			if (proyectoIface_get_conmutacionRed(&statechart) == 1)
1a000582:	481c      	ldr	r0, [pc, #112]	; (1a0005f4 <proyectoIface_displayValores+0x290>)
1a000584:	f001 fe44 	bl	1a002210 <proyectoIface_get_conmutacionRed>
1a000588:	2801      	cmp	r0, #1
1a00058a:	d012      	beq.n	1a0005b2 <proyectoIface_displayValores+0x24e>
			else if (proyectoIface_get_conmutacionGrupo(&statechart) == 1)
1a00058c:	4819      	ldr	r0, [pc, #100]	; (1a0005f4 <proyectoIface_displayValores+0x290>)
1a00058e:	f001 fe41 	bl	1a002214 <proyectoIface_get_conmutacionGrupo>
1a000592:	2801      	cmp	r0, #1
1a000594:	d011      	beq.n	1a0005ba <proyectoIface_displayValores+0x256>
				lcdSendStringRaw(salida_ninguna);
1a000596:	a802      	add	r0, sp, #8
1a000598:	f003 fbf3 	bl	1a003d82 <lcdSendStringRaw>
			delay(800);
1a00059c:	f44f 7048 	mov.w	r0, #800	; 0x320
1a0005a0:	2100      	movs	r1, #0
1a0005a2:	f003 fa95 	bl	1a003ad0 <delay>
			lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a0005a6:	2000      	movs	r0, #0
1a0005a8:	f003 fbe1 	bl	1a003d6e <lcdCursorSet>
			lcdClear();
1a0005ac:	f003 fbd6 	bl	1a003d5c <lcdClear>
			break;
1a0005b0:	e78f      	b.n	1a0004d2 <proyectoIface_displayValores+0x16e>
				lcdSendStringRaw(salida_red);
1a0005b2:	a806      	add	r0, sp, #24
1a0005b4:	f003 fbe5 	bl	1a003d82 <lcdSendStringRaw>
1a0005b8:	e7f0      	b.n	1a00059c <proyectoIface_displayValores+0x238>
				lcdSendStringRaw(salida_grupo);
1a0005ba:	a804      	add	r0, sp, #16
1a0005bc:	f003 fbe1 	bl	1a003d82 <lcdSendStringRaw>
1a0005c0:	e7ec      	b.n	1a00059c <proyectoIface_displayValores+0x238>
1a0005c2:	bf00      	nop
1a0005c4:	1a0045d8 	.word	0x1a0045d8
1a0005c8:	1a0045fc 	.word	0x1a0045fc
1a0005cc:	1a004604 	.word	0x1a004604
1a0005d0:	1a004610 	.word	0x1a004610
1a0005d4:	0046464f 	.word	0x0046464f
1a0005d8:	1a004614 	.word	0x1a004614
1a0005dc:	1a00461c 	.word	0x1a00461c
1a0005e0:	1a004624 	.word	0x1a004624
1a0005e4:	00646552 	.word	0x00646552
1a0005e8:	1a004630 	.word	0x1a004630
1a0005ec:	1a004638 	.word	0x1a004638
1a0005f0:	1a004640 	.word	0x1a004640
1a0005f4:	10000058 	.word	0x10000058

1a0005f8 <proyectoIface_guardarTemp>:
void proyectoIface_guardarTemp(const Proyecto* handle){
1a0005f8:	b510      	push	{r4, lr}
	sensorDS18B20.requestTemperatures();
1a0005fa:	4c09      	ldr	r4, [pc, #36]	; (1a000620 <proyectoIface_guardarTemp+0x28>)
1a0005fc:	4620      	mov	r0, r4
1a0005fe:	f000 fa04 	bl	1a000a0a <_ZN17DallasTemperature19requestTemperaturesEv>
	temperatura = sensorDS18B20.getTempCByIndex(0);
1a000602:	2100      	movs	r1, #0
1a000604:	4620      	mov	r0, r4
1a000606:	f000 fa5b 	bl	1a000ac0 <_ZN17DallasTemperature15getTempCByIndexEh>
1a00060a:	ee10 0a10 	vmov	r0, s0
1a00060e:	f003 fd8d 	bl	1a00412c <__aeabi_f2d>
	proyectoIface_set_temperatura(&statechart, temperatura);
1a000612:	ec41 0b10 	vmov	d0, r0, r1
1a000616:	4803      	ldr	r0, [pc, #12]	; (1a000624 <proyectoIface_guardarTemp+0x2c>)
1a000618:	f001 fe01 	bl	1a00221e <proyectoIface_set_temperatura>
}
1a00061c:	bd10      	pop	{r4, pc}
1a00061e:	bf00      	nop
1a000620:	100000d4 	.word	0x100000d4
1a000624:	10000058 	.word	0x10000058

1a000628 <proyecto_setTimer>:
{
1a000628:	b500      	push	{lr}
1a00062a:	b083      	sub	sp, #12
	SetNewTimerTick(ticks, NOF_TIMERS, evid, time_ms, periodic);
1a00062c:	9300      	str	r3, [sp, #0]
1a00062e:	4613      	mov	r3, r2
1a000630:	460a      	mov	r2, r1
1a000632:	2113      	movs	r1, #19
1a000634:	4802      	ldr	r0, [pc, #8]	; (1a000640 <proyecto_setTimer+0x18>)
1a000636:	f001 fe06 	bl	1a002246 <SetNewTimerTick>
}
1a00063a:	b003      	add	sp, #12
1a00063c:	f85d fb04 	ldr.w	pc, [sp], #4
1a000640:	100000f0 	.word	0x100000f0

1a000644 <proyecto_unsetTimer>:
{
1a000644:	b508      	push	{r3, lr}
	UnsetTimerTick( ticks, NOF_TIMERS, evid );
1a000646:	460a      	mov	r2, r1
1a000648:	2113      	movs	r1, #19
1a00064a:	4802      	ldr	r0, [pc, #8]	; (1a000654 <proyecto_unsetTimer+0x10>)
1a00064c:	f001 fe14 	bl	1a002278 <UnsetTimerTick>
}
1a000650:	bd08      	pop	{r3, pc}
1a000652:	bf00      	nop
1a000654:	100000f0 	.word	0x100000f0

1a000658 <_Z18Buttons_GetStatus_v>:
uint32_t Buttons_GetStatus_(void) {
1a000658:	b538      	push	{r3, r4, r5, lr}
	for (idx = 0; idx < 4; ++idx) {
1a00065a:	2400      	movs	r4, #0
	uint8_t ret = false;
1a00065c:	4625      	mov	r5, r4
1a00065e:	e000      	b.n	1a000662 <_Z18Buttons_GetStatus_v+0xa>
	for (idx = 0; idx < 4; ++idx) {
1a000660:	3401      	adds	r4, #1
1a000662:	2c03      	cmp	r4, #3
1a000664:	d80b      	bhi.n	1a00067e <_Z18Buttons_GetStatus_v+0x26>
		if (gpioRead( (gpioMap_t)(TEC1 + idx) ) == 0)
1a000666:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00066a:	b240      	sxtb	r0, r0
1a00066c:	f002 ffd5 	bl	1a00361a <gpioRead>
1a000670:	2800      	cmp	r0, #0
1a000672:	d1f5      	bne.n	1a000660 <_Z18Buttons_GetStatus_v+0x8>
			ret |= 1 << idx;
1a000674:	2301      	movs	r3, #1
1a000676:	40a3      	lsls	r3, r4
1a000678:	431d      	orrs	r5, r3
1a00067a:	b2ed      	uxtb	r5, r5
1a00067c:	e7f0      	b.n	1a000660 <_Z18Buttons_GetStatus_v+0x8>
}
1a00067e:	4628      	mov	r0, r5
1a000680:	bd38      	pop	{r3, r4, r5, pc}

1a000682 <_Z11RED_Status_9gpioMap_t>:
bool_t RED_Status_(gpioMap_t pin){
1a000682:	b508      	push	{r3, lr}
	return gpioRead( pin );
1a000684:	f002 ffc9 	bl	1a00361a <gpioRead>
}
1a000688:	bd08      	pop	{r3, pc}
1a00068a:	Address 0x1a00068a is out of bounds.


1a00068c <main>:
{
1a00068c:	b570      	push	{r4, r5, r6, lr}
	sensorDS18B20.begin();
1a00068e:	4845      	ldr	r0, [pc, #276]	; (1a0007a4 <main+0x118>)
1a000690:	f000 f948 	bl	1a000924 <_ZN17DallasTemperature5beginEv>
	boardConfig();
1a000694:	f003 f8b6 	bl	1a003804 <boardInit>
	gpioConfig( GPIO0, GPIO_INPUT );
1a000698:	2100      	movs	r1, #0
1a00069a:	2020      	movs	r0, #32
1a00069c:	f002 feb2 	bl	1a003404 <gpioInit>
	gpioConfig( GPIO2, GPIO_INPUT );
1a0006a0:	2100      	movs	r1, #0
1a0006a2:	201f      	movs	r0, #31
1a0006a4:	f002 feae 	bl	1a003404 <gpioInit>
	gpioConfig( GPIO1, GPIO_OUTPUT );
1a0006a8:	2101      	movs	r1, #1
1a0006aa:	200f      	movs	r0, #15
1a0006ac:	f002 feaa 	bl	1a003404 <gpioInit>
	gpioConfig( GPIO3, GPIO_OUTPUT );
1a0006b0:	2101      	movs	r1, #1
1a0006b2:	200e      	movs	r0, #14
1a0006b4:	f002 fea6 	bl	1a003404 <gpioInit>
	gpioConfig( GPIO5, GPIO_OUTPUT );
1a0006b8:	2101      	movs	r1, #1
1a0006ba:	200d      	movs	r0, #13
1a0006bc:	f002 fea2 	bl	1a003404 <gpioInit>
	gpioConfig( GPIO7, GPIO_OUTPUT );
1a0006c0:	2101      	movs	r1, #1
1a0006c2:	200c      	movs	r0, #12
1a0006c4:	f002 fe9e 	bl	1a003404 <gpioInit>
	tickConfig( TICKRATE_MS );
1a0006c8:	2001      	movs	r0, #1
1a0006ca:	2100      	movs	r1, #0
1a0006cc:	f003 f838 	bl	1a003740 <tickInit>
	tickCallbackSet( myTickHook, (void*)NULL );
1a0006d0:	2100      	movs	r1, #0
1a0006d2:	4835      	ldr	r0, [pc, #212]	; (1a0007a8 <main+0x11c>)
1a0006d4:	f003 f818 	bl	1a003708 <tickCallbackSet>
	InitTimerTicks( ticks, NOF_TIMERS );
1a0006d8:	2113      	movs	r1, #19
1a0006da:	4834      	ldr	r0, [pc, #208]	; (1a0007ac <main+0x120>)
1a0006dc:	f001 fda2 	bl	1a002224 <InitTimerTicks>
	proyecto_init( &statechart );
1a0006e0:	4c33      	ldr	r4, [pc, #204]	; (1a0007b0 <main+0x124>)
1a0006e2:	4620      	mov	r0, r4
1a0006e4:	f001 fc65 	bl	1a001fb2 <proyecto_init>
	proyecto_enter( &statechart );
1a0006e8:	4620      	mov	r0, r4
1a0006ea:	f001 fc85 	bl	1a001ff8 <proyecto_enter>
	i2cInit( I2C0, 100000 );
1a0006ee:	4931      	ldr	r1, [pc, #196]	; (1a0007b4 <main+0x128>)
1a0006f0:	2000      	movs	r0, #0
1a0006f2:	f002 ffc7 	bl	1a003684 <i2cInit>
	delay( LCD_STARTUP_WAIT_MS );   // Wait for stable power (some LCD need that)
1a0006f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0006fa:	2100      	movs	r1, #0
1a0006fc:	f003 f9e8 	bl	1a003ad0 <delay>
	lcdInit( 16, 2, 5, 8 );
1a000700:	2308      	movs	r3, #8
1a000702:	2205      	movs	r2, #5
1a000704:	2102      	movs	r1, #2
1a000706:	2010      	movs	r0, #16
1a000708:	f003 faae 	bl	1a003c68 <lcdInit>
	lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a00070c:	2000      	movs	r0, #0
1a00070e:	f003 fb2e 	bl	1a003d6e <lcdCursorSet>
	lcdClear();                     // Borrar la pantalla
1a000712:	f003 fb23 	bl	1a003d5c <lcdClear>
1a000716:	e030      	b.n	1a00077a <main+0xee>
					proyecto_raiseTimeEvent( &statechart, ticks[i].evid );
1a000718:	4d24      	ldr	r5, [pc, #144]	; (1a0007ac <main+0x120>)
1a00071a:	0126      	lsls	r6, r4, #4
1a00071c:	59a9      	ldr	r1, [r5, r6]
1a00071e:	4824      	ldr	r0, [pc, #144]	; (1a0007b0 <main+0x124>)
1a000720:	f001 fd4e 	bl	1a0021c0 <proyecto_raiseTimeEvent>
					MarkAsAttEvent( ticks, NOF_TIMERS, ticks[i].evid );
1a000724:	59aa      	ldr	r2, [r5, r6]
1a000726:	2113      	movs	r1, #19
1a000728:	4628      	mov	r0, r5
1a00072a:	f001 fdd6 	bl	1a0022da <MarkAsAttEvent>
			for (i = 0; i < NOF_TIMERS; i++) {
1a00072e:	3401      	adds	r4, #1
1a000730:	2c12      	cmp	r4, #18
1a000732:	d808      	bhi.n	1a000746 <main+0xba>
				if (IsPendEvent( ticks, NOF_TIMERS, ticks[i].evid ) == true) {
1a000734:	481d      	ldr	r0, [pc, #116]	; (1a0007ac <main+0x120>)
1a000736:	0123      	lsls	r3, r4, #4
1a000738:	58c2      	ldr	r2, [r0, r3]
1a00073a:	2113      	movs	r1, #19
1a00073c:	f001 fdb6 	bl	1a0022ac <IsPendEvent>
1a000740:	2800      	cmp	r0, #0
1a000742:	d0f4      	beq.n	1a00072e <main+0xa2>
1a000744:	e7e8      	b.n	1a000718 <main+0x8c>
			BUTTON_Status = Buttons_GetStatus_();
1a000746:	f7ff ff87 	bl	1a000658 <_Z18Buttons_GetStatus_v>
1a00074a:	4604      	mov	r4, r0
			RED_Status = RED_Status_(GPIO0);
1a00074c:	2020      	movs	r0, #32
1a00074e:	f7ff ff98 	bl	1a000682 <_Z11RED_Status_9gpioMap_t>
1a000752:	4605      	mov	r5, r0
			if (BUTTON_Status != 0){
1a000754:	b1f4      	cbz	r4, 1a000794 <main+0x108>
				proyectoIface_raise_evTECXOprimido(&statechart, BUTTON_Status);
1a000756:	4621      	mov	r1, r4
1a000758:	4815      	ldr	r0, [pc, #84]	; (1a0007b0 <main+0x124>)
1a00075a:	f001 fd3d 	bl	1a0021d8 <proyectoIface_raise_evTECXOprimido>
			if (RED_Status == false){
1a00075e:	b9ed      	cbnz	r5, 1a00079c <main+0x110>
				 proyectoIface_raise_inputRedFalse(&statechart);
1a000760:	4813      	ldr	r0, [pc, #76]	; (1a0007b0 <main+0x124>)
1a000762:	f001 fd3d 	bl	1a0021e0 <proyectoIface_raise_inputRedFalse>
			proyectoIface_raise_leerTemp(&statechart);
1a000766:	4c12      	ldr	r4, [pc, #72]	; (1a0007b0 <main+0x124>)
1a000768:	4620      	mov	r0, r4
1a00076a:	f001 fd42 	bl	1a0021f2 <proyectoIface_raise_leerTemp>
			proyectoIface_raise_showDisplay(&statechart);
1a00076e:	4620      	mov	r0, r4
1a000770:	f001 fd3c 	bl	1a0021ec <proyectoIface_raise_showDisplay>
			proyecto_runCycle(&statechart);		// Run Cycle of Statechart
1a000774:	4620      	mov	r0, r4
1a000776:	f001 fc59 	bl	1a00202c <proyecto_runCycle>
		__WFI();
1a00077a:	bf30      	wfi
		if (SysTick_Time_Flag == true) {
1a00077c:	4b0e      	ldr	r3, [pc, #56]	; (1a0007b8 <main+0x12c>)
1a00077e:	781b      	ldrb	r3, [r3, #0]
1a000780:	2b00      	cmp	r3, #0
1a000782:	d0fa      	beq.n	1a00077a <main+0xee>
			SysTick_Time_Flag = false;
1a000784:	2400      	movs	r4, #0
1a000786:	4b0c      	ldr	r3, [pc, #48]	; (1a0007b8 <main+0x12c>)
1a000788:	701c      	strb	r4, [r3, #0]
			UpdateTimers( ticks, NOF_TIMERS );
1a00078a:	2113      	movs	r1, #19
1a00078c:	4807      	ldr	r0, [pc, #28]	; (1a0007ac <main+0x120>)
1a00078e:	f001 fdb6 	bl	1a0022fe <UpdateTimers>
			for (i = 0; i < NOF_TIMERS; i++) {
1a000792:	e7cd      	b.n	1a000730 <main+0xa4>
				proyectoIface_raise_evTECXNoOprimido(&statechart);
1a000794:	4806      	ldr	r0, [pc, #24]	; (1a0007b0 <main+0x124>)
1a000796:	f001 fd1c 	bl	1a0021d2 <proyectoIface_raise_evTECXNoOprimido>
1a00079a:	e7e0      	b.n	1a00075e <main+0xd2>
				proyectoIface_raise_inputRedTrue(&statechart);
1a00079c:	4804      	ldr	r0, [pc, #16]	; (1a0007b0 <main+0x124>)
1a00079e:	f001 fd22 	bl	1a0021e6 <proyectoIface_raise_inputRedTrue>
1a0007a2:	e7e0      	b.n	1a000766 <main+0xda>
1a0007a4:	100000d4 	.word	0x100000d4
1a0007a8:	1a000301 	.word	0x1a000301
1a0007ac:	100000f0 	.word	0x100000f0
1a0007b0:	10000058 	.word	0x10000058
1a0007b4:	000186a0 	.word	0x000186a0
1a0007b8:	10000050 	.word	0x10000050

1a0007bc <_GLOBAL__sub_I_SysTick_Time_Flag>:
}
1a0007bc:	b508      	push	{r3, lr}
1a0007be:	f64f 71ff 	movw	r1, #65535	; 0xffff
1a0007c2:	2001      	movs	r0, #1
1a0007c4:	f7ff fda2 	bl	1a00030c <_Z41__static_initialization_and_destruction_0ii>
1a0007c8:	bd08      	pop	{r3, pc}

1a0007ca <_ZN17DallasTemperature11validFamilyEPKh>:
	setAlarmHandler(NO_ALARM_HANDLER);
#endif
}

bool DallasTemperature::validFamily(const uint8_t* deviceAddress) {
	switch (deviceAddress[0]) {
1a0007ca:	780b      	ldrb	r3, [r1, #0]
1a0007cc:	3b10      	subs	r3, #16
1a0007ce:	2b32      	cmp	r3, #50	; 0x32
1a0007d0:	d81d      	bhi.n	1a00080e <_ZN17DallasTemperature11validFamilyEPKh+0x44>
1a0007d2:	e8df f003 	tbb	[pc, r3]
1a0007d6:	1c1a      	.short	0x1c1a
1a0007d8:	1c1c1c1c 	.word	0x1c1c1c1c
1a0007dc:	1c1c1c1c 	.word	0x1c1c1c1c
1a0007e0:	1c1c1c1c 	.word	0x1c1c1c1c
1a0007e4:	1c1c1c1c 	.word	0x1c1c1c1c
1a0007e8:	1c1c1c1a 	.word	0x1c1c1c1a
1a0007ec:	1c1a1c1c 	.word	0x1c1a1c1c
1a0007f0:	1c1c1c1c 	.word	0x1c1c1c1c
1a0007f4:	1c1c1c1c 	.word	0x1c1c1c1c
1a0007f8:	1c1c1c1c 	.word	0x1c1c1c1c
1a0007fc:	1c1c1c1c 	.word	0x1c1c1c1c
1a000800:	1c1c1a1c 	.word	0x1c1c1a1c
1a000804:	1c1c1c1c 	.word	0x1c1c1c1c
1a000808:	1a          	.byte	0x1a
1a000809:	00          	.byte	0x00
	case DS18S20MODEL:
	case DS18B20MODEL:
	case DS1822MODEL:
	case DS1825MODEL:
	case DS28EA00MODEL:
		return true;
1a00080a:	2001      	movs	r0, #1
1a00080c:	4770      	bx	lr
	default:
		return false;
1a00080e:	2000      	movs	r0, #0
	}
}
1a000810:	4770      	bx	lr

1a000812 <_ZN17DallasTemperature10setOneWireEP7OneWire>:

void DallasTemperature::setOneWire(OneWire* _oneWire) {

	_wire = _oneWire;
1a000812:	6081      	str	r1, [r0, #8]
	devices = 0;
1a000814:	2300      	movs	r3, #0
1a000816:	7103      	strb	r3, [r0, #4]
	ds18Count = 0;
1a000818:	7143      	strb	r3, [r0, #5]
	parasite = false;
1a00081a:	7003      	strb	r3, [r0, #0]
	bitResolution = 9;
1a00081c:	2309      	movs	r3, #9
1a00081e:	7043      	strb	r3, [r0, #1]
	waitForConversion = true;
1a000820:	2301      	movs	r3, #1
1a000822:	7083      	strb	r3, [r0, #2]
	checkForConversion = true;
1a000824:	70c3      	strb	r3, [r0, #3]

}
1a000826:	4770      	bx	lr

1a000828 <_ZN17DallasTemperature12validAddressEPKh>:
uint8_t DallasTemperature::getDS18Count(void) {
	return ds18Count;
}

// returns true if address is valid
bool DallasTemperature::validAddress(const uint8_t* deviceAddress) {
1a000828:	b510      	push	{r4, lr}
1a00082a:	460c      	mov	r4, r1
	return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
1a00082c:	2107      	movs	r1, #7
1a00082e:	4620      	mov	r0, r4
1a000830:	f000 fad6 	bl	1a000de0 <_ZN7OneWire4crc8EPKhh>
1a000834:	79e3      	ldrb	r3, [r4, #7]
}
1a000836:	4298      	cmp	r0, r3
1a000838:	bf14      	ite	ne
1a00083a:	2000      	movne	r0, #0
1a00083c:	2001      	moveq	r0, #1
1a00083e:	bd10      	pop	{r4, pc}

1a000840 <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index) {
1a000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000842:	4606      	mov	r6, r0
1a000844:	460f      	mov	r7, r1
1a000846:	4615      	mov	r5, r2

	uint8_t depth = 0;

	_wire->reset_search();
1a000848:	6880      	ldr	r0, [r0, #8]
1a00084a:	f000 fa2a 	bl	1a000ca2 <_ZN7OneWire12reset_searchEv>
	uint8_t depth = 0;
1a00084e:	2400      	movs	r4, #0
1a000850:	e001      	b.n	1a000856 <_ZN17DallasTemperature10getAddressEPhh+0x16>

	while (depth <= index && _wire->search(deviceAddress)) {
		if (depth == index && validAddress(deviceAddress))
			return true;
		depth++;
1a000852:	3401      	adds	r4, #1
1a000854:	b2e4      	uxtb	r4, r4
	while (depth <= index && _wire->search(deviceAddress)) {
1a000856:	42ac      	cmp	r4, r5
1a000858:	d810      	bhi.n	1a00087c <_ZN17DallasTemperature10getAddressEPhh+0x3c>
1a00085a:	2201      	movs	r2, #1
1a00085c:	4639      	mov	r1, r7
1a00085e:	68b0      	ldr	r0, [r6, #8]
1a000860:	f000 fa39 	bl	1a000cd6 <_ZN7OneWire6searchEPhb>
1a000864:	4603      	mov	r3, r0
1a000866:	b150      	cbz	r0, 1a00087e <_ZN17DallasTemperature10getAddressEPhh+0x3e>
		if (depth == index && validAddress(deviceAddress))
1a000868:	42ac      	cmp	r4, r5
1a00086a:	d1f2      	bne.n	1a000852 <_ZN17DallasTemperature10getAddressEPhh+0x12>
1a00086c:	4639      	mov	r1, r7
1a00086e:	4630      	mov	r0, r6
1a000870:	f7ff ffda 	bl	1a000828 <_ZN17DallasTemperature12validAddressEPKh>
1a000874:	4603      	mov	r3, r0
1a000876:	2800      	cmp	r0, #0
1a000878:	d0eb      	beq.n	1a000852 <_ZN17DallasTemperature10getAddressEPhh+0x12>
1a00087a:	e000      	b.n	1a00087e <_ZN17DallasTemperature10getAddressEPhh+0x3e>
	}

	return false;
1a00087c:	2300      	movs	r3, #0

}
1a00087e:	4618      	mov	r0, r3
1a000880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000882 <_ZN17DallasTemperature14readScratchPadEPKhPh>:
	bool b = readScratchPad(deviceAddress, scratchPad);
	return b && (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

bool DallasTemperature::readScratchPad(const uint8_t* deviceAddress,
		uint8_t* scratchPad) {
1a000882:	b570      	push	{r4, r5, r6, lr}
1a000884:	4605      	mov	r5, r0
1a000886:	460c      	mov	r4, r1
1a000888:	4616      	mov	r6, r2

	// send the reset command and fail fast
	int b = _wire->reset();
1a00088a:	6880      	ldr	r0, [r0, #8]
1a00088c:	f000 f938 	bl	1a000b00 <_ZN7OneWire5resetEv>
	if (b == 0)
1a000890:	b908      	cbnz	r0, 1a000896 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x14>
		return false;
1a000892:	2000      	movs	r0, #0
		scratchPad[i] = _wire->read();
	}

	b = _wire->reset();
	return (b == 1);
}
1a000894:	bd70      	pop	{r4, r5, r6, pc}
	_wire->select(deviceAddress);
1a000896:	4621      	mov	r1, r4
1a000898:	68a8      	ldr	r0, [r5, #8]
1a00089a:	f000 f9e9 	bl	1a000c70 <_ZN7OneWire6selectEPKh>
	_wire->write(READSCRATCH);
1a00089e:	2200      	movs	r2, #0
1a0008a0:	21be      	movs	r1, #190	; 0xbe
1a0008a2:	68a8      	ldr	r0, [r5, #8]
1a0008a4:	f000 f9b5 	bl	1a000c12 <_ZN7OneWire5writeEhh>
	for (uint8_t i = 0; i < 9; i++) {
1a0008a8:	2400      	movs	r4, #0
1a0008aa:	2c08      	cmp	r4, #8
1a0008ac:	d806      	bhi.n	1a0008bc <_ZN17DallasTemperature14readScratchPadEPKhPh+0x3a>
		scratchPad[i] = _wire->read();
1a0008ae:	68a8      	ldr	r0, [r5, #8]
1a0008b0:	f000 f9cd 	bl	1a000c4e <_ZN7OneWire4readEv>
1a0008b4:	5530      	strb	r0, [r6, r4]
	for (uint8_t i = 0; i < 9; i++) {
1a0008b6:	3401      	adds	r4, #1
1a0008b8:	b2e4      	uxtb	r4, r4
1a0008ba:	e7f6      	b.n	1a0008aa <_ZN17DallasTemperature14readScratchPadEPKhPh+0x28>
	b = _wire->reset();
1a0008bc:	68a8      	ldr	r0, [r5, #8]
1a0008be:	f000 f91f 	bl	1a000b00 <_ZN7OneWire5resetEv>
	return (b == 1);
1a0008c2:	2801      	cmp	r0, #1
1a0008c4:	bf14      	ite	ne
1a0008c6:	2000      	movne	r0, #0
1a0008c8:	2001      	moveq	r0, #1
1a0008ca:	e7e3      	b.n	1a000894 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x12>

1a0008cc <_ZN17DallasTemperature11isConnectedEPKhPh>:
		uint8_t* scratchPad) {
1a0008cc:	b538      	push	{r3, r4, r5, lr}
1a0008ce:	4615      	mov	r5, r2
	bool b = readScratchPad(deviceAddress, scratchPad);
1a0008d0:	f7ff ffd7 	bl	1a000882 <_ZN17DallasTemperature14readScratchPadEPKhPh>
	return b && (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
1a0008d4:	4604      	mov	r4, r0
1a0008d6:	b908      	cbnz	r0, 1a0008dc <_ZN17DallasTemperature11isConnectedEPKhPh+0x10>
}
1a0008d8:	4620      	mov	r0, r4
1a0008da:	bd38      	pop	{r3, r4, r5, pc}
	return b && (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
1a0008dc:	2108      	movs	r1, #8
1a0008de:	4628      	mov	r0, r5
1a0008e0:	f000 fa7e 	bl	1a000de0 <_ZN7OneWire4crc8EPKhh>
1a0008e4:	7a2b      	ldrb	r3, [r5, #8]
1a0008e6:	4298      	cmp	r0, r3
1a0008e8:	d0f6      	beq.n	1a0008d8 <_ZN17DallasTemperature11isConnectedEPKhPh+0xc>
1a0008ea:	2400      	movs	r4, #0
1a0008ec:	e7f4      	b.n	1a0008d8 <_ZN17DallasTemperature11isConnectedEPKhPh+0xc>

1a0008ee <_ZN17DallasTemperature15readPowerSupplyEPKh>:
		delay(10); // 10ms delay
	_wire->reset();

}

bool DallasTemperature::readPowerSupply(const uint8_t* deviceAddress) {
1a0008ee:	b538      	push	{r3, r4, r5, lr}
1a0008f0:	4604      	mov	r4, r0
1a0008f2:	460d      	mov	r5, r1

	bool ret = false;
	_wire->reset();
1a0008f4:	6880      	ldr	r0, [r0, #8]
1a0008f6:	f000 f903 	bl	1a000b00 <_ZN7OneWire5resetEv>
	_wire->select(deviceAddress);
1a0008fa:	4629      	mov	r1, r5
1a0008fc:	68a0      	ldr	r0, [r4, #8]
1a0008fe:	f000 f9b7 	bl	1a000c70 <_ZN7OneWire6selectEPKh>
	_wire->write(READPOWERSUPPLY);
1a000902:	2200      	movs	r2, #0
1a000904:	21b4      	movs	r1, #180	; 0xb4
1a000906:	68a0      	ldr	r0, [r4, #8]
1a000908:	f000 f983 	bl	1a000c12 <_ZN7OneWire5writeEhh>
	if (_wire->read_bit() == 0)
1a00090c:	68a0      	ldr	r0, [r4, #8]
1a00090e:	f000 f95f 	bl	1a000bd0 <_ZN7OneWire8read_bitEv>
1a000912:	b128      	cbz	r0, 1a000920 <_ZN17DallasTemperature15readPowerSupplyEPKh+0x32>
	bool ret = false;
1a000914:	2500      	movs	r5, #0
		ret = true;
	_wire->reset();
1a000916:	68a0      	ldr	r0, [r4, #8]
1a000918:	f000 f8f2 	bl	1a000b00 <_ZN7OneWire5resetEv>
	return ret;

}
1a00091c:	4628      	mov	r0, r5
1a00091e:	bd38      	pop	{r3, r4, r5, pc}
		ret = true;
1a000920:	2501      	movs	r5, #1
1a000922:	e7f8      	b.n	1a000916 <_ZN17DallasTemperature15readPowerSupplyEPKh+0x28>

1a000924 <_ZN17DallasTemperature5beginEv>:
void DallasTemperature::begin(void) {
1a000924:	b510      	push	{r4, lr}
1a000926:	b082      	sub	sp, #8
1a000928:	4604      	mov	r4, r0
	_wire->reset_search();
1a00092a:	6880      	ldr	r0, [r0, #8]
1a00092c:	f000 f9b9 	bl	1a000ca2 <_ZN7OneWire12reset_searchEv>
	devices = 0; // Reset the number of devices when we enumerate wire devices
1a000930:	2300      	movs	r3, #0
1a000932:	7123      	strb	r3, [r4, #4]
	ds18Count = 0; // Reset number of DS18xxx Family devices
1a000934:	7163      	strb	r3, [r4, #5]
	while (_wire->search(deviceAddress)) {
1a000936:	2201      	movs	r2, #1
1a000938:	4669      	mov	r1, sp
1a00093a:	68a0      	ldr	r0, [r4, #8]
1a00093c:	f000 f9cb 	bl	1a000cd6 <_ZN7OneWire6searchEPhb>
1a000940:	b1f8      	cbz	r0, 1a000982 <_ZN17DallasTemperature5beginEv+0x5e>
		if (validAddress(deviceAddress)) {
1a000942:	4669      	mov	r1, sp
1a000944:	4620      	mov	r0, r4
1a000946:	f7ff ff6f 	bl	1a000828 <_ZN17DallasTemperature12validAddressEPKh>
1a00094a:	2800      	cmp	r0, #0
1a00094c:	d0f3      	beq.n	1a000936 <_ZN17DallasTemperature5beginEv+0x12>
			if (!parasite && readPowerSupply(deviceAddress))
1a00094e:	7823      	ldrb	r3, [r4, #0]
1a000950:	b173      	cbz	r3, 1a000970 <_ZN17DallasTemperature5beginEv+0x4c>
			bitResolution = 9; //@Eric
1a000952:	2309      	movs	r3, #9
1a000954:	7063      	strb	r3, [r4, #1]
			devices++;
1a000956:	7923      	ldrb	r3, [r4, #4]
1a000958:	3301      	adds	r3, #1
1a00095a:	7123      	strb	r3, [r4, #4]
			if (validFamily(deviceAddress)) {
1a00095c:	4669      	mov	r1, sp
1a00095e:	4620      	mov	r0, r4
1a000960:	f7ff ff33 	bl	1a0007ca <_ZN17DallasTemperature11validFamilyEPKh>
1a000964:	2800      	cmp	r0, #0
1a000966:	d0e6      	beq.n	1a000936 <_ZN17DallasTemperature5beginEv+0x12>
				ds18Count++;
1a000968:	7963      	ldrb	r3, [r4, #5]
1a00096a:	3301      	adds	r3, #1
1a00096c:	7163      	strb	r3, [r4, #5]
1a00096e:	e7e2      	b.n	1a000936 <_ZN17DallasTemperature5beginEv+0x12>
			if (!parasite && readPowerSupply(deviceAddress))
1a000970:	4669      	mov	r1, sp
1a000972:	4620      	mov	r0, r4
1a000974:	f7ff ffbb 	bl	1a0008ee <_ZN17DallasTemperature15readPowerSupplyEPKh>
1a000978:	2800      	cmp	r0, #0
1a00097a:	d0ea      	beq.n	1a000952 <_ZN17DallasTemperature5beginEv+0x2e>
				parasite = true;
1a00097c:	2301      	movs	r3, #1
1a00097e:	7023      	strb	r3, [r4, #0]
1a000980:	e7e7      	b.n	1a000952 <_ZN17DallasTemperature5beginEv+0x2e>
}
1a000982:	b002      	add	sp, #8
1a000984:	bd10      	pop	{r4, pc}

1a000986 <_ZN17DallasTemperature20isConversionCompleteEv>:
// gets the value of the waitForConversion flag
bool DallasTemperature::getCheckForConversion() {
	return checkForConversion;
}

bool DallasTemperature::isConversionComplete() {
1a000986:	b508      	push	{r3, lr}
	uint8_t b = _wire->read_bit();
1a000988:	6880      	ldr	r0, [r0, #8]
1a00098a:	f000 f921 	bl	1a000bd0 <_ZN7OneWire8read_bitEv>
	return (b == 1);
}
1a00098e:	2801      	cmp	r0, #1
1a000990:	bf14      	ite	ne
1a000992:	2000      	movne	r0, #0
1a000994:	2001      	moveq	r0, #1
1a000996:	bd08      	pop	{r3, pc}

1a000998 <_ZN17DallasTemperature25millisToWaitForConversionEh>:
}

// returns number of milliseconds to wait till conversion is complete (based on IC datasheet)
int16_t DallasTemperature::millisToWaitForConversion(uint8_t bitResolution) {

	switch (bitResolution) {
1a000998:	290a      	cmp	r1, #10
1a00099a:	d006      	beq.n	1a0009aa <_ZN17DallasTemperature25millisToWaitForConversionEh+0x12>
1a00099c:	290b      	cmp	r1, #11
1a00099e:	d006      	beq.n	1a0009ae <_ZN17DallasTemperature25millisToWaitForConversionEh+0x16>
1a0009a0:	2909      	cmp	r1, #9
1a0009a2:	d007      	beq.n	1a0009b4 <_ZN17DallasTemperature25millisToWaitForConversionEh+0x1c>
	case 10:
		return 188;
	case 11:
		return 375;
	default:
		return 750;
1a0009a4:	f240 20ee 	movw	r0, #750	; 0x2ee
1a0009a8:	4770      	bx	lr
		return 188;
1a0009aa:	20bc      	movs	r0, #188	; 0xbc
1a0009ac:	4770      	bx	lr
		return 375;
1a0009ae:	f240 1077 	movw	r0, #375	; 0x177
1a0009b2:	4770      	bx	lr
		return 94;
1a0009b4:	205e      	movs	r0, #94	; 0x5e
	}

}
1a0009b6:	4770      	bx	lr

1a0009b8 <_ZN17DallasTemperature27blockTillConversionCompleteEh>:
void DallasTemperature::blockTillConversionComplete(uint8_t bitResolution) {
1a0009b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0009bc:	4680      	mov	r8, r0
	int delms = millisToWaitForConversion(bitResolution);
1a0009be:	f7ff ffeb 	bl	1a000998 <_ZN17DallasTemperature25millisToWaitForConversionEh>
1a0009c2:	4681      	mov	r9, r0
	if (checkForConversion && !parasite) {
1a0009c4:	f898 3003 	ldrb.w	r3, [r8, #3]
1a0009c8:	b113      	cbz	r3, 1a0009d0 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x18>
1a0009ca:	f898 3000 	ldrb.w	r3, [r8]
1a0009ce:	b133      	cbz	r3, 1a0009de <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x26>
		delay(delms);
1a0009d0:	fa0f f089 	sxth.w	r0, r9
1a0009d4:	17c1      	asrs	r1, r0, #31
1a0009d6:	f003 f87b 	bl	1a003ad0 <delay>
}
1a0009da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		unsigned long now = millis();
1a0009de:	f002 fe8d 	bl	1a0036fc <tickRead>
1a0009e2:	4682      	mov	sl, r0
		while (!isConversionComplete() && (millis() - delms < now))
1a0009e4:	4640      	mov	r0, r8
1a0009e6:	f7ff ffce 	bl	1a000986 <_ZN17DallasTemperature20isConversionCompleteEv>
1a0009ea:	2800      	cmp	r0, #0
1a0009ec:	d1f5      	bne.n	1a0009da <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x22>
1a0009ee:	f002 fe85 	bl	1a0036fc <tickRead>
1a0009f2:	fa0f f289 	sxth.w	r2, r9
1a0009f6:	17d3      	asrs	r3, r2, #31
1a0009f8:	1a84      	subs	r4, r0, r2
1a0009fa:	eb61 0503 	sbc.w	r5, r1, r3
1a0009fe:	2700      	movs	r7, #0
1a000a00:	42bd      	cmp	r5, r7
1a000a02:	bf08      	it	eq
1a000a04:	4554      	cmpeq	r4, sl
1a000a06:	d3ed      	bcc.n	1a0009e4 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x2c>
1a000a08:	e7e7      	b.n	1a0009da <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x22>

1a000a0a <_ZN17DallasTemperature19requestTemperaturesEv>:
void DallasTemperature::requestTemperatures() {
1a000a0a:	b510      	push	{r4, lr}
1a000a0c:	4604      	mov	r4, r0
	_wire->reset();
1a000a0e:	6880      	ldr	r0, [r0, #8]
1a000a10:	f000 f876 	bl	1a000b00 <_ZN7OneWire5resetEv>
	_wire->skip();
1a000a14:	68a0      	ldr	r0, [r4, #8]
1a000a16:	f000 f93e 	bl	1a000c96 <_ZN7OneWire4skipEv>
	_wire->write(STARTCONVO, parasite);
1a000a1a:	7822      	ldrb	r2, [r4, #0]
1a000a1c:	2144      	movs	r1, #68	; 0x44
1a000a1e:	68a0      	ldr	r0, [r4, #8]
1a000a20:	f000 f8f7 	bl	1a000c12 <_ZN7OneWire5writeEhh>
	if (!waitForConversion)
1a000a24:	78a3      	ldrb	r3, [r4, #2]
1a000a26:	b903      	cbnz	r3, 1a000a2a <_ZN17DallasTemperature19requestTemperaturesEv+0x20>
}
1a000a28:	bd10      	pop	{r4, pc}
	blockTillConversionComplete(bitResolution);
1a000a2a:	7861      	ldrb	r1, [r4, #1]
1a000a2c:	4620      	mov	r0, r4
1a000a2e:	f7ff ffc3 	bl	1a0009b8 <_ZN17DallasTemperature27blockTillConversionCompleteEh>
1a000a32:	e7f9      	b.n	1a000a28 <_ZN17DallasTemperature19requestTemperaturesEv+0x1e>

1a000a34 <_ZN17DallasTemperature20calculateTemperatureEPKhPh>:

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DallasTemperature::calculateTemperature(const uint8_t* deviceAddress,
		uint8_t* scratchPad) {

	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11)
1a000a34:	7850      	ldrb	r0, [r2, #1]
1a000a36:	02c0      	lsls	r0, r0, #11
			| (((int16_t) scratchPad[TEMP_LSB]) << 3);
1a000a38:	b200      	sxth	r0, r0
1a000a3a:	7813      	ldrb	r3, [r2, #0]
	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11)
1a000a3c:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL) {
1a000a40:	780b      	ldrb	r3, [r1, #0]
1a000a42:	2b10      	cmp	r3, #16
1a000a44:	d000      	beq.n	1a000a48 <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x14>
				+ (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7)
						/ scratchPad[COUNT_PER_C]);
	}

	return fpTemperature;
}
1a000a46:	4770      	bx	lr
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16
1a000a48:	00c0      	lsls	r0, r0, #3
1a000a4a:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
1a000a4e:	b280      	uxth	r0, r0
				+ (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7)
1a000a50:	79d1      	ldrb	r1, [r2, #7]
1a000a52:	7993      	ldrb	r3, [r2, #6]
1a000a54:	1acb      	subs	r3, r1, r3
1a000a56:	01db      	lsls	r3, r3, #7
						/ scratchPad[COUNT_PER_C]);
1a000a58:	fb93 f3f1 	sdiv	r3, r3, r1
				+ (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7)
1a000a5c:	4418      	add	r0, r3
1a000a5e:	3810      	subs	r0, #16
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16
1a000a60:	b200      	sxth	r0, r0
1a000a62:	e7f0      	b.n	1a000a46 <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x12>

1a000a64 <_ZN17DallasTemperature7getTempEPKh>:
// returns temperature in 1/128 degrees C or DEVICE_DISCONNECTED_RAW if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DallasTemperature::getTemp(const uint8_t* deviceAddress) {
1a000a64:	b530      	push	{r4, r5, lr}
1a000a66:	b085      	sub	sp, #20
1a000a68:	4604      	mov	r4, r0
1a000a6a:	460d      	mov	r5, r1

	ScratchPad scratchPad;
	if (isConnected(deviceAddress, scratchPad))
1a000a6c:	aa01      	add	r2, sp, #4
1a000a6e:	f7ff ff2d 	bl	1a0008cc <_ZN17DallasTemperature11isConnectedEPKhPh>
1a000a72:	b130      	cbz	r0, 1a000a82 <_ZN17DallasTemperature7getTempEPKh+0x1e>
		return calculateTemperature(deviceAddress, scratchPad);
1a000a74:	aa01      	add	r2, sp, #4
1a000a76:	4629      	mov	r1, r5
1a000a78:	4620      	mov	r0, r4
1a000a7a:	f7ff ffdb 	bl	1a000a34 <_ZN17DallasTemperature20calculateTemperatureEPKhPh>
	return DEVICE_DISCONNECTED_RAW;

}
1a000a7e:	b005      	add	sp, #20
1a000a80:	bd30      	pop	{r4, r5, pc}
	return DEVICE_DISCONNECTED_RAW;
1a000a82:	4801      	ldr	r0, [pc, #4]	; (1a000a88 <_ZN17DallasTemperature7getTempEPKh+0x24>)
1a000a84:	e7fb      	b.n	1a000a7e <_ZN17DallasTemperature7getTempEPKh+0x1a>
1a000a86:	bf00      	nop
1a000a88:	ffffe480 	.word	0xffffe480

1a000a8c <_ZN17DallasTemperature12rawToCelsiusEs>:
}

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw) {

	if (raw <= DEVICE_DISCONNECTED_RAW)
1a000a8c:	f510 5fdc 	cmn.w	r0, #7040	; 0x1b80
1a000a90:	dd08      	ble.n	1a000aa4 <_ZN17DallasTemperature12rawToCelsiusEs+0x18>
		return DEVICE_DISCONNECTED_C;
	// C = RAW/128
	return (float) raw * 0.0078125;
1a000a92:	ee07 0a90 	vmov	s15, r0
1a000a96:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
1a000a9a:	eddf 7a04 	vldr	s15, [pc, #16]	; 1a000aac <_ZN17DallasTemperature12rawToCelsiusEs+0x20>
1a000a9e:	ee20 0a27 	vmul.f32	s0, s0, s15
1a000aa2:	4770      	bx	lr
		return DEVICE_DISCONNECTED_C;
1a000aa4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 1a000ab0 <_ZN17DallasTemperature12rawToCelsiusEs+0x24>

}
1a000aa8:	4770      	bx	lr
1a000aaa:	bf00      	nop
1a000aac:	3c000000 	.word	0x3c000000
1a000ab0:	c2fe0000 	.word	0xc2fe0000

1a000ab4 <_ZN17DallasTemperature8getTempCEPKh>:
float DallasTemperature::getTempC(const uint8_t* deviceAddress) {
1a000ab4:	b508      	push	{r3, lr}
	return rawToCelsius(getTemp(deviceAddress));
1a000ab6:	f7ff ffd5 	bl	1a000a64 <_ZN17DallasTemperature7getTempEPKh>
1a000aba:	f7ff ffe7 	bl	1a000a8c <_ZN17DallasTemperature12rawToCelsiusEs>
}
1a000abe:	bd08      	pop	{r3, pc}

1a000ac0 <_ZN17DallasTemperature15getTempCByIndexEh>:
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex) {
1a000ac0:	b510      	push	{r4, lr}
1a000ac2:	b082      	sub	sp, #8
1a000ac4:	4604      	mov	r4, r0
	if (!getAddress(deviceAddress, deviceIndex)) {
1a000ac6:	460a      	mov	r2, r1
1a000ac8:	4669      	mov	r1, sp
1a000aca:	f7ff feb9 	bl	1a000840 <_ZN17DallasTemperature10getAddressEPhh>
1a000ace:	b918      	cbnz	r0, 1a000ad8 <_ZN17DallasTemperature15getTempCByIndexEh+0x18>
		return DEVICE_DISCONNECTED_C;
1a000ad0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 1a000ae4 <_ZN17DallasTemperature15getTempCByIndexEh+0x24>
}
1a000ad4:	b002      	add	sp, #8
1a000ad6:	bd10      	pop	{r4, pc}
	return getTempC((uint8_t*) deviceAddress);
1a000ad8:	4669      	mov	r1, sp
1a000ada:	4620      	mov	r0, r4
1a000adc:	f7ff ffea 	bl	1a000ab4 <_ZN17DallasTemperature8getTempCEPKh>
1a000ae0:	e7f8      	b.n	1a000ad4 <_ZN17DallasTemperature15getTempCByIndexEh+0x14>
1a000ae2:	bf00      	nop
1a000ae4:	c2fe0000 	.word	0xc2fe0000

1a000ae8 <_ZN17DallasTemperature15setAlarmHandlerEPFvPKhE>:
	}
}

// sets the alarm handler
void DallasTemperature::setAlarmHandler(const AlarmHandler *handler) {
	_AlarmHandler = handler;
1a000ae8:	6181      	str	r1, [r0, #24]
}
1a000aea:	4770      	bx	lr

1a000aec <_ZN17DallasTemperatureC1EP7OneWire>:
DallasTemperature::DallasTemperature(OneWire* _oneWire)
1a000aec:	b510      	push	{r4, lr}
1a000aee:	4604      	mov	r4, r0
	setOneWire(_oneWire);
1a000af0:	f7ff fe8f 	bl	1a000812 <_ZN17DallasTemperature10setOneWireEP7OneWire>
	setAlarmHandler(NO_ALARM_HANDLER);
1a000af4:	2100      	movs	r1, #0
1a000af6:	4620      	mov	r0, r4
1a000af8:	f7ff fff6 	bl	1a000ae8 <_ZN17DallasTemperature15setAlarmHandlerEPFvPKhE>
}
1a000afc:	4620      	mov	r0, r4
1a000afe:	bd10      	pop	{r4, pc}

1a000b00 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
1a000b00:	b538      	push	{r3, r4, r5, lr}
	//volatile IO_REG_TYPE *reg IO_REG_BASE_ATTR = baseReg; // @Eric
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
1a000b02:	f990 5000 	ldrsb.w	r5, [r0]
1a000b06:	2100      	movs	r1, #0
1a000b08:	4628      	mov	r0, r5
1a000b0a:	f002 fc7b 	bl	1a003404 <gpioInit>
	uint8_t retries = 125;
1a000b0e:	247d      	movs	r4, #125	; 0x7d
	interrupts();
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
1a000b10:	1e60      	subs	r0, r4, #1
1a000b12:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
1a000b16:	d028      	beq.n	1a000b6a <_ZN7OneWire5resetEv+0x6a>
		delayMicroseconds(2);
1a000b18:	2002      	movs	r0, #2
1a000b1a:	2100      	movs	r1, #0
1a000b1c:	f002 ffa9 	bl	1a003a72 <delayInaccurateUs>
	} while ( !DIRECT_READ(reg, mask));
1a000b20:	4628      	mov	r0, r5
1a000b22:	f002 fd7a 	bl	1a00361a <gpioRead>
1a000b26:	2800      	cmp	r0, #0
1a000b28:	d0f2      	beq.n	1a000b10 <_ZN7OneWire5resetEv+0x10>

	noInterrupts();
	DIRECT_WRITE_LOW(reg, mask);
1a000b2a:	2100      	movs	r1, #0
1a000b2c:	4628      	mov	r0, r5
1a000b2e:	f002 fd3f 	bl	1a0035b0 <gpioWrite>
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
1a000b32:	2101      	movs	r1, #1
1a000b34:	4628      	mov	r0, r5
1a000b36:	f002 fc65 	bl	1a003404 <gpioInit>
	interrupts();
	delayMicroseconds(480);
1a000b3a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
1a000b3e:	2100      	movs	r1, #0
1a000b40:	f002 ff97 	bl	1a003a72 <delayInaccurateUs>
	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
1a000b44:	2100      	movs	r1, #0
1a000b46:	4628      	mov	r0, r5
1a000b48:	f002 fc5c 	bl	1a003404 <gpioInit>
	delayMicroseconds(70);
1a000b4c:	2046      	movs	r0, #70	; 0x46
1a000b4e:	2100      	movs	r1, #0
1a000b50:	f002 ff8f 	bl	1a003a72 <delayInaccurateUs>
	r = !DIRECT_READ(reg, mask);
1a000b54:	4628      	mov	r0, r5
1a000b56:	f002 fd60 	bl	1a00361a <gpioRead>
1a000b5a:	fab0 f480 	clz	r4, r0
1a000b5e:	0964      	lsrs	r4, r4, #5
	interrupts();
	delayMicroseconds(410);
1a000b60:	f44f 70cd 	mov.w	r0, #410	; 0x19a
1a000b64:	2100      	movs	r1, #0
1a000b66:	f002 ff84 	bl	1a003a72 <delayInaccurateUs>
	return r;
}
1a000b6a:	4620      	mov	r0, r4
1a000b6c:	bd38      	pop	{r3, r4, r5, pc}

1a000b6e <_ZN7OneWire9write_bitEh>:
//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
{
1a000b6e:	b510      	push	{r4, lr}
	IO_REG_TYPE mask IO_REG_MASK_ATTR = bitmask;
1a000b70:	6804      	ldr	r4, [r0, #0]
	// volatile IO_REG_TYPE *reg IO_REG_BASE_ATTR = baseReg; // @Eric

	if (v & 1) {
1a000b72:	f011 0f01 	tst.w	r1, #1
1a000b76:	d015      	beq.n	1a000ba4 <_ZN7OneWire9write_bitEh+0x36>
		noInterrupts();
		DIRECT_WRITE_LOW(reg, mask);
1a000b78:	b264      	sxtb	r4, r4
1a000b7a:	2100      	movs	r1, #0
1a000b7c:	4620      	mov	r0, r4
1a000b7e:	f002 fd17 	bl	1a0035b0 <gpioWrite>
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
1a000b82:	2101      	movs	r1, #1
1a000b84:	4620      	mov	r0, r4
1a000b86:	f002 fc3d 	bl	1a003404 <gpioInit>
		delayMicroseconds(10);
1a000b8a:	200a      	movs	r0, #10
1a000b8c:	2100      	movs	r1, #0
1a000b8e:	f002 ff70 	bl	1a003a72 <delayInaccurateUs>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
1a000b92:	2101      	movs	r1, #1
1a000b94:	4620      	mov	r0, r4
1a000b96:	f002 fd0b 	bl	1a0035b0 <gpioWrite>
		interrupts();
		delayMicroseconds(55);
1a000b9a:	2037      	movs	r0, #55	; 0x37
1a000b9c:	2100      	movs	r1, #0
1a000b9e:	f002 ff68 	bl	1a003a72 <delayInaccurateUs>
		delayMicroseconds(65);
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
		interrupts();
		delayMicroseconds(5);
	}
}
1a000ba2:	bd10      	pop	{r4, pc}
		DIRECT_WRITE_LOW(reg, mask);
1a000ba4:	b264      	sxtb	r4, r4
1a000ba6:	2100      	movs	r1, #0
1a000ba8:	4620      	mov	r0, r4
1a000baa:	f002 fd01 	bl	1a0035b0 <gpioWrite>
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
1a000bae:	2101      	movs	r1, #1
1a000bb0:	4620      	mov	r0, r4
1a000bb2:	f002 fc27 	bl	1a003404 <gpioInit>
		delayMicroseconds(65);
1a000bb6:	2041      	movs	r0, #65	; 0x41
1a000bb8:	2100      	movs	r1, #0
1a000bba:	f002 ff5a 	bl	1a003a72 <delayInaccurateUs>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
1a000bbe:	2101      	movs	r1, #1
1a000bc0:	4620      	mov	r0, r4
1a000bc2:	f002 fcf5 	bl	1a0035b0 <gpioWrite>
		delayMicroseconds(5);
1a000bc6:	2005      	movs	r0, #5
1a000bc8:	2100      	movs	r1, #0
1a000bca:	f002 ff52 	bl	1a003a72 <delayInaccurateUs>
}
1a000bce:	e7e8      	b.n	1a000ba2 <_ZN7OneWire9write_bitEh+0x34>

1a000bd0 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
1a000bd0:	b510      	push	{r4, lr}
	IO_REG_TYPE mask IO_REG_MASK_ATTR = bitmask;
	//volatile IO_REG_TYPE *reg IO_REG_BASE_ATTR = baseReg; // @Eric
	uint8_t r;

	noInterrupts();
	DIRECT_MODE_OUTPUT(reg, mask);
1a000bd2:	f990 4000 	ldrsb.w	r4, [r0]
1a000bd6:	2101      	movs	r1, #1
1a000bd8:	4620      	mov	r0, r4
1a000bda:	f002 fc13 	bl	1a003404 <gpioInit>
	DIRECT_WRITE_LOW(reg, mask);
1a000bde:	2100      	movs	r1, #0
1a000be0:	4620      	mov	r0, r4
1a000be2:	f002 fce5 	bl	1a0035b0 <gpioWrite>
	delayMicroseconds(3);
1a000be6:	2003      	movs	r0, #3
1a000be8:	2100      	movs	r1, #0
1a000bea:	f002 ff42 	bl	1a003a72 <delayInaccurateUs>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
1a000bee:	2100      	movs	r1, #0
1a000bf0:	4620      	mov	r0, r4
1a000bf2:	f002 fc07 	bl	1a003404 <gpioInit>
	delayMicroseconds(10);
1a000bf6:	200a      	movs	r0, #10
1a000bf8:	2100      	movs	r1, #0
1a000bfa:	f002 ff3a 	bl	1a003a72 <delayInaccurateUs>
	r = DIRECT_READ(reg, mask);
1a000bfe:	4620      	mov	r0, r4
1a000c00:	f002 fd0b 	bl	1a00361a <gpioRead>
1a000c04:	4604      	mov	r4, r0
	interrupts();
	delayMicroseconds(53);
1a000c06:	2035      	movs	r0, #53	; 0x35
1a000c08:	2100      	movs	r1, #0
1a000c0a:	f002 ff32 	bl	1a003a72 <delayInaccurateUs>
	return r;
}
1a000c0e:	4620      	mov	r0, r4
1a000c10:	bd10      	pop	{r4, pc}

1a000c12 <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
1a000c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000c14:	4605      	mov	r5, r0
1a000c16:	460e      	mov	r6, r1
1a000c18:	4617      	mov	r7, r2
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
1a000c1a:	2401      	movs	r4, #1
1a000c1c:	e005      	b.n	1a000c2a <_ZN7OneWire5writeEhh+0x18>
	OneWire::write_bit( (bitMask & v)?1:0);
1a000c1e:	2100      	movs	r1, #0
1a000c20:	4628      	mov	r0, r5
1a000c22:	f7ff ffa4 	bl	1a000b6e <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
1a000c26:	0064      	lsls	r4, r4, #1
1a000c28:	b2e4      	uxtb	r4, r4
1a000c2a:	b11c      	cbz	r4, 1a000c34 <_ZN7OneWire5writeEhh+0x22>
	OneWire::write_bit( (bitMask & v)?1:0);
1a000c2c:	4234      	tst	r4, r6
1a000c2e:	d0f6      	beq.n	1a000c1e <_ZN7OneWire5writeEhh+0xc>
1a000c30:	2101      	movs	r1, #1
1a000c32:	e7f5      	b.n	1a000c20 <_ZN7OneWire5writeEhh+0xe>
    }
    if ( !power) {
1a000c34:	b107      	cbz	r7, 1a000c38 <_ZN7OneWire5writeEhh+0x26>
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	DIRECT_WRITE_LOW(baseReg, bitmask);
	interrupts();
    }
}
1a000c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	DIRECT_MODE_INPUT(baseReg, bitmask);
1a000c38:	2100      	movs	r1, #0
1a000c3a:	f995 0000 	ldrsb.w	r0, [r5]
1a000c3e:	f002 fbe1 	bl	1a003404 <gpioInit>
	DIRECT_WRITE_LOW(baseReg, bitmask);
1a000c42:	2100      	movs	r1, #0
1a000c44:	f995 0000 	ldrsb.w	r0, [r5]
1a000c48:	f002 fcb2 	bl	1a0035b0 <gpioWrite>
}
1a000c4c:	e7f3      	b.n	1a000c36 <_ZN7OneWire5writeEhh+0x24>

1a000c4e <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
1a000c4e:	b570      	push	{r4, r5, r6, lr}
1a000c50:	4606      	mov	r6, r0
    uint8_t bitMask;
    uint8_t r = 0;
1a000c52:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
1a000c54:	2401      	movs	r4, #1
1a000c56:	e001      	b.n	1a000c5c <_ZN7OneWire4readEv+0xe>
1a000c58:	0064      	lsls	r4, r4, #1
1a000c5a:	b2e4      	uxtb	r4, r4
1a000c5c:	b134      	cbz	r4, 1a000c6c <_ZN7OneWire4readEv+0x1e>
	if ( OneWire::read_bit()) r |= bitMask;
1a000c5e:	4630      	mov	r0, r6
1a000c60:	f7ff ffb6 	bl	1a000bd0 <_ZN7OneWire8read_bitEv>
1a000c64:	2800      	cmp	r0, #0
1a000c66:	d0f7      	beq.n	1a000c58 <_ZN7OneWire4readEv+0xa>
1a000c68:	4325      	orrs	r5, r4
1a000c6a:	e7f5      	b.n	1a000c58 <_ZN7OneWire4readEv+0xa>
    }
    return r;
}
1a000c6c:	4628      	mov	r0, r5
1a000c6e:	bd70      	pop	{r4, r5, r6, pc}

1a000c70 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
1a000c70:	b570      	push	{r4, r5, r6, lr}
1a000c72:	4606      	mov	r6, r0
1a000c74:	460d      	mov	r5, r1
    uint8_t i;

    write(0x55);           // Choose ROM
1a000c76:	2200      	movs	r2, #0
1a000c78:	2155      	movs	r1, #85	; 0x55
1a000c7a:	f7ff ffca 	bl	1a000c12 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++) write(rom[i]);
1a000c7e:	2400      	movs	r4, #0
1a000c80:	e006      	b.n	1a000c90 <_ZN7OneWire6selectEPKh+0x20>
1a000c82:	2200      	movs	r2, #0
1a000c84:	5d29      	ldrb	r1, [r5, r4]
1a000c86:	4630      	mov	r0, r6
1a000c88:	f7ff ffc3 	bl	1a000c12 <_ZN7OneWire5writeEhh>
1a000c8c:	3401      	adds	r4, #1
1a000c8e:	b2e4      	uxtb	r4, r4
1a000c90:	2c07      	cmp	r4, #7
1a000c92:	d9f6      	bls.n	1a000c82 <_ZN7OneWire6selectEPKh+0x12>
}
1a000c94:	bd70      	pop	{r4, r5, r6, pc}

1a000c96 <_ZN7OneWire4skipEv>:

//
// Do a ROM skip
//
void OneWire::skip()
{
1a000c96:	b508      	push	{r3, lr}
    write(0xCC);           // Skip ROM
1a000c98:	2200      	movs	r2, #0
1a000c9a:	21cc      	movs	r1, #204	; 0xcc
1a000c9c:	f7ff ffb9 	bl	1a000c12 <_ZN7OneWire5writeEhh>
}
1a000ca0:	bd08      	pop	{r3, pc}

1a000ca2 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
  // reset the search state
  LastDiscrepancy = 0;
1a000ca2:	2300      	movs	r3, #0
1a000ca4:	7403      	strb	r3, [r0, #16]
  LastDeviceFlag = false;
1a000ca6:	7483      	strb	r3, [r0, #18]
  LastFamilyDiscrepancy = 0;
1a000ca8:	7443      	strb	r3, [r0, #17]
  for(int i = 7; ; i--) {
1a000caa:	2207      	movs	r2, #7
    ROM_NO[i] = 0;
1a000cac:	1883      	adds	r3, r0, r2
1a000cae:	2100      	movs	r1, #0
1a000cb0:	7219      	strb	r1, [r3, #8]
    if ( i == 0) break;
1a000cb2:	b10a      	cbz	r2, 1a000cb8 <_ZN7OneWire12reset_searchEv+0x16>
  for(int i = 7; ; i--) {
1a000cb4:	3a01      	subs	r2, #1
    ROM_NO[i] = 0;
1a000cb6:	e7f9      	b.n	1a000cac <_ZN7OneWire12reset_searchEv+0xa>
  }
}
1a000cb8:	4770      	bx	lr

1a000cba <_ZN7OneWire5beginEh>:
{
1a000cba:	b538      	push	{r3, r4, r5, lr}
1a000cbc:	4604      	mov	r4, r0
1a000cbe:	460d      	mov	r5, r1
	DIRECT_MODE_INPUT(base, pin); // @Eric decia: pinMode(pin, INPUT);
1a000cc0:	2100      	movs	r1, #0
1a000cc2:	b268      	sxtb	r0, r5
1a000cc4:	f002 fb9e 	bl	1a003404 <gpioInit>
	bitmask = PIN_TO_BITMASK(pin);
1a000cc8:	6025      	str	r5, [r4, #0]
	baseReg = PIN_TO_BASEREG(pin);
1a000cca:	2300      	movs	r3, #0
1a000ccc:	6063      	str	r3, [r4, #4]
	reset_search();
1a000cce:	4620      	mov	r0, r4
1a000cd0:	f7ff ffe7 	bl	1a000ca2 <_ZN7OneWire12reset_searchEv>
}
1a000cd4:	bd38      	pop	{r3, r4, r5, pc}

1a000cd6 <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
1a000cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000cda:	4605      	mov	r5, r0
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = false;

   // if the last call was not the last one
   if (!LastDeviceFlag) {
1a000cdc:	7c84      	ldrb	r4, [r0, #18]
1a000cde:	b13c      	cbz	r4, 1a000cf0 <_ZN7OneWire6searchEPhb+0x1a>
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
      LastDiscrepancy = 0;
1a000ce0:	2000      	movs	r0, #0
1a000ce2:	7428      	strb	r0, [r5, #16]
      LastDeviceFlag = false;
1a000ce4:	74a8      	strb	r0, [r5, #18]
      LastFamilyDiscrepancy = 0;
1a000ce6:	7468      	strb	r0, [r5, #17]
      search_result = false;
1a000ce8:	4604      	mov	r4, r0
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   }
   return search_result;
  }
1a000cea:	4620      	mov	r0, r4
1a000cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000cf0:	4689      	mov	r9, r1
1a000cf2:	4616      	mov	r6, r2
      if (!reset()) {
1a000cf4:	f7ff ff04 	bl	1a000b00 <_ZN7OneWire5resetEv>
1a000cf8:	b158      	cbz	r0, 1a000d12 <_ZN7OneWire6searchEPhb+0x3c>
      if (search_mode == true) {
1a000cfa:	b17e      	cbz	r6, 1a000d1c <_ZN7OneWire6searchEPhb+0x46>
        write(0xF0);   // NORMAL SEARCH
1a000cfc:	2200      	movs	r2, #0
1a000cfe:	21f0      	movs	r1, #240	; 0xf0
1a000d00:	4628      	mov	r0, r5
1a000d02:	f7ff ff86 	bl	1a000c12 <_ZN7OneWire5writeEhh>
{
1a000d06:	2401      	movs	r4, #1
1a000d08:	f04f 0800 	mov.w	r8, #0
1a000d0c:	46c2      	mov	sl, r8
1a000d0e:	4627      	mov	r7, r4
1a000d10:	e03a      	b.n	1a000d88 <_ZN7OneWire6searchEPhb+0xb2>
         LastDiscrepancy = 0;
1a000d12:	2300      	movs	r3, #0
1a000d14:	742b      	strb	r3, [r5, #16]
         LastDeviceFlag = false;
1a000d16:	74ab      	strb	r3, [r5, #18]
         LastFamilyDiscrepancy = 0;
1a000d18:	746b      	strb	r3, [r5, #17]
         return false;
1a000d1a:	e7e6      	b.n	1a000cea <_ZN7OneWire6searchEPhb+0x14>
        write(0xEC);   // CONDITIONAL SEARCH
1a000d1c:	2200      	movs	r2, #0
1a000d1e:	21ec      	movs	r1, #236	; 0xec
1a000d20:	4628      	mov	r0, r5
1a000d22:	f7ff ff76 	bl	1a000c12 <_ZN7OneWire5writeEhh>
1a000d26:	e7ee      	b.n	1a000d06 <_ZN7OneWire6searchEPhb+0x30>
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
1a000d28:	2801      	cmp	r0, #1
1a000d2a:	d136      	bne.n	1a000d9a <_ZN7OneWire6searchEPhb+0xc4>
      if (!(id_bit_number < 65)) {
1a000d2c:	2f40      	cmp	r7, #64	; 0x40
1a000d2e:	d9d7      	bls.n	1a000ce0 <_ZN7OneWire6searchEPhb+0xa>
         LastDiscrepancy = last_zero;
1a000d30:	f885 a010 	strb.w	sl, [r5, #16]
         if (LastDiscrepancy == 0) {
1a000d34:	f1ba 0f00 	cmp.w	sl, #0
1a000d38:	d101      	bne.n	1a000d3e <_ZN7OneWire6searchEPhb+0x68>
            LastDeviceFlag = true;
1a000d3a:	2301      	movs	r3, #1
1a000d3c:	74ab      	strb	r3, [r5, #18]
   if (!search_result || !ROM_NO[0]) {
1a000d3e:	7a2b      	ldrb	r3, [r5, #8]
1a000d40:	2b00      	cmp	r3, #0
1a000d42:	d0cd      	beq.n	1a000ce0 <_ZN7OneWire6searchEPhb+0xa>
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
1a000d44:	2300      	movs	r3, #0
1a000d46:	e047      	b.n	1a000dd8 <_ZN7OneWire6searchEPhb+0x102>
               if (id_bit_number < LastDiscrepancy) {
1a000d48:	7c2e      	ldrb	r6, [r5, #16]
1a000d4a:	42be      	cmp	r6, r7
1a000d4c:	d90c      	bls.n	1a000d68 <_ZN7OneWire6searchEPhb+0x92>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
1a000d4e:	eb05 0308 	add.w	r3, r5, r8
1a000d52:	7a1b      	ldrb	r3, [r3, #8]
1a000d54:	4223      	tst	r3, r4
1a000d56:	bf14      	ite	ne
1a000d58:	2601      	movne	r6, #1
1a000d5a:	2600      	moveq	r6, #0
               if (search_direction == 0) {
1a000d5c:	b9fe      	cbnz	r6, 1a000d9e <_ZN7OneWire6searchEPhb+0xc8>
                  if (last_zero < 9)
1a000d5e:	2f08      	cmp	r7, #8
1a000d60:	d807      	bhi.n	1a000d72 <_ZN7OneWire6searchEPhb+0x9c>
                     LastFamilyDiscrepancy = last_zero;
1a000d62:	746f      	strb	r7, [r5, #17]
                  last_zero = id_bit_number;
1a000d64:	46ba      	mov	sl, r7
1a000d66:	e01a      	b.n	1a000d9e <_ZN7OneWire6searchEPhb+0xc8>
                  search_direction = (id_bit_number == LastDiscrepancy);
1a000d68:	42be      	cmp	r6, r7
1a000d6a:	bf14      	ite	ne
1a000d6c:	2600      	movne	r6, #0
1a000d6e:	2601      	moveq	r6, #1
1a000d70:	e7f4      	b.n	1a000d5c <_ZN7OneWire6searchEPhb+0x86>
                  last_zero = id_bit_number;
1a000d72:	46ba      	mov	sl, r7
1a000d74:	e013      	b.n	1a000d9e <_ZN7OneWire6searchEPhb+0xc8>
              ROM_NO[rom_byte_number] |= rom_byte_mask;
1a000d76:	eb05 0208 	add.w	r2, r5, r8
1a000d7a:	7a13      	ldrb	r3, [r2, #8]
1a000d7c:	4323      	orrs	r3, r4
1a000d7e:	7213      	strb	r3, [r2, #8]
1a000d80:	e015      	b.n	1a000dae <_ZN7OneWire6searchEPhb+0xd8>
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
1a000d82:	f1b8 0f07 	cmp.w	r8, #7
1a000d86:	d8d1      	bhi.n	1a000d2c <_ZN7OneWire6searchEPhb+0x56>
         id_bit = read_bit();
1a000d88:	4628      	mov	r0, r5
1a000d8a:	f7ff ff21 	bl	1a000bd0 <_ZN7OneWire8read_bitEv>
1a000d8e:	4606      	mov	r6, r0
         cmp_id_bit = read_bit();
1a000d90:	4628      	mov	r0, r5
1a000d92:	f7ff ff1d 	bl	1a000bd0 <_ZN7OneWire8read_bitEv>
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
1a000d96:	2e01      	cmp	r6, #1
1a000d98:	d0c6      	beq.n	1a000d28 <_ZN7OneWire6searchEPhb+0x52>
            if (id_bit != cmp_id_bit) {
1a000d9a:	4286      	cmp	r6, r0
1a000d9c:	d0d4      	beq.n	1a000d48 <_ZN7OneWire6searchEPhb+0x72>
            if (search_direction == 1)
1a000d9e:	2e01      	cmp	r6, #1
1a000da0:	d0e9      	beq.n	1a000d76 <_ZN7OneWire6searchEPhb+0xa0>
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
1a000da2:	eb05 0208 	add.w	r2, r5, r8
1a000da6:	7a13      	ldrb	r3, [r2, #8]
1a000da8:	ea23 0304 	bic.w	r3, r3, r4
1a000dac:	7213      	strb	r3, [r2, #8]
            write_bit(search_direction);
1a000dae:	4631      	mov	r1, r6
1a000db0:	4628      	mov	r0, r5
1a000db2:	f7ff fedc 	bl	1a000b6e <_ZN7OneWire9write_bitEh>
            id_bit_number++;
1a000db6:	3701      	adds	r7, #1
1a000db8:	b2ff      	uxtb	r7, r7
            rom_byte_mask <<= 1;
1a000dba:	0064      	lsls	r4, r4, #1
            if (rom_byte_mask == 0) {
1a000dbc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a000dc0:	d1df      	bne.n	1a000d82 <_ZN7OneWire6searchEPhb+0xac>
                rom_byte_number++;
1a000dc2:	f108 0801 	add.w	r8, r8, #1
1a000dc6:	fa5f f888 	uxtb.w	r8, r8
                rom_byte_mask = 1;
1a000dca:	2401      	movs	r4, #1
1a000dcc:	e7d9      	b.n	1a000d82 <_ZN7OneWire6searchEPhb+0xac>
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
1a000dce:	18ea      	adds	r2, r5, r3
1a000dd0:	7a12      	ldrb	r2, [r2, #8]
1a000dd2:	f809 2003 	strb.w	r2, [r9, r3]
1a000dd6:	3301      	adds	r3, #1
1a000dd8:	2b07      	cmp	r3, #7
1a000dda:	ddf8      	ble.n	1a000dce <_ZN7OneWire6searchEPhb+0xf8>
         search_result = true;
1a000ddc:	2401      	movs	r4, #1
1a000dde:	e784      	b.n	1a000cea <_ZN7OneWire6searchEPhb+0x14>

1a000de0 <_ZN7OneWire4crc8EPKhh>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
1a000de0:	b410      	push	{r4}
	uint8_t crc = 0;
1a000de2:	2400      	movs	r4, #0

	while (len--) {
1a000de4:	1e4a      	subs	r2, r1, #1
1a000de6:	b2d2      	uxtb	r2, r2
1a000de8:	b161      	cbz	r1, 1a000e04 <_ZN7OneWire4crc8EPKhh+0x24>
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
1a000dea:	f810 3b01 	ldrb.w	r3, [r0], #1
1a000dee:	4063      	eors	r3, r4
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
1a000df0:	f003 040f 	and.w	r4, r3, #15
1a000df4:	4905      	ldr	r1, [pc, #20]	; (1a000e0c <_ZN7OneWire4crc8EPKhh+0x2c>)
1a000df6:	5d0c      	ldrb	r4, [r1, r4]
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
1a000df8:	091b      	lsrs	r3, r3, #4
1a000dfa:	3310      	adds	r3, #16
1a000dfc:	5ccb      	ldrb	r3, [r1, r3]
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
1a000dfe:	405c      	eors	r4, r3
	while (len--) {
1a000e00:	4611      	mov	r1, r2
1a000e02:	e7ef      	b.n	1a000de4 <_ZN7OneWire4crc8EPKhh+0x4>
	}

	return crc;
}
1a000e04:	4620      	mov	r0, r4
1a000e06:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000e0a:	4770      	bx	lr
1a000e0c:	1a004648 	.word	0x1a004648

1a000e10 <clearInEvents>:
	return result;
}

static void clearInEvents(Proyecto* handle)
{
	handle->iface.evTECXNoOprimido_raised = bool_false;
1a000e10:	2300      	movs	r3, #0
1a000e12:	7403      	strb	r3, [r0, #16]
	handle->iface.evTECXOprimido_raised = bool_false;
1a000e14:	7443      	strb	r3, [r0, #17]
	handle->iface.InputRedFalse_raised = bool_false;
1a000e16:	7603      	strb	r3, [r0, #24]
	handle->iface.InputRedTrue_raised = bool_false;
1a000e18:	7643      	strb	r3, [r0, #25]
	handle->iface.showDisplay_raised = bool_false;
1a000e1a:	7683      	strb	r3, [r0, #26]
	handle->iface.leerTemp_raised = bool_false;
1a000e1c:	76c3      	strb	r3, [r0, #27]
	handle->internal.siTECXOK_raised = bool_false;
1a000e1e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	handle->internal.siRedOFF_raised = bool_false;
1a000e22:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
	handle->internal.siRedON_raised = bool_false;
1a000e26:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	handle->internal.switchModo_raised = bool_false;
1a000e2a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
	handle->internal.arranqueGrupo_raised = bool_false;
1a000e2e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	handle->internal.apagadoGrupo_raised = bool_false;
1a000e32:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
	handle->internal.conmutar_raised = bool_false;
1a000e36:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	handle->internal.conmutarAuto_raised = bool_false;
1a000e3a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
	handle->timeEvents.proyecto_TECX_DEBOUNCE_tev0_raised = bool_false;
1a000e3e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	handle->timeEvents.proyecto_Modo_Grupo_TRANSICION_MODOS_tev0_raised = bool_false;
1a000e42:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
	handle->timeEvents.proyecto_Modo_Grupo_TRANSICION_MODOS_tev1_raised = bool_false;
1a000e46:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
	handle->timeEvents.proyecto_Servicio_Red_ESPERA_tev0_raised = bool_false;
1a000e4a:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
	handle->timeEvents.proyecto_Grupo_Electrogeno_GRUPO_APAGADO_tev0_raised = bool_false;
1a000e4e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
	handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev0_raised = bool_false;
1a000e52:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
	handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev1_raised = bool_false;
1a000e56:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
	handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev2_raised = bool_false;
1a000e5a:	f880 3057 	strb.w	r3, [r0, #87]	; 0x57
	handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev3_raised = bool_false;
1a000e5e:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
	handle->timeEvents.proyecto_Grupo_Electrogeno_INICIO_ARRANQUE_tev0_raised = bool_false;
1a000e62:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
	handle->timeEvents.proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tev0_raised = bool_false;
1a000e66:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
	handle->timeEvents.proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tev1_raised = bool_false;
1a000e6a:	f880 305b 	strb.w	r3, [r0, #91]	; 0x5b
	handle->timeEvents.proyecto_Grupo_Electrogeno_APAGANDO_GRUPO_tev0_raised = bool_false;
1a000e6e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO_tev0_raised = bool_false;
1a000e72:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
	handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO_tev1_raised = bool_false;
1a000e76:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
	handle->timeEvents.proyecto_Display_MOSTRAR_VALORES_tev0_raised = bool_false;
1a000e7a:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
	handle->timeEvents.proyecto_Conmutador_SIN_CONMUTACION_tev0_raised = bool_false;
1a000e7e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
	handle->timeEvents.proyecto_Conmutador_SIN_CONMUTACION_tev1_raised = bool_false;
1a000e82:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
	handle->timeEvents.proyecto_Sensor_Temp_LEYENDO_TEMP_tev0_raised = bool_false;
1a000e86:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
1a000e8a:	4770      	bx	lr

1a000e8c <check_TECX_DEBOUNCE_tr0_tr0>:
/* implementations of all internal functions */

static sc_boolean check_TECX_DEBOUNCE_tr0_tr0(const Proyecto* handle)
{
	return handle->timeEvents.proyecto_TECX_DEBOUNCE_tev0_raised;
}
1a000e8c:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
1a000e90:	4770      	bx	lr

1a000e92 <check_TECX_NO_OPRIMIDO_tr0_tr0>:

static sc_boolean check_TECX_NO_OPRIMIDO_tr0_tr0(const Proyecto* handle)
{
	return handle->iface.evTECXOprimido_raised;
}
1a000e92:	7c40      	ldrb	r0, [r0, #17]
1a000e94:	4770      	bx	lr

1a000e96 <check_TECX_OPRIMIDO_tr0_tr0>:

static sc_boolean check_TECX_OPRIMIDO_tr0_tr0(const Proyecto* handle)
{
	return handle->iface.evTECXNoOprimido_raised;
}
1a000e96:	7c00      	ldrb	r0, [r0, #16]
1a000e98:	4770      	bx	lr

1a000e9a <check_TECX_VALIDACION_tr0_tr0>:

static sc_boolean check_TECX_VALIDACION_tr0_tr0(const Proyecto* handle)
{
	return handle->iface.evTECXOprimido_raised;
}
1a000e9a:	7c40      	ldrb	r0, [r0, #17]
1a000e9c:	4770      	bx	lr

1a000e9e <check_TECX_VALIDACION_tr1_tr1>:

static sc_boolean check_TECX_VALIDACION_tr1_tr1(const Proyecto* handle)
{
	return handle->iface.evTECXNoOprimido_raised;
}
1a000e9e:	7c00      	ldrb	r0, [r0, #16]
1a000ea0:	4770      	bx	lr

1a000ea2 <check_Teclas_ESPERA_tr0_tr0>:

static sc_boolean check_Teclas_ESPERA_tr0_tr0(const Proyecto* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == PROYECTO_PROYECTOIFACE_TEC1)) ? bool_true : bool_false;
1a000ea2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a000ea6:	b123      	cbz	r3, 1a000eb2 <check_Teclas_ESPERA_tr0_tr0+0x10>
1a000ea8:	6c83      	ldr	r3, [r0, #72]	; 0x48
1a000eaa:	2b01      	cmp	r3, #1
1a000eac:	d003      	beq.n	1a000eb6 <check_Teclas_ESPERA_tr0_tr0+0x14>
1a000eae:	2000      	movs	r0, #0
1a000eb0:	4770      	bx	lr
1a000eb2:	2000      	movs	r0, #0
1a000eb4:	4770      	bx	lr
1a000eb6:	2001      	movs	r0, #1
}
1a000eb8:	4770      	bx	lr

1a000eba <check_Teclas_ESPERA_tr1_tr1>:

static sc_boolean check_Teclas_ESPERA_tr1_tr1(const Proyecto* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == PROYECTO_PROYECTOIFACE_TEC2 && handle->iface.grupoExito == bool_false && handle->iface.modoGrupo == 1)) ? bool_true : bool_false;
1a000eba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a000ebe:	b163      	cbz	r3, 1a000eda <check_Teclas_ESPERA_tr1_tr1+0x20>
1a000ec0:	6c83      	ldr	r3, [r0, #72]	; 0x48
1a000ec2:	2b02      	cmp	r3, #2
1a000ec4:	d001      	beq.n	1a000eca <check_Teclas_ESPERA_tr1_tr1+0x10>
1a000ec6:	2000      	movs	r0, #0
1a000ec8:	4770      	bx	lr
1a000eca:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
1a000ece:	b933      	cbnz	r3, 1a000ede <check_Teclas_ESPERA_tr1_tr1+0x24>
1a000ed0:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000ed2:	2b01      	cmp	r3, #1
1a000ed4:	d005      	beq.n	1a000ee2 <check_Teclas_ESPERA_tr1_tr1+0x28>
1a000ed6:	2000      	movs	r0, #0
1a000ed8:	4770      	bx	lr
1a000eda:	2000      	movs	r0, #0
1a000edc:	4770      	bx	lr
1a000ede:	2000      	movs	r0, #0
1a000ee0:	4770      	bx	lr
1a000ee2:	2001      	movs	r0, #1
}
1a000ee4:	4770      	bx	lr

1a000ee6 <check_Teclas_ESPERA_tr2_tr2>:

static sc_boolean check_Teclas_ESPERA_tr2_tr2(const Proyecto* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == PROYECTO_PROYECTOIFACE_TEC3 && handle->iface.modoGrupo == 1)) ? bool_true : bool_false;
1a000ee6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a000eea:	b14b      	cbz	r3, 1a000f00 <check_Teclas_ESPERA_tr2_tr2+0x1a>
1a000eec:	6c83      	ldr	r3, [r0, #72]	; 0x48
1a000eee:	2b04      	cmp	r3, #4
1a000ef0:	d001      	beq.n	1a000ef6 <check_Teclas_ESPERA_tr2_tr2+0x10>
1a000ef2:	2000      	movs	r0, #0
1a000ef4:	4770      	bx	lr
1a000ef6:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000ef8:	2b01      	cmp	r3, #1
1a000efa:	d003      	beq.n	1a000f04 <check_Teclas_ESPERA_tr2_tr2+0x1e>
1a000efc:	2000      	movs	r0, #0
1a000efe:	4770      	bx	lr
1a000f00:	2000      	movs	r0, #0
1a000f02:	4770      	bx	lr
1a000f04:	2001      	movs	r0, #1
}
1a000f06:	4770      	bx	lr

1a000f08 <check_Teclas_ESPERA_tr3_tr3>:

static sc_boolean check_Teclas_ESPERA_tr3_tr3(const Proyecto* handle)
{
	return ((handle->internal.siTECXOK_raised) && (handle->internal.viTecla == PROYECTO_PROYECTOIFACE_TEC4 && handle->iface.modoGrupo == 1)) ? bool_true : bool_false;
1a000f08:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a000f0c:	b14b      	cbz	r3, 1a000f22 <check_Teclas_ESPERA_tr3_tr3+0x1a>
1a000f0e:	6c83      	ldr	r3, [r0, #72]	; 0x48
1a000f10:	2b08      	cmp	r3, #8
1a000f12:	d001      	beq.n	1a000f18 <check_Teclas_ESPERA_tr3_tr3+0x10>
1a000f14:	2000      	movs	r0, #0
1a000f16:	4770      	bx	lr
1a000f18:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000f1a:	2b01      	cmp	r3, #1
1a000f1c:	d003      	beq.n	1a000f26 <check_Teclas_ESPERA_tr3_tr3+0x1e>
1a000f1e:	2000      	movs	r0, #0
1a000f20:	4770      	bx	lr
1a000f22:	2000      	movs	r0, #0
1a000f24:	4770      	bx	lr
1a000f26:	2001      	movs	r0, #1
}
1a000f28:	4770      	bx	lr

1a000f2a <check_Modo_Grupo_MANUAL_tr0_tr0>:

static sc_boolean check_Modo_Grupo_MANUAL_tr0_tr0(const Proyecto* handle)
{
	return handle->internal.switchModo_raised;
}
1a000f2a:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
1a000f2e:	4770      	bx	lr

1a000f30 <check_Modo_Grupo_AUTOMATICO_tr0_tr0>:

static sc_boolean check_Modo_Grupo_AUTOMATICO_tr0_tr0(const Proyecto* handle)
{
	return handle->internal.switchModo_raised;
}
1a000f30:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
1a000f34:	4770      	bx	lr

1a000f36 <check_Modo_Grupo_TRANSICION_MODOS_tr0_tr0>:

static sc_boolean check_Modo_Grupo_TRANSICION_MODOS_tr0_tr0(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Modo_Grupo_TRANSICION_MODOS_tev0_raised) && (handle->iface.modoGrupo == 1)) ? bool_true : bool_false;
1a000f36:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
1a000f3a:	b123      	cbz	r3, 1a000f46 <check_Modo_Grupo_TRANSICION_MODOS_tr0_tr0+0x10>
1a000f3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000f3e:	2b01      	cmp	r3, #1
1a000f40:	d003      	beq.n	1a000f4a <check_Modo_Grupo_TRANSICION_MODOS_tr0_tr0+0x14>
1a000f42:	2000      	movs	r0, #0
1a000f44:	4770      	bx	lr
1a000f46:	2000      	movs	r0, #0
1a000f48:	4770      	bx	lr
1a000f4a:	2001      	movs	r0, #1
}
1a000f4c:	4770      	bx	lr

1a000f4e <check_Modo_Grupo_TRANSICION_MODOS_tr1_tr1>:

static sc_boolean check_Modo_Grupo_TRANSICION_MODOS_tr1_tr1(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Modo_Grupo_TRANSICION_MODOS_tev1_raised) && (handle->iface.modoGrupo == 0)) ? bool_true : bool_false;
1a000f4e:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
1a000f52:	b11b      	cbz	r3, 1a000f5c <check_Modo_Grupo_TRANSICION_MODOS_tr1_tr1+0xe>
1a000f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000f56:	b11b      	cbz	r3, 1a000f60 <check_Modo_Grupo_TRANSICION_MODOS_tr1_tr1+0x12>
1a000f58:	2000      	movs	r0, #0
1a000f5a:	4770      	bx	lr
1a000f5c:	2000      	movs	r0, #0
1a000f5e:	4770      	bx	lr
1a000f60:	2001      	movs	r0, #1
}
1a000f62:	4770      	bx	lr

1a000f64 <check_Servicio_Red_HAY_LUZ_tr0_tr0>:

static sc_boolean check_Servicio_Red_HAY_LUZ_tr0_tr0(const Proyecto* handle)
{
	return handle->iface.InputRedFalse_raised;
}
1a000f64:	7e00      	ldrb	r0, [r0, #24]
1a000f66:	4770      	bx	lr

1a000f68 <check_Servicio_Red_ESPERA_tr0_tr0>:

static sc_boolean check_Servicio_Red_ESPERA_tr0_tr0(const Proyecto* handle)
{
	return handle->timeEvents.proyecto_Servicio_Red_ESPERA_tev0_raised;
}
1a000f68:	f890 0053 	ldrb.w	r0, [r0, #83]	; 0x53
1a000f6c:	4770      	bx	lr

1a000f6e <check_Servicio_Red_VALIDACION_tr0_tr0>:

static sc_boolean check_Servicio_Red_VALIDACION_tr0_tr0(const Proyecto* handle)
{
	return handle->iface.InputRedTrue_raised;
}
1a000f6e:	7e40      	ldrb	r0, [r0, #25]
1a000f70:	4770      	bx	lr

1a000f72 <check_Servicio_Red_VALIDACION_tr1_tr1>:

static sc_boolean check_Servicio_Red_VALIDACION_tr1_tr1(const Proyecto* handle)
{
	return handle->iface.InputRedFalse_raised;
}
1a000f72:	7e00      	ldrb	r0, [r0, #24]
1a000f74:	4770      	bx	lr

1a000f76 <check_Servicio_Red_NO_HAY_LUZ_tr0_tr0>:

static sc_boolean check_Servicio_Red_NO_HAY_LUZ_tr0_tr0(const Proyecto* handle)
{
	return handle->iface.InputRedTrue_raised;
}
1a000f76:	7e40      	ldrb	r0, [r0, #25]
1a000f78:	4770      	bx	lr

1a000f7a <check_Grupo_Electrogeno_GRUPO_APAGADO_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_GRUPO_APAGADO_tr0_tr0(const Proyecto* handle)
{
	return handle->timeEvents.proyecto_Grupo_Electrogeno_GRUPO_APAGADO_tev0_raised;
}
1a000f7a:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
1a000f7e:	4770      	bx	lr

1a000f80 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev0_raised) && (handle->iface.isGrupoOn == bool_false && handle->internal.intentoArranque < PROYECTO_PROYECTOIFACE_MAX_ARR && handle->iface.modoGrupo == 0)) ? bool_true : bool_false;
1a000f80:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
1a000f84:	b14b      	cbz	r3, 1a000f9a <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0+0x1a>
1a000f86:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000f8a:	b943      	cbnz	r3, 1a000f9e <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0+0x1e>
1a000f8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a000f8e:	2b02      	cmp	r3, #2
1a000f90:	dc07      	bgt.n	1a000fa2 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0+0x22>
1a000f92:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000f94:	b13b      	cbz	r3, 1a000fa6 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0+0x26>
1a000f96:	2000      	movs	r0, #0
1a000f98:	4770      	bx	lr
1a000f9a:	2000      	movs	r0, #0
1a000f9c:	4770      	bx	lr
1a000f9e:	2000      	movs	r0, #0
1a000fa0:	4770      	bx	lr
1a000fa2:	2000      	movs	r0, #0
1a000fa4:	4770      	bx	lr
1a000fa6:	2001      	movs	r0, #1
}
1a000fa8:	4770      	bx	lr

1a000faa <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1_tr1>:

static sc_boolean check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1_tr1(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev1_raised) && (handle->iface.isGrupoOn == bool_true)) ? bool_true : bool_false;
1a000faa:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
1a000fae:	b123      	cbz	r3, 1a000fba <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1_tr1+0x10>
1a000fb0:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000fb4:	b91b      	cbnz	r3, 1a000fbe <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1_tr1+0x14>
1a000fb6:	2000      	movs	r0, #0
1a000fb8:	4770      	bx	lr
1a000fba:	2000      	movs	r0, #0
1a000fbc:	4770      	bx	lr
1a000fbe:	2001      	movs	r0, #1
}
1a000fc0:	4770      	bx	lr

1a000fc2 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2_tr2>:

static sc_boolean check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2_tr2(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev2_raised) && (handle->iface.isGrupoOn == bool_false && handle->internal.intentoArranque >= PROYECTO_PROYECTOIFACE_MAX_ARR)) ? bool_true : bool_false;
1a000fc2:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
1a000fc6:	b13b      	cbz	r3, 1a000fd8 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2_tr2+0x16>
1a000fc8:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000fcc:	b933      	cbnz	r3, 1a000fdc <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2_tr2+0x1a>
1a000fce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a000fd0:	2b02      	cmp	r3, #2
1a000fd2:	dc05      	bgt.n	1a000fe0 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2_tr2+0x1e>
1a000fd4:	2000      	movs	r0, #0
1a000fd6:	4770      	bx	lr
1a000fd8:	2000      	movs	r0, #0
1a000fda:	4770      	bx	lr
1a000fdc:	2000      	movs	r0, #0
1a000fde:	4770      	bx	lr
1a000fe0:	2001      	movs	r0, #1
}
1a000fe2:	4770      	bx	lr

1a000fe4 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3_tr3>:

static sc_boolean check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3_tr3(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev3_raised) && (handle->iface.isGrupoOn == bool_false && handle->iface.modoGrupo == 1)) ? bool_true : bool_false;
1a000fe4:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
1a000fe8:	b13b      	cbz	r3, 1a000ffa <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3_tr3+0x16>
1a000fea:	f890 3020 	ldrb.w	r3, [r0, #32]
1a000fee:	b933      	cbnz	r3, 1a000ffe <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3_tr3+0x1a>
1a000ff0:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000ff2:	2b01      	cmp	r3, #1
1a000ff4:	d005      	beq.n	1a001002 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3_tr3+0x1e>
1a000ff6:	2000      	movs	r0, #0
1a000ff8:	4770      	bx	lr
1a000ffa:	2000      	movs	r0, #0
1a000ffc:	4770      	bx	lr
1a000ffe:	2000      	movs	r0, #0
1a001000:	4770      	bx	lr
1a001002:	2001      	movs	r0, #1
}
1a001004:	4770      	bx	lr

1a001006 <check_Grupo_Electrogeno_ARRANQUE_EXITO_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_ARRANQUE_EXITO_tr0_tr0(const Proyecto* handle)
{
	return ((handle->internal.siRedON_raised) && (handle->iface.modoGrupo == 0)) ? bool_true : bool_false;
1a001006:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
1a00100a:	b11b      	cbz	r3, 1a001014 <check_Grupo_Electrogeno_ARRANQUE_EXITO_tr0_tr0+0xe>
1a00100c:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a00100e:	b11b      	cbz	r3, 1a001018 <check_Grupo_Electrogeno_ARRANQUE_EXITO_tr0_tr0+0x12>
1a001010:	2000      	movs	r0, #0
1a001012:	4770      	bx	lr
1a001014:	2000      	movs	r0, #0
1a001016:	4770      	bx	lr
1a001018:	2001      	movs	r0, #1
}
1a00101a:	4770      	bx	lr

1a00101c <check_Grupo_Electrogeno_ARRANQUE_EXITO_tr1_tr1>:

static sc_boolean check_Grupo_Electrogeno_ARRANQUE_EXITO_tr1_tr1(const Proyecto* handle)
{
	return handle->internal.apagadoGrupo_raised;
}
1a00101c:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
1a001020:	4770      	bx	lr

1a001022 <check_Grupo_Electrogeno_FALLA_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_FALLA_tr0_tr0(const Proyecto* handle)
{
	return ((handle->internal.siRedON_raised) && (handle->iface.modoGrupo == 0)) ? bool_true : bool_false;
1a001022:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
1a001026:	b11b      	cbz	r3, 1a001030 <check_Grupo_Electrogeno_FALLA_tr0_tr0+0xe>
1a001028:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a00102a:	b11b      	cbz	r3, 1a001034 <check_Grupo_Electrogeno_FALLA_tr0_tr0+0x12>
1a00102c:	2000      	movs	r0, #0
1a00102e:	4770      	bx	lr
1a001030:	2000      	movs	r0, #0
1a001032:	4770      	bx	lr
1a001034:	2001      	movs	r0, #1
}
1a001036:	4770      	bx	lr

1a001038 <check_Grupo_Electrogeno_FALLA_tr1_tr1>:

static sc_boolean check_Grupo_Electrogeno_FALLA_tr1_tr1(const Proyecto* handle)
{
	return handle->internal.apagadoGrupo_raised;
}
1a001038:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
1a00103c:	4770      	bx	lr

1a00103e <check_Grupo_Electrogeno_INICIO_ARRANQUE_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_INICIO_ARRANQUE_tr0_tr0(const Proyecto* handle)
{
	return handle->timeEvents.proyecto_Grupo_Electrogeno_INICIO_ARRANQUE_tev0_raised;
}
1a00103e:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
1a001042:	4770      	bx	lr

1a001044 <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0_tr0(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tev0_raised) && (handle->internal.intentoArranque < PROYECTO_PROYECTOIFACE_MAX_ARR && handle->iface.modoGrupo == 0)) ? bool_true : bool_false;
1a001044:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
1a001048:	b133      	cbz	r3, 1a001058 <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0_tr0+0x14>
1a00104a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00104c:	2b02      	cmp	r3, #2
1a00104e:	dc05      	bgt.n	1a00105c <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0_tr0+0x18>
1a001050:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a001052:	b12b      	cbz	r3, 1a001060 <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0_tr0+0x1c>
1a001054:	2000      	movs	r0, #0
1a001056:	4770      	bx	lr
1a001058:	2000      	movs	r0, #0
1a00105a:	4770      	bx	lr
1a00105c:	2000      	movs	r0, #0
1a00105e:	4770      	bx	lr
1a001060:	2001      	movs	r0, #1
}
1a001062:	4770      	bx	lr

1a001064 <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1_tr1>:

static sc_boolean check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1_tr1(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tev1_raised) && (handle->iface.modoGrupo == 1)) ? bool_true : bool_false;
1a001064:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
1a001068:	b123      	cbz	r3, 1a001074 <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1_tr1+0x10>
1a00106a:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a00106c:	2b01      	cmp	r3, #1
1a00106e:	d003      	beq.n	1a001078 <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1_tr1+0x14>
1a001070:	2000      	movs	r0, #0
1a001072:	4770      	bx	lr
1a001074:	2000      	movs	r0, #0
1a001076:	4770      	bx	lr
1a001078:	2001      	movs	r0, #1
}
1a00107a:	4770      	bx	lr

1a00107c <check_Grupo_Electrogeno_APAGANDO_GRUPO_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_APAGANDO_GRUPO_tr0_tr0(const Proyecto* handle)
{
	return handle->timeEvents.proyecto_Grupo_Electrogeno_APAGANDO_GRUPO_tev0_raised;
}
1a00107c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
1a001080:	4770      	bx	lr

1a001082 <check_Grupo_Electrogeno_ESPERA_GRUPO_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_ESPERA_GRUPO_tr0_tr0(const Proyecto* handle)
{
	return handle->internal.arranqueGrupo_raised;
}
1a001082:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
1a001086:	4770      	bx	lr

1a001088 <check_Grupo_Electrogeno_ESPERA_GRUPO_tr1_tr1>:

static sc_boolean check_Grupo_Electrogeno_ESPERA_GRUPO_tr1_tr1(const Proyecto* handle)
{
	return ((handle->internal.siRedOFF_raised) && (handle->iface.modoGrupo == 0)) ? bool_true : bool_false;
1a001088:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
1a00108c:	b11b      	cbz	r3, 1a001096 <check_Grupo_Electrogeno_ESPERA_GRUPO_tr1_tr1+0xe>
1a00108e:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a001090:	b11b      	cbz	r3, 1a00109a <check_Grupo_Electrogeno_ESPERA_GRUPO_tr1_tr1+0x12>
1a001092:	2000      	movs	r0, #0
1a001094:	4770      	bx	lr
1a001096:	2000      	movs	r0, #0
1a001098:	4770      	bx	lr
1a00109a:	2001      	movs	r0, #1
}
1a00109c:	4770      	bx	lr

1a00109e <check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0_tr0>:

static sc_boolean check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0_tr0(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO_tev0_raised) && (handle->iface.isGrupoOn == bool_true)) ? bool_true : bool_false;
1a00109e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0010a2:	b123      	cbz	r3, 1a0010ae <check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0_tr0+0x10>
1a0010a4:	f890 3020 	ldrb.w	r3, [r0, #32]
1a0010a8:	b91b      	cbnz	r3, 1a0010b2 <check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0_tr0+0x14>
1a0010aa:	2000      	movs	r0, #0
1a0010ac:	4770      	bx	lr
1a0010ae:	2000      	movs	r0, #0
1a0010b0:	4770      	bx	lr
1a0010b2:	2001      	movs	r0, #1
}
1a0010b4:	4770      	bx	lr

1a0010b6 <check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1_tr1>:

static sc_boolean check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1_tr1(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO_tev1_raised) && (handle->iface.isGrupoOn == bool_false)) ? bool_true : bool_false;
1a0010b6:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
1a0010ba:	b123      	cbz	r3, 1a0010c6 <check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1_tr1+0x10>
1a0010bc:	f890 3020 	ldrb.w	r3, [r0, #32]
1a0010c0:	b11b      	cbz	r3, 1a0010ca <check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1_tr1+0x14>
1a0010c2:	2000      	movs	r0, #0
1a0010c4:	4770      	bx	lr
1a0010c6:	2000      	movs	r0, #0
1a0010c8:	4770      	bx	lr
1a0010ca:	2001      	movs	r0, #1
}
1a0010cc:	4770      	bx	lr

1a0010ce <check_Display_IDLE_lr0_lr0>:
	return bool_true;
}

static sc_boolean check_Display_IDLE_lr0_lr0(const Proyecto* handle)
{
	return (handle->iface.numDisplay == 3) ? bool_true : bool_false;
1a0010ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
1a0010d0:	2803      	cmp	r0, #3
1a0010d2:	bf14      	ite	ne
1a0010d4:	2000      	movne	r0, #0
1a0010d6:	2001      	moveq	r0, #1
1a0010d8:	4770      	bx	lr

1a0010da <check_Display_IDLE_tr0_tr0>:

static sc_boolean check_Display_IDLE_tr0_tr0(const Proyecto* handle)
{
	return ((handle->iface.showDisplay_raised) && (handle->iface.numDisplay < 3)) ? bool_true : bool_false;
1a0010da:	7e83      	ldrb	r3, [r0, #26]
1a0010dc:	b123      	cbz	r3, 1a0010e8 <check_Display_IDLE_tr0_tr0+0xe>
1a0010de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1a0010e0:	2b02      	cmp	r3, #2
1a0010e2:	dd03      	ble.n	1a0010ec <check_Display_IDLE_tr0_tr0+0x12>
1a0010e4:	2000      	movs	r0, #0
1a0010e6:	4770      	bx	lr
1a0010e8:	2000      	movs	r0, #0
1a0010ea:	4770      	bx	lr
1a0010ec:	2001      	movs	r0, #1
}
1a0010ee:	4770      	bx	lr

1a0010f0 <check_Display_MOSTRAR_VALORES_tr0_tr0>:

static sc_boolean check_Display_MOSTRAR_VALORES_tr0_tr0(const Proyecto* handle)
{
	return handle->timeEvents.proyecto_Display_MOSTRAR_VALORES_tev0_raised;
}
1a0010f0:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
1a0010f4:	4770      	bx	lr

1a0010f6 <check_Conmutador_GRUPO_CONMUTADO_tr0_tr0>:

static sc_boolean check_Conmutador_GRUPO_CONMUTADO_tr0_tr0(const Proyecto* handle)
{
	return handle->internal.conmutar_raised;
}
1a0010f6:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
1a0010fa:	4770      	bx	lr

1a0010fc <check_Conmutador_GRUPO_CONMUTADO_tr1_tr1>:

static sc_boolean check_Conmutador_GRUPO_CONMUTADO_tr1_tr1(const Proyecto* handle)
{
	return ((handle->internal.siRedON_raised) && (handle->iface.modoGrupo == 0)) ? bool_true : bool_false;
1a0010fc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
1a001100:	b11b      	cbz	r3, 1a00110a <check_Conmutador_GRUPO_CONMUTADO_tr1_tr1+0xe>
1a001102:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a001104:	b11b      	cbz	r3, 1a00110e <check_Conmutador_GRUPO_CONMUTADO_tr1_tr1+0x12>
1a001106:	2000      	movs	r0, #0
1a001108:	4770      	bx	lr
1a00110a:	2000      	movs	r0, #0
1a00110c:	4770      	bx	lr
1a00110e:	2001      	movs	r0, #1
}
1a001110:	4770      	bx	lr

1a001112 <check_Conmutador_RED_CONMUTADA_tr0_tr0>:

static sc_boolean check_Conmutador_RED_CONMUTADA_tr0_tr0(const Proyecto* handle)
{
	return ((handle->internal.conmutar_raised) && (handle->iface.grupoExito == bool_true)) ? bool_true : bool_false;
1a001112:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
1a001116:	b123      	cbz	r3, 1a001122 <check_Conmutador_RED_CONMUTADA_tr0_tr0+0x10>
1a001118:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
1a00111c:	b91b      	cbnz	r3, 1a001126 <check_Conmutador_RED_CONMUTADA_tr0_tr0+0x14>
1a00111e:	2000      	movs	r0, #0
1a001120:	4770      	bx	lr
1a001122:	2000      	movs	r0, #0
1a001124:	4770      	bx	lr
1a001126:	2001      	movs	r0, #1
}
1a001128:	4770      	bx	lr

1a00112a <check_Conmutador_RED_CONMUTADA_tr1_tr1>:

static sc_boolean check_Conmutador_RED_CONMUTADA_tr1_tr1(const Proyecto* handle)
{
	return ((handle->internal.conmutarAuto_raised) && (handle->iface.modoGrupo == 0)) ? bool_true : bool_false;
1a00112a:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
1a00112e:	b11b      	cbz	r3, 1a001138 <check_Conmutador_RED_CONMUTADA_tr1_tr1+0xe>
1a001130:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a001132:	b11b      	cbz	r3, 1a00113c <check_Conmutador_RED_CONMUTADA_tr1_tr1+0x12>
1a001134:	2000      	movs	r0, #0
1a001136:	4770      	bx	lr
1a001138:	2000      	movs	r0, #0
1a00113a:	4770      	bx	lr
1a00113c:	2001      	movs	r0, #1
}
1a00113e:	4770      	bx	lr

1a001140 <check_Conmutador_SIN_CONMUTACION_tr0_tr0>:

static sc_boolean check_Conmutador_SIN_CONMUTACION_tr0_tr0(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Conmutador_SIN_CONMUTACION_tev0_raised) && (handle->iface.conmutacionGrupo == 0 && handle->iface.conmutacionRed == 1)) ? bool_true : bool_false;
1a001140:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
1a001144:	b133      	cbz	r3, 1a001154 <check_Conmutador_SIN_CONMUTACION_tr0_tr0+0x14>
1a001146:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a001148:	b933      	cbnz	r3, 1a001158 <check_Conmutador_SIN_CONMUTACION_tr0_tr0+0x18>
1a00114a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a00114c:	2b01      	cmp	r3, #1
1a00114e:	d005      	beq.n	1a00115c <check_Conmutador_SIN_CONMUTACION_tr0_tr0+0x1c>
1a001150:	2000      	movs	r0, #0
1a001152:	4770      	bx	lr
1a001154:	2000      	movs	r0, #0
1a001156:	4770      	bx	lr
1a001158:	2000      	movs	r0, #0
1a00115a:	4770      	bx	lr
1a00115c:	2001      	movs	r0, #1
}
1a00115e:	4770      	bx	lr

1a001160 <check_Conmutador_SIN_CONMUTACION_tr1_tr1>:

static sc_boolean check_Conmutador_SIN_CONMUTACION_tr1_tr1(const Proyecto* handle)
{
	return ((handle->timeEvents.proyecto_Conmutador_SIN_CONMUTACION_tev1_raised) && (handle->iface.conmutacionGrupo == 1 && handle->iface.conmutacionRed == 0)) ? bool_true : bool_false;
1a001160:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
1a001164:	b143      	cbz	r3, 1a001178 <check_Conmutador_SIN_CONMUTACION_tr1_tr1+0x18>
1a001166:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a001168:	2b01      	cmp	r3, #1
1a00116a:	d001      	beq.n	1a001170 <check_Conmutador_SIN_CONMUTACION_tr1_tr1+0x10>
1a00116c:	2000      	movs	r0, #0
1a00116e:	4770      	bx	lr
1a001170:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a001172:	b11b      	cbz	r3, 1a00117c <check_Conmutador_SIN_CONMUTACION_tr1_tr1+0x1c>
1a001174:	2000      	movs	r0, #0
1a001176:	4770      	bx	lr
1a001178:	2000      	movs	r0, #0
1a00117a:	4770      	bx	lr
1a00117c:	2001      	movs	r0, #1
}
1a00117e:	4770      	bx	lr

1a001180 <check_Conmutador_CONMUTACION_INICIAL_tr0_tr0>:

static sc_boolean check_Conmutador_CONMUTACION_INICIAL_tr0_tr0(const Proyecto* handle)
{
	return handle->internal.siRedON_raised;
}
1a001180:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
1a001184:	4770      	bx	lr

1a001186 <check_Sensor_Temp_IDLE_tr0_tr0>:

static sc_boolean check_Sensor_Temp_IDLE_tr0_tr0(const Proyecto* handle)
{
	return handle->iface.leerTemp_raised;
}
1a001186:	7ec0      	ldrb	r0, [r0, #27]
1a001188:	4770      	bx	lr

1a00118a <check_Sensor_Temp_LEYENDO_TEMP_tr0_tr0>:

static sc_boolean check_Sensor_Temp_LEYENDO_TEMP_tr0_tr0(const Proyecto* handle)
{
	return handle->timeEvents.proyecto_Sensor_Temp_LEYENDO_TEMP_tev0_raised;
}
1a00118a:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
1a00118e:	4770      	bx	lr

1a001190 <effect_Display_IDLE_lr0_lr0>:
	enseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO_default(handle);
}

static void effect_Display_IDLE_lr0_lr0(Proyecto* handle)
{
	handle->iface.numDisplay = 0;
1a001190:	2300      	movs	r3, #0
1a001192:	62c3      	str	r3, [r0, #44]	; 0x2c
}
1a001194:	4770      	bx	lr

1a001196 <enact_TECX_OPRIMIDO>:

/* Entry action for state 'OPRIMIDO'. */
static void enact_TECX_OPRIMIDO(Proyecto* handle)
{
	/* Entry action for state 'OPRIMIDO'. */
	handle->internal.siTECXOK_raised = bool_true;
1a001196:	2301      	movs	r3, #1
1a001198:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	handle->internal.viTecla = handle->iface.evTECXOprimido_value;
1a00119c:	6943      	ldr	r3, [r0, #20]
1a00119e:	6483      	str	r3, [r0, #72]	; 0x48
}
1a0011a0:	4770      	bx	lr

1a0011a2 <enact_Grupo_Electrogeno_ARRANQUE_EXITO>:

/* Entry action for state 'ARRANQUE_EXITO'. */
static void enact_Grupo_Electrogeno_ARRANQUE_EXITO(Proyecto* handle)
{
	/* Entry action for state 'ARRANQUE_EXITO'. */
	handle->internal.conmutarAuto_raised = bool_true;
1a0011a2:	2301      	movs	r3, #1
1a0011a4:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
	handle->iface.grupoExito = bool_true;
1a0011a8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
1a0011ac:	4770      	bx	lr

1a0011ae <enseq_TECX_NO_OPRIMIDO_default>:

/* 'default' enter sequence for state NO_OPRIMIDO */
static void enseq_TECX_NO_OPRIMIDO_default(Proyecto* handle)
{
	/* 'default' enter sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = Proyecto_TECX_NO_OPRIMIDO;
1a0011ae:	2302      	movs	r3, #2
1a0011b0:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0011b2:	2300      	movs	r3, #0
1a0011b4:	6083      	str	r3, [r0, #8]
}
1a0011b6:	4770      	bx	lr

1a0011b8 <enseq_TECX_OPRIMIDO_default>:

/* 'default' enter sequence for state OPRIMIDO */
static void enseq_TECX_OPRIMIDO_default(Proyecto* handle)
{
1a0011b8:	b510      	push	{r4, lr}
1a0011ba:	4604      	mov	r4, r0
	/* 'default' enter sequence for state OPRIMIDO */
	enact_TECX_OPRIMIDO(handle);
1a0011bc:	f7ff ffeb 	bl	1a001196 <enact_TECX_OPRIMIDO>
	handle->stateConfVector[0] = Proyecto_TECX_OPRIMIDO;
1a0011c0:	2303      	movs	r3, #3
1a0011c2:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a0011c4:	2300      	movs	r3, #0
1a0011c6:	60a3      	str	r3, [r4, #8]
}
1a0011c8:	bd10      	pop	{r4, pc}

1a0011ca <enseq_TECX_VALIDACION_default>:

/* 'default' enter sequence for state VALIDACION */
static void enseq_TECX_VALIDACION_default(Proyecto* handle)
{
	/* 'default' enter sequence for state VALIDACION */
	handle->stateConfVector[0] = Proyecto_TECX_VALIDACION;
1a0011ca:	2304      	movs	r3, #4
1a0011cc:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a0011ce:	2300      	movs	r3, #0
1a0011d0:	6083      	str	r3, [r0, #8]
}
1a0011d2:	4770      	bx	lr

1a0011d4 <enseq_Teclas_ESPERA_default>:

/* 'default' enter sequence for state ESPERA */
static void enseq_Teclas_ESPERA_default(Proyecto* handle)
{
	/* 'default' enter sequence for state ESPERA */
	handle->stateConfVector[1] = Proyecto_Teclas_ESPERA;
1a0011d4:	2305      	movs	r3, #5
1a0011d6:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a0011d8:	2301      	movs	r3, #1
1a0011da:	6083      	str	r3, [r0, #8]
}
1a0011dc:	4770      	bx	lr

1a0011de <enseq_Servicio_Red_VALIDACION_default>:

/* 'default' enter sequence for state VALIDACION */
static void enseq_Servicio_Red_VALIDACION_default(Proyecto* handle)
{
	/* 'default' enter sequence for state VALIDACION */
	handle->stateConfVector[3] = Proyecto_Servicio_Red_VALIDACION;
1a0011de:	230b      	movs	r3, #11
1a0011e0:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0011e2:	2303      	movs	r3, #3
1a0011e4:	6083      	str	r3, [r0, #8]
}
1a0011e6:	4770      	bx	lr

1a0011e8 <enseq_Grupo_Electrogeno_ARRANQUE_EXITO_default>:
	handle->stateConfVectorPosition = 4;
}

/* 'default' enter sequence for state ARRANQUE_EXITO */
static void enseq_Grupo_Electrogeno_ARRANQUE_EXITO_default(Proyecto* handle)
{
1a0011e8:	b510      	push	{r4, lr}
1a0011ea:	4604      	mov	r4, r0
	/* 'default' enter sequence for state ARRANQUE_EXITO */
	enact_Grupo_Electrogeno_ARRANQUE_EXITO(handle);
1a0011ec:	f7ff ffd9 	bl	1a0011a2 <enact_Grupo_Electrogeno_ARRANQUE_EXITO>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_ARRANQUE_EXITO;
1a0011f0:	230f      	movs	r3, #15
1a0011f2:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a0011f4:	2304      	movs	r3, #4
1a0011f6:	60a3      	str	r3, [r4, #8]
}
1a0011f8:	bd10      	pop	{r4, pc}

1a0011fa <enseq_Display_IDLE_default>:

/* 'default' enter sequence for state IDLE */
static void enseq_Display_IDLE_default(Proyecto* handle)
{
	/* 'default' enter sequence for state IDLE */
	handle->stateConfVector[5] = Proyecto_Display_IDLE;
1a0011fa:	2317      	movs	r3, #23
1a0011fc:	7143      	strb	r3, [r0, #5]
	handle->stateConfVectorPosition = 5;
1a0011fe:	2305      	movs	r3, #5
1a001200:	6083      	str	r3, [r0, #8]
}
1a001202:	4770      	bx	lr

1a001204 <enseq_Sensor_Temp_IDLE_default>:

/* 'default' enter sequence for state IDLE */
static void enseq_Sensor_Temp_IDLE_default(Proyecto* handle)
{
	/* 'default' enter sequence for state IDLE */
	handle->stateConfVector[7] = Proyecto_Sensor_Temp_IDLE;
1a001204:	231d      	movs	r3, #29
1a001206:	71c3      	strb	r3, [r0, #7]
	handle->stateConfVectorPosition = 7;
1a001208:	2307      	movs	r3, #7
1a00120a:	6083      	str	r3, [r0, #8]
}
1a00120c:	4770      	bx	lr

1a00120e <exseq_TECX_NO_OPRIMIDO>:

/* Default exit sequence for state NO_OPRIMIDO */
static void exseq_TECX_NO_OPRIMIDO(Proyecto* handle)
{
	/* Default exit sequence for state NO_OPRIMIDO */
	handle->stateConfVector[0] = Proyecto_last_state;
1a00120e:	2300      	movs	r3, #0
1a001210:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a001212:	6083      	str	r3, [r0, #8]
}
1a001214:	4770      	bx	lr

1a001216 <exseq_TECX_OPRIMIDO>:

/* Default exit sequence for state OPRIMIDO */
static void exseq_TECX_OPRIMIDO(Proyecto* handle)
{
	/* Default exit sequence for state OPRIMIDO */
	handle->stateConfVector[0] = Proyecto_last_state;
1a001216:	2300      	movs	r3, #0
1a001218:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a00121a:	6083      	str	r3, [r0, #8]
}
1a00121c:	4770      	bx	lr

1a00121e <effect_TECX_OPRIMIDO_tr0>:
{
1a00121e:	b510      	push	{r4, lr}
1a001220:	4604      	mov	r4, r0
	exseq_TECX_OPRIMIDO(handle);
1a001222:	f7ff fff8 	bl	1a001216 <exseq_TECX_OPRIMIDO>
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a001226:	4620      	mov	r0, r4
1a001228:	f7ff ffc1 	bl	1a0011ae <enseq_TECX_NO_OPRIMIDO_default>
}
1a00122c:	bd10      	pop	{r4, pc}

1a00122e <exseq_TECX_VALIDACION>:

/* Default exit sequence for state VALIDACION */
static void exseq_TECX_VALIDACION(Proyecto* handle)
{
	/* Default exit sequence for state VALIDACION */
	handle->stateConfVector[0] = Proyecto_last_state;
1a00122e:	2300      	movs	r3, #0
1a001230:	7003      	strb	r3, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a001232:	6083      	str	r3, [r0, #8]
}
1a001234:	4770      	bx	lr

1a001236 <effect_TECX_VALIDACION_tr0>:
{
1a001236:	b510      	push	{r4, lr}
1a001238:	4604      	mov	r4, r0
	exseq_TECX_VALIDACION(handle);
1a00123a:	f7ff fff8 	bl	1a00122e <exseq_TECX_VALIDACION>
	enseq_TECX_OPRIMIDO_default(handle);
1a00123e:	4620      	mov	r0, r4
1a001240:	f7ff ffba 	bl	1a0011b8 <enseq_TECX_OPRIMIDO_default>
}
1a001244:	bd10      	pop	{r4, pc}

1a001246 <effect_TECX_VALIDACION_tr1>:
{
1a001246:	b510      	push	{r4, lr}
1a001248:	4604      	mov	r4, r0
	exseq_TECX_VALIDACION(handle);
1a00124a:	f7ff fff0 	bl	1a00122e <exseq_TECX_VALIDACION>
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a00124e:	4620      	mov	r0, r4
1a001250:	f7ff ffad 	bl	1a0011ae <enseq_TECX_NO_OPRIMIDO_default>
}
1a001254:	bd10      	pop	{r4, pc}

1a001256 <exseq_Teclas_ESPERA>:

/* Default exit sequence for state ESPERA */
static void exseq_Teclas_ESPERA(Proyecto* handle)
{
	/* Default exit sequence for state ESPERA */
	handle->stateConfVector[1] = Proyecto_last_state;
1a001256:	2300      	movs	r3, #0
1a001258:	7043      	strb	r3, [r0, #1]
	handle->stateConfVectorPosition = 1;
1a00125a:	2301      	movs	r3, #1
1a00125c:	6083      	str	r3, [r0, #8]
}
1a00125e:	4770      	bx	lr

1a001260 <effect_Teclas_ESPERA_tr0>:
{
1a001260:	b510      	push	{r4, lr}
1a001262:	4604      	mov	r4, r0
	exseq_Teclas_ESPERA(handle);
1a001264:	f7ff fff7 	bl	1a001256 <exseq_Teclas_ESPERA>
	handle->internal.switchModo_raised = bool_true;
1a001268:	2301      	movs	r3, #1
1a00126a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	enseq_Teclas_ESPERA_default(handle);
1a00126e:	4620      	mov	r0, r4
1a001270:	f7ff ffb0 	bl	1a0011d4 <enseq_Teclas_ESPERA_default>
}
1a001274:	bd10      	pop	{r4, pc}

1a001276 <effect_Teclas_ESPERA_tr1>:
{
1a001276:	b510      	push	{r4, lr}
1a001278:	4604      	mov	r4, r0
	exseq_Teclas_ESPERA(handle);
1a00127a:	f7ff ffec 	bl	1a001256 <exseq_Teclas_ESPERA>
	handle->internal.arranqueGrupo_raised = bool_true;
1a00127e:	2301      	movs	r3, #1
1a001280:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	enseq_Teclas_ESPERA_default(handle);
1a001284:	4620      	mov	r0, r4
1a001286:	f7ff ffa5 	bl	1a0011d4 <enseq_Teclas_ESPERA_default>
}
1a00128a:	bd10      	pop	{r4, pc}

1a00128c <effect_Teclas_ESPERA_tr2>:
{
1a00128c:	b510      	push	{r4, lr}
1a00128e:	4604      	mov	r4, r0
	exseq_Teclas_ESPERA(handle);
1a001290:	f7ff ffe1 	bl	1a001256 <exseq_Teclas_ESPERA>
	handle->internal.apagadoGrupo_raised = bool_true;
1a001294:	2301      	movs	r3, #1
1a001296:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	enseq_Teclas_ESPERA_default(handle);
1a00129a:	4620      	mov	r0, r4
1a00129c:	f7ff ff9a 	bl	1a0011d4 <enseq_Teclas_ESPERA_default>
}
1a0012a0:	bd10      	pop	{r4, pc}

1a0012a2 <effect_Teclas_ESPERA_tr3>:
{
1a0012a2:	b510      	push	{r4, lr}
1a0012a4:	4604      	mov	r4, r0
	exseq_Teclas_ESPERA(handle);
1a0012a6:	f7ff ffd6 	bl	1a001256 <exseq_Teclas_ESPERA>
	handle->internal.conmutar_raised = bool_true;
1a0012aa:	2301      	movs	r3, #1
1a0012ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	enseq_Teclas_ESPERA_default(handle);
1a0012b0:	4620      	mov	r0, r4
1a0012b2:	f7ff ff8f 	bl	1a0011d4 <enseq_Teclas_ESPERA_default>
}
1a0012b6:	bd10      	pop	{r4, pc}

1a0012b8 <exseq_Modo_Grupo_MANUAL>:

/* Default exit sequence for state MANUAL */
static void exseq_Modo_Grupo_MANUAL(Proyecto* handle)
{
	/* Default exit sequence for state MANUAL */
	handle->stateConfVector[2] = Proyecto_last_state;
1a0012b8:	2300      	movs	r3, #0
1a0012ba:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a0012bc:	2302      	movs	r3, #2
1a0012be:	6083      	str	r3, [r0, #8]
}
1a0012c0:	4770      	bx	lr

1a0012c2 <exseq_Modo_Grupo_AUTOMATICO>:

/* Default exit sequence for state AUTOMATICO */
static void exseq_Modo_Grupo_AUTOMATICO(Proyecto* handle)
{
	/* Default exit sequence for state AUTOMATICO */
	handle->stateConfVector[2] = Proyecto_last_state;
1a0012c2:	2300      	movs	r3, #0
1a0012c4:	7083      	strb	r3, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a0012c6:	2302      	movs	r3, #2
1a0012c8:	6083      	str	r3, [r0, #8]
}
1a0012ca:	4770      	bx	lr

1a0012cc <exseq_Servicio_Red_HAY_LUZ>:

/* Default exit sequence for state HAY_LUZ */
static void exseq_Servicio_Red_HAY_LUZ(Proyecto* handle)
{
	/* Default exit sequence for state HAY_LUZ */
	handle->stateConfVector[3] = Proyecto_last_state;
1a0012cc:	2300      	movs	r3, #0
1a0012ce:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0012d0:	2303      	movs	r3, #3
1a0012d2:	6083      	str	r3, [r0, #8]
}
1a0012d4:	4770      	bx	lr

1a0012d6 <exseq_Servicio_Red_VALIDACION>:

/* Default exit sequence for state VALIDACION */
static void exseq_Servicio_Red_VALIDACION(Proyecto* handle)
{
	/* Default exit sequence for state VALIDACION */
	handle->stateConfVector[3] = Proyecto_last_state;
1a0012d6:	2300      	movs	r3, #0
1a0012d8:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0012da:	2303      	movs	r3, #3
1a0012dc:	6083      	str	r3, [r0, #8]
}
1a0012de:	4770      	bx	lr

1a0012e0 <exseq_Servicio_Red_NO_HAY_LUZ>:

/* Default exit sequence for state NO_HAY_LUZ */
static void exseq_Servicio_Red_NO_HAY_LUZ(Proyecto* handle)
{
	/* Default exit sequence for state NO_HAY_LUZ */
	handle->stateConfVector[3] = Proyecto_last_state;
1a0012e0:	2300      	movs	r3, #0
1a0012e2:	70c3      	strb	r3, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0012e4:	2303      	movs	r3, #3
1a0012e6:	6083      	str	r3, [r0, #8]
}
1a0012e8:	4770      	bx	lr

1a0012ea <exseq_Grupo_Electrogeno_ARRANQUE_EXITO>:

/* Default exit sequence for state ARRANQUE_EXITO */
static void exseq_Grupo_Electrogeno_ARRANQUE_EXITO(Proyecto* handle)
{
	/* Default exit sequence for state ARRANQUE_EXITO */
	handle->stateConfVector[4] = Proyecto_last_state;
1a0012ea:	2300      	movs	r3, #0
1a0012ec:	7103      	strb	r3, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a0012ee:	2304      	movs	r3, #4
1a0012f0:	6083      	str	r3, [r0, #8]
}
1a0012f2:	4770      	bx	lr

1a0012f4 <exseq_Grupo_Electrogeno_FALLA>:

/* Default exit sequence for state FALLA */
static void exseq_Grupo_Electrogeno_FALLA(Proyecto* handle)
{
	/* Default exit sequence for state FALLA */
	handle->stateConfVector[4] = Proyecto_last_state;
1a0012f4:	2300      	movs	r3, #0
1a0012f6:	7103      	strb	r3, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a0012f8:	2304      	movs	r3, #4
1a0012fa:	6083      	str	r3, [r0, #8]
}
1a0012fc:	4770      	bx	lr

1a0012fe <exseq_Grupo_Electrogeno_ESPERA_GRUPO>:

/* Default exit sequence for state ESPERA_GRUPO */
static void exseq_Grupo_Electrogeno_ESPERA_GRUPO(Proyecto* handle)
{
	/* Default exit sequence for state ESPERA_GRUPO */
	handle->stateConfVector[4] = Proyecto_last_state;
1a0012fe:	2300      	movs	r3, #0
1a001300:	7103      	strb	r3, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a001302:	2304      	movs	r3, #4
1a001304:	6083      	str	r3, [r0, #8]
}
1a001306:	4770      	bx	lr

1a001308 <exseq_Grupo_Electrogeno_FIN_ARRANQUE>:

/* Default exit sequence for state FIN_ARRANQUE */
static void exseq_Grupo_Electrogeno_FIN_ARRANQUE(Proyecto* handle)
{
	/* Default exit sequence for state FIN_ARRANQUE */
	handle->stateConfVector[4] = Proyecto_last_state;
1a001308:	2300      	movs	r3, #0
1a00130a:	7103      	strb	r3, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a00130c:	2304      	movs	r3, #4
1a00130e:	6083      	str	r3, [r0, #8]
}
1a001310:	4770      	bx	lr

1a001312 <exseq_Display_IDLE>:

/* Default exit sequence for state IDLE */
static void exseq_Display_IDLE(Proyecto* handle)
{
	/* Default exit sequence for state IDLE */
	handle->stateConfVector[5] = Proyecto_last_state;
1a001312:	2300      	movs	r3, #0
1a001314:	7143      	strb	r3, [r0, #5]
	handle->stateConfVectorPosition = 5;
1a001316:	2305      	movs	r3, #5
1a001318:	6083      	str	r3, [r0, #8]
}
1a00131a:	4770      	bx	lr

1a00131c <exseq_Conmutador_GRUPO_CONMUTADO>:

/* Default exit sequence for state GRUPO_CONMUTADO */
static void exseq_Conmutador_GRUPO_CONMUTADO(Proyecto* handle)
{
	/* Default exit sequence for state GRUPO_CONMUTADO */
	handle->stateConfVector[6] = Proyecto_last_state;
1a00131c:	2300      	movs	r3, #0
1a00131e:	7183      	strb	r3, [r0, #6]
	handle->stateConfVectorPosition = 6;
1a001320:	2306      	movs	r3, #6
1a001322:	6083      	str	r3, [r0, #8]
}
1a001324:	4770      	bx	lr

1a001326 <exseq_Conmutador_RED_CONMUTADA>:

/* Default exit sequence for state RED_CONMUTADA */
static void exseq_Conmutador_RED_CONMUTADA(Proyecto* handle)
{
	/* Default exit sequence for state RED_CONMUTADA */
	handle->stateConfVector[6] = Proyecto_last_state;
1a001326:	2300      	movs	r3, #0
1a001328:	7183      	strb	r3, [r0, #6]
	handle->stateConfVectorPosition = 6;
1a00132a:	2306      	movs	r3, #6
1a00132c:	6083      	str	r3, [r0, #8]
}
1a00132e:	4770      	bx	lr

1a001330 <exseq_Conmutador_CONMUTACION_INICIAL>:

/* Default exit sequence for state CONMUTACION_INICIAL */
static void exseq_Conmutador_CONMUTACION_INICIAL(Proyecto* handle)
{
	/* Default exit sequence for state CONMUTACION_INICIAL */
	handle->stateConfVector[6] = Proyecto_last_state;
1a001330:	2300      	movs	r3, #0
1a001332:	7183      	strb	r3, [r0, #6]
	handle->stateConfVectorPosition = 6;
1a001334:	2306      	movs	r3, #6
1a001336:	6083      	str	r3, [r0, #8]
}
1a001338:	4770      	bx	lr

1a00133a <exseq_Sensor_Temp_IDLE>:

/* Default exit sequence for state IDLE */
static void exseq_Sensor_Temp_IDLE(Proyecto* handle)
{
	/* Default exit sequence for state IDLE */
	handle->stateConfVector[7] = Proyecto_last_state;
1a00133a:	2300      	movs	r3, #0
1a00133c:	71c3      	strb	r3, [r0, #7]
	handle->stateConfVectorPosition = 7;
1a00133e:	2307      	movs	r3, #7
1a001340:	6083      	str	r3, [r0, #8]
}
1a001342:	4770      	bx	lr

1a001344 <react_TECX_OPRIMIDO>:
	} 
}

/* The reactions of state OPRIMIDO. */
static void react_TECX_OPRIMIDO(Proyecto* handle)
{
1a001344:	b510      	push	{r4, lr}
1a001346:	4604      	mov	r4, r0
	/* The reactions of state OPRIMIDO. */
	if (check_TECX_OPRIMIDO_tr0_tr0(handle) == bool_true)
1a001348:	f7ff fda5 	bl	1a000e96 <check_TECX_OPRIMIDO_tr0_tr0>
1a00134c:	b900      	cbnz	r0, 1a001350 <react_TECX_OPRIMIDO+0xc>
	{ 
		effect_TECX_OPRIMIDO_tr0(handle);
	} 
}
1a00134e:	bd10      	pop	{r4, pc}
		effect_TECX_OPRIMIDO_tr0(handle);
1a001350:	4620      	mov	r0, r4
1a001352:	f7ff ff64 	bl	1a00121e <effect_TECX_OPRIMIDO_tr0>
}
1a001356:	e7fa      	b.n	1a00134e <react_TECX_OPRIMIDO+0xa>

1a001358 <react_TECX_VALIDACION>:

/* The reactions of state VALIDACION. */
static void react_TECX_VALIDACION(Proyecto* handle)
{
1a001358:	b510      	push	{r4, lr}
1a00135a:	4604      	mov	r4, r0
	/* The reactions of state VALIDACION. */
	if (check_TECX_VALIDACION_tr0_tr0(handle) == bool_true)
1a00135c:	f7ff fd9d 	bl	1a000e9a <check_TECX_VALIDACION_tr0_tr0>
1a001360:	b920      	cbnz	r0, 1a00136c <react_TECX_VALIDACION+0x14>
	{ 
		effect_TECX_VALIDACION_tr0(handle);
	}  else
	{
		if (check_TECX_VALIDACION_tr1_tr1(handle) == bool_true)
1a001362:	4620      	mov	r0, r4
1a001364:	f7ff fd9b 	bl	1a000e9e <check_TECX_VALIDACION_tr1_tr1>
1a001368:	b920      	cbnz	r0, 1a001374 <react_TECX_VALIDACION+0x1c>
		{ 
			effect_TECX_VALIDACION_tr1(handle);
		} 
	}
}
1a00136a:	bd10      	pop	{r4, pc}
		effect_TECX_VALIDACION_tr0(handle);
1a00136c:	4620      	mov	r0, r4
1a00136e:	f7ff ff62 	bl	1a001236 <effect_TECX_VALIDACION_tr0>
1a001372:	e7fa      	b.n	1a00136a <react_TECX_VALIDACION+0x12>
			effect_TECX_VALIDACION_tr1(handle);
1a001374:	4620      	mov	r0, r4
1a001376:	f7ff ff66 	bl	1a001246 <effect_TECX_VALIDACION_tr1>
}
1a00137a:	e7f6      	b.n	1a00136a <react_TECX_VALIDACION+0x12>

1a00137c <react_Teclas_ESPERA>:

/* The reactions of state ESPERA. */
static void react_Teclas_ESPERA(Proyecto* handle)
{
1a00137c:	b510      	push	{r4, lr}
1a00137e:	4604      	mov	r4, r0
	/* The reactions of state ESPERA. */
	if (check_Teclas_ESPERA_tr0_tr0(handle) == bool_true)
1a001380:	f7ff fd8f 	bl	1a000ea2 <check_Teclas_ESPERA_tr0_tr0>
1a001384:	b978      	cbnz	r0, 1a0013a6 <react_Teclas_ESPERA+0x2a>
	{ 
		effect_Teclas_ESPERA_tr0(handle);
	}  else
	{
		if (check_Teclas_ESPERA_tr1_tr1(handle) == bool_true)
1a001386:	4620      	mov	r0, r4
1a001388:	f7ff fd97 	bl	1a000eba <check_Teclas_ESPERA_tr1_tr1>
1a00138c:	b978      	cbnz	r0, 1a0013ae <react_Teclas_ESPERA+0x32>
		{ 
			effect_Teclas_ESPERA_tr1(handle);
		}  else
		{
			if (check_Teclas_ESPERA_tr2_tr2(handle) == bool_true)
1a00138e:	4620      	mov	r0, r4
1a001390:	f7ff fda9 	bl	1a000ee6 <check_Teclas_ESPERA_tr2_tr2>
1a001394:	b978      	cbnz	r0, 1a0013b6 <react_Teclas_ESPERA+0x3a>
			{ 
				effect_Teclas_ESPERA_tr2(handle);
			}  else
			{
				if (check_Teclas_ESPERA_tr3_tr3(handle) == bool_true)
1a001396:	4620      	mov	r0, r4
1a001398:	f7ff fdb6 	bl	1a000f08 <check_Teclas_ESPERA_tr3_tr3>
1a00139c:	b130      	cbz	r0, 1a0013ac <react_Teclas_ESPERA+0x30>
				{ 
					effect_Teclas_ESPERA_tr3(handle);
1a00139e:	4620      	mov	r0, r4
1a0013a0:	f7ff ff7f 	bl	1a0012a2 <effect_Teclas_ESPERA_tr3>
				} 
			}
		}
	}
}
1a0013a4:	e002      	b.n	1a0013ac <react_Teclas_ESPERA+0x30>
		effect_Teclas_ESPERA_tr0(handle);
1a0013a6:	4620      	mov	r0, r4
1a0013a8:	f7ff ff5a 	bl	1a001260 <effect_Teclas_ESPERA_tr0>
}
1a0013ac:	bd10      	pop	{r4, pc}
			effect_Teclas_ESPERA_tr1(handle);
1a0013ae:	4620      	mov	r0, r4
1a0013b0:	f7ff ff61 	bl	1a001276 <effect_Teclas_ESPERA_tr1>
1a0013b4:	e7fa      	b.n	1a0013ac <react_Teclas_ESPERA+0x30>
				effect_Teclas_ESPERA_tr2(handle);
1a0013b6:	4620      	mov	r0, r4
1a0013b8:	f7ff ff68 	bl	1a00128c <effect_Teclas_ESPERA_tr2>
1a0013bc:	e7f6      	b.n	1a0013ac <react_Teclas_ESPERA+0x30>

1a0013be <react_TECX__entry_Default>:
	} 
}

/* Default react sequence for initial entry  */
static void react_TECX__entry_Default(Proyecto* handle)
{
1a0013be:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_TECX_NO_OPRIMIDO_default(handle);
1a0013c0:	f7ff fef5 	bl	1a0011ae <enseq_TECX_NO_OPRIMIDO_default>
}
1a0013c4:	bd08      	pop	{r3, pc}

1a0013c6 <enseq_TECX_default>:
{
1a0013c6:	b508      	push	{r3, lr}
	react_TECX__entry_Default(handle);
1a0013c8:	f7ff fff9 	bl	1a0013be <react_TECX__entry_Default>
}
1a0013cc:	bd08      	pop	{r3, pc}

1a0013ce <react_Teclas__entry_Default>:

/* Default react sequence for initial entry  */
static void react_Teclas__entry_Default(Proyecto* handle)
{
1a0013ce:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_Teclas_ESPERA_default(handle);
1a0013d0:	f7ff ff00 	bl	1a0011d4 <enseq_Teclas_ESPERA_default>
}
1a0013d4:	bd08      	pop	{r3, pc}

1a0013d6 <enseq_Teclas_default>:
{
1a0013d6:	b508      	push	{r3, lr}
	react_Teclas__entry_Default(handle);
1a0013d8:	f7ff fff9 	bl	1a0013ce <react_Teclas__entry_Default>
}
1a0013dc:	bd08      	pop	{r3, pc}

1a0013de <react_Display__entry_Default>:
	enseq_Grupo_Electrogeno_ESPERA_GRUPO_default(handle);
}

/* Default react sequence for initial entry  */
static void react_Display__entry_Default(Proyecto* handle)
{
1a0013de:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_Display_IDLE_default(handle);
1a0013e0:	f7ff ff0b 	bl	1a0011fa <enseq_Display_IDLE_default>
}
1a0013e4:	bd08      	pop	{r3, pc}

1a0013e6 <enseq_Display_default>:
{
1a0013e6:	b508      	push	{r3, lr}
	react_Display__entry_Default(handle);
1a0013e8:	f7ff fff9 	bl	1a0013de <react_Display__entry_Default>
}
1a0013ec:	bd08      	pop	{r3, pc}

1a0013ee <react_Sensor_Temp__entry_Default>:
	enseq_Conmutador_CONMUTACION_INICIAL_default(handle);
}

/* Default react sequence for initial entry  */
static void react_Sensor_Temp__entry_Default(Proyecto* handle)
{
1a0013ee:	b508      	push	{r3, lr}
	/* Default react sequence for initial entry  */
	enseq_Sensor_Temp_IDLE_default(handle);
1a0013f0:	f7ff ff08 	bl	1a001204 <enseq_Sensor_Temp_IDLE_default>
}
1a0013f4:	bd08      	pop	{r3, pc}

1a0013f6 <enseq_Sensor_Temp_default>:
{
1a0013f6:	b508      	push	{r3, lr}
	react_Sensor_Temp__entry_Default(handle);
1a0013f8:	f7ff fff9 	bl	1a0013ee <react_Sensor_Temp__entry_Default>
}
1a0013fc:	bd08      	pop	{r3, pc}

1a0013fe <enact_Modo_Grupo_MANUAL>:
{
1a0013fe:	b508      	push	{r3, lr}
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LEDB, PROYECTO_PROYECTOIFACE_LED_OFF);
1a001400:	2200      	movs	r2, #0
1a001402:	2102      	movs	r1, #2
1a001404:	f7fe ff98 	bl	1a000338 <proyectoIface_opLED>
}
1a001408:	bd08      	pop	{r3, pc}

1a00140a <enseq_Modo_Grupo_MANUAL_default>:
{
1a00140a:	b510      	push	{r4, lr}
1a00140c:	4604      	mov	r4, r0
	enact_Modo_Grupo_MANUAL(handle);
1a00140e:	f7ff fff6 	bl	1a0013fe <enact_Modo_Grupo_MANUAL>
	handle->stateConfVector[2] = Proyecto_Modo_Grupo_MANUAL;
1a001412:	2306      	movs	r3, #6
1a001414:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a001416:	2302      	movs	r3, #2
1a001418:	60a3      	str	r3, [r4, #8]
}
1a00141a:	bd10      	pop	{r4, pc}

1a00141c <react_Modo_Grupo__entry_Default>:
{
1a00141c:	b508      	push	{r3, lr}
	enseq_Modo_Grupo_MANUAL_default(handle);
1a00141e:	f7ff fff4 	bl	1a00140a <enseq_Modo_Grupo_MANUAL_default>
}
1a001422:	bd08      	pop	{r3, pc}

1a001424 <enseq_Modo_Grupo_default>:
{
1a001424:	b508      	push	{r3, lr}
	react_Modo_Grupo__entry_Default(handle);
1a001426:	f7ff fff9 	bl	1a00141c <react_Modo_Grupo__entry_Default>
}
1a00142a:	bd08      	pop	{r3, pc}

1a00142c <enact_Servicio_Red_HAY_LUZ>:
{
1a00142c:	b510      	push	{r4, lr}
1a00142e:	4604      	mov	r4, r0
	handle->internal.siRedON_raised = bool_true;
1a001430:	2301      	movs	r3, #1
1a001432:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LED1, PROYECTO_PROYECTOIFACE_LED_OFF);
1a001436:	2200      	movs	r2, #0
1a001438:	2103      	movs	r1, #3
1a00143a:	f7fe ff7d 	bl	1a000338 <proyectoIface_opLED>
	handle->iface.estadoLuz = 0;
1a00143e:	2300      	movs	r3, #0
1a001440:	61e3      	str	r3, [r4, #28]
}
1a001442:	bd10      	pop	{r4, pc}

1a001444 <enseq_Servicio_Red_HAY_LUZ_default>:
{
1a001444:	b510      	push	{r4, lr}
1a001446:	4604      	mov	r4, r0
	enact_Servicio_Red_HAY_LUZ(handle);
1a001448:	f7ff fff0 	bl	1a00142c <enact_Servicio_Red_HAY_LUZ>
	handle->stateConfVector[3] = Proyecto_Servicio_Red_HAY_LUZ;
1a00144c:	2309      	movs	r3, #9
1a00144e:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a001450:	2303      	movs	r3, #3
1a001452:	60a3      	str	r3, [r4, #8]
}
1a001454:	bd10      	pop	{r4, pc}

1a001456 <react_Servicio_Red__entry_Default>:
{
1a001456:	b508      	push	{r3, lr}
	enseq_Servicio_Red_HAY_LUZ_default(handle);
1a001458:	f7ff fff4 	bl	1a001444 <enseq_Servicio_Red_HAY_LUZ_default>
}
1a00145c:	bd08      	pop	{r3, pc}

1a00145e <enseq_Servicio_Red_default>:
{
1a00145e:	b508      	push	{r3, lr}
	react_Servicio_Red__entry_Default(handle);
1a001460:	f7ff fff9 	bl	1a001456 <react_Servicio_Red__entry_Default>
}
1a001464:	bd08      	pop	{r3, pc}

1a001466 <effect_Servicio_Red_VALIDACION_tr0>:
{
1a001466:	b510      	push	{r4, lr}
1a001468:	4604      	mov	r4, r0
	exseq_Servicio_Red_VALIDACION(handle);
1a00146a:	f7ff ff34 	bl	1a0012d6 <exseq_Servicio_Red_VALIDACION>
	enseq_Servicio_Red_HAY_LUZ_default(handle);
1a00146e:	4620      	mov	r0, r4
1a001470:	f7ff ffe8 	bl	1a001444 <enseq_Servicio_Red_HAY_LUZ_default>
}
1a001474:	bd10      	pop	{r4, pc}

1a001476 <enact_Grupo_Electrogeno_ESPERA_GRUPO>:
{
1a001476:	b508      	push	{r3, lr}
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LED2, PROYECTO_PROYECTOIFACE_LED_OFF);
1a001478:	2200      	movs	r2, #0
1a00147a:	2104      	movs	r1, #4
1a00147c:	f7fe ff5c 	bl	1a000338 <proyectoIface_opLED>
}
1a001480:	bd08      	pop	{r3, pc}

1a001482 <enseq_Grupo_Electrogeno_ESPERA_GRUPO_default>:
{
1a001482:	b510      	push	{r4, lr}
1a001484:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_ESPERA_GRUPO(handle);
1a001486:	f7ff fff6 	bl	1a001476 <enact_Grupo_Electrogeno_ESPERA_GRUPO>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_ESPERA_GRUPO;
1a00148a:	2314      	movs	r3, #20
1a00148c:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a00148e:	2304      	movs	r3, #4
1a001490:	60a3      	str	r3, [r4, #8]
}
1a001492:	bd10      	pop	{r4, pc}

1a001494 <react_Grupo_Electrogeno__entry_Default>:
{
1a001494:	b508      	push	{r3, lr}
	enseq_Grupo_Electrogeno_ESPERA_GRUPO_default(handle);
1a001496:	f7ff fff4 	bl	1a001482 <enseq_Grupo_Electrogeno_ESPERA_GRUPO_default>
}
1a00149a:	bd08      	pop	{r3, pc}

1a00149c <enseq_Grupo_Electrogeno_default>:
{
1a00149c:	b508      	push	{r3, lr}
	react_Grupo_Electrogeno__entry_Default(handle);
1a00149e:	f7ff fff9 	bl	1a001494 <react_Grupo_Electrogeno__entry_Default>
}
1a0014a2:	bd08      	pop	{r3, pc}

1a0014a4 <enact_Modo_Grupo_AUTOMATICO>:
{
1a0014a4:	b508      	push	{r3, lr}
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LEDB, PROYECTO_PROYECTOIFACE_LED_ON);
1a0014a6:	2201      	movs	r2, #1
1a0014a8:	2102      	movs	r1, #2
1a0014aa:	f7fe ff45 	bl	1a000338 <proyectoIface_opLED>
}
1a0014ae:	bd08      	pop	{r3, pc}

1a0014b0 <enseq_Modo_Grupo_AUTOMATICO_default>:
{
1a0014b0:	b510      	push	{r4, lr}
1a0014b2:	4604      	mov	r4, r0
	enact_Modo_Grupo_AUTOMATICO(handle);
1a0014b4:	f7ff fff6 	bl	1a0014a4 <enact_Modo_Grupo_AUTOMATICO>
	handle->stateConfVector[2] = Proyecto_Modo_Grupo_AUTOMATICO;
1a0014b8:	2307      	movs	r3, #7
1a0014ba:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a0014bc:	2302      	movs	r3, #2
1a0014be:	60a3      	str	r3, [r4, #8]
}
1a0014c0:	bd10      	pop	{r4, pc}

1a0014c2 <enact_Servicio_Red_NO_HAY_LUZ>:
{
1a0014c2:	b538      	push	{r3, r4, r5, lr}
1a0014c4:	4605      	mov	r5, r0
	handle->internal.siRedOFF_raised = bool_true;
1a0014c6:	2401      	movs	r4, #1
1a0014c8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LED1, PROYECTO_PROYECTOIFACE_LED_ON);
1a0014cc:	4622      	mov	r2, r4
1a0014ce:	2103      	movs	r1, #3
1a0014d0:	f7fe ff32 	bl	1a000338 <proyectoIface_opLED>
	handle->iface.estadoLuz = 1;
1a0014d4:	61ec      	str	r4, [r5, #28]
}
1a0014d6:	bd38      	pop	{r3, r4, r5, pc}

1a0014d8 <enseq_Servicio_Red_NO_HAY_LUZ_default>:
{
1a0014d8:	b510      	push	{r4, lr}
1a0014da:	4604      	mov	r4, r0
	enact_Servicio_Red_NO_HAY_LUZ(handle);
1a0014dc:	f7ff fff1 	bl	1a0014c2 <enact_Servicio_Red_NO_HAY_LUZ>
	handle->stateConfVector[3] = Proyecto_Servicio_Red_NO_HAY_LUZ;
1a0014e0:	230c      	movs	r3, #12
1a0014e2:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a0014e4:	2303      	movs	r3, #3
1a0014e6:	60a3      	str	r3, [r4, #8]
}
1a0014e8:	bd10      	pop	{r4, pc}

1a0014ea <effect_Servicio_Red_VALIDACION_tr1>:
{
1a0014ea:	b510      	push	{r4, lr}
1a0014ec:	4604      	mov	r4, r0
	exseq_Servicio_Red_VALIDACION(handle);
1a0014ee:	f7ff fef2 	bl	1a0012d6 <exseq_Servicio_Red_VALIDACION>
	enseq_Servicio_Red_NO_HAY_LUZ_default(handle);
1a0014f2:	4620      	mov	r0, r4
1a0014f4:	f7ff fff0 	bl	1a0014d8 <enseq_Servicio_Red_NO_HAY_LUZ_default>
}
1a0014f8:	bd10      	pop	{r4, pc}

1a0014fa <react_Servicio_Red_VALIDACION>:
{
1a0014fa:	b510      	push	{r4, lr}
1a0014fc:	4604      	mov	r4, r0
	if (check_Servicio_Red_VALIDACION_tr0_tr0(handle) == bool_true)
1a0014fe:	f7ff fd36 	bl	1a000f6e <check_Servicio_Red_VALIDACION_tr0_tr0>
1a001502:	b920      	cbnz	r0, 1a00150e <react_Servicio_Red_VALIDACION+0x14>
		if (check_Servicio_Red_VALIDACION_tr1_tr1(handle) == bool_true)
1a001504:	4620      	mov	r0, r4
1a001506:	f7ff fd34 	bl	1a000f72 <check_Servicio_Red_VALIDACION_tr1_tr1>
1a00150a:	b920      	cbnz	r0, 1a001516 <react_Servicio_Red_VALIDACION+0x1c>
}
1a00150c:	bd10      	pop	{r4, pc}
		effect_Servicio_Red_VALIDACION_tr0(handle);
1a00150e:	4620      	mov	r0, r4
1a001510:	f7ff ffa9 	bl	1a001466 <effect_Servicio_Red_VALIDACION_tr0>
1a001514:	e7fa      	b.n	1a00150c <react_Servicio_Red_VALIDACION+0x12>
			effect_Servicio_Red_VALIDACION_tr1(handle);
1a001516:	4620      	mov	r0, r4
1a001518:	f7ff ffe7 	bl	1a0014ea <effect_Servicio_Red_VALIDACION_tr1>
}
1a00151c:	e7f6      	b.n	1a00150c <react_Servicio_Red_VALIDACION+0x12>

1a00151e <enact_Grupo_Electrogeno_FALLA>:
{
1a00151e:	b508      	push	{r3, lr}
	handle->iface.grupoFalla = bool_true;
1a001520:	2101      	movs	r1, #1
1a001522:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LEDG, PROYECTO_PROYECTOIFACE_LED_ON);
1a001526:	460a      	mov	r2, r1
1a001528:	f7fe ff06 	bl	1a000338 <proyectoIface_opLED>
}
1a00152c:	bd08      	pop	{r3, pc}

1a00152e <enseq_Grupo_Electrogeno_FALLA_default>:
{
1a00152e:	b510      	push	{r4, lr}
1a001530:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_FALLA(handle);
1a001532:	f7ff fff4 	bl	1a00151e <enact_Grupo_Electrogeno_FALLA>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_FALLA;
1a001536:	2310      	movs	r3, #16
1a001538:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a00153a:	2304      	movs	r3, #4
1a00153c:	60a3      	str	r3, [r4, #8]
}
1a00153e:	bd10      	pop	{r4, pc}

1a001540 <enact_Conmutador_CONMUTACION_INICIAL>:
{
1a001540:	b538      	push	{r3, r4, r5, lr}
1a001542:	4605      	mov	r5, r0
	handle->iface.conmutacionRed = 0;
1a001544:	2400      	movs	r4, #0
1a001546:	6304      	str	r4, [r0, #48]	; 0x30
	handle->iface.conmutacionGrupo = 0;
1a001548:	6344      	str	r4, [r0, #52]	; 0x34
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO5, PROYECTO_PROYECTOIFACE_OUT_OFF);
1a00154a:	4622      	mov	r2, r4
1a00154c:	210d      	movs	r1, #13
1a00154e:	f7fe fefb 	bl	1a000348 <proyectoIface_switchSalida>
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO7, PROYECTO_PROYECTOIFACE_OUT_OFF);
1a001552:	4622      	mov	r2, r4
1a001554:	210c      	movs	r1, #12
1a001556:	4628      	mov	r0, r5
1a001558:	f7fe fef6 	bl	1a000348 <proyectoIface_switchSalida>
}
1a00155c:	bd38      	pop	{r3, r4, r5, pc}

1a00155e <enseq_Conmutador_CONMUTACION_INICIAL_default>:
{
1a00155e:	b510      	push	{r4, lr}
1a001560:	4604      	mov	r4, r0
	enact_Conmutador_CONMUTACION_INICIAL(handle);
1a001562:	f7ff ffed 	bl	1a001540 <enact_Conmutador_CONMUTACION_INICIAL>
	handle->stateConfVector[6] = Proyecto_Conmutador_CONMUTACION_INICIAL;
1a001566:	231c      	movs	r3, #28
1a001568:	71a3      	strb	r3, [r4, #6]
	handle->stateConfVectorPosition = 6;
1a00156a:	2306      	movs	r3, #6
1a00156c:	60a3      	str	r3, [r4, #8]
}
1a00156e:	bd10      	pop	{r4, pc}

1a001570 <react_Conmutador__entry_Default>:
{
1a001570:	b508      	push	{r3, lr}
	enseq_Conmutador_CONMUTACION_INICIAL_default(handle);
1a001572:	f7ff fff4 	bl	1a00155e <enseq_Conmutador_CONMUTACION_INICIAL_default>
}
1a001576:	bd08      	pop	{r3, pc}

1a001578 <enseq_Conmutador_default>:
{
1a001578:	b508      	push	{r3, lr}
	react_Conmutador__entry_Default(handle);
1a00157a:	f7ff fff9 	bl	1a001570 <react_Conmutador__entry_Default>
}
1a00157e:	bd08      	pop	{r3, pc}

1a001580 <enact_Grupo_Electrogeno_FIN_ARRANQUE>:
{
1a001580:	b508      	push	{r3, lr}
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO1, PROYECTO_PROYECTOIFACE_OUT_OFF);
1a001582:	2200      	movs	r2, #0
1a001584:	210f      	movs	r1, #15
1a001586:	f7fe fedf 	bl	1a000348 <proyectoIface_switchSalida>
}
1a00158a:	bd08      	pop	{r3, pc}

1a00158c <enseq_Grupo_Electrogeno_FIN_ARRANQUE_default>:
{
1a00158c:	b510      	push	{r4, lr}
1a00158e:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_FIN_ARRANQUE(handle);
1a001590:	f7ff fff6 	bl	1a001580 <enact_Grupo_Electrogeno_FIN_ARRANQUE>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_FIN_ARRANQUE;
1a001594:	2316      	movs	r3, #22
1a001596:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a001598:	2304      	movs	r3, #4
1a00159a:	60a3      	str	r3, [r4, #8]
}
1a00159c:	bd10      	pop	{r4, pc}

1a00159e <enact_Conmutador_RED_CONMUTADA>:
{
1a00159e:	b510      	push	{r4, lr}
1a0015a0:	4604      	mov	r4, r0
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO5, PROYECTO_PROYECTOIFACE_OUT_ON);
1a0015a2:	2201      	movs	r2, #1
1a0015a4:	210d      	movs	r1, #13
1a0015a6:	f7fe fecf 	bl	1a000348 <proyectoIface_switchSalida>
	handle->iface.conmutacionRed = 1;
1a0015aa:	2301      	movs	r3, #1
1a0015ac:	6323      	str	r3, [r4, #48]	; 0x30
}
1a0015ae:	bd10      	pop	{r4, pc}

1a0015b0 <enseq_Conmutador_RED_CONMUTADA_default>:
{
1a0015b0:	b510      	push	{r4, lr}
1a0015b2:	4604      	mov	r4, r0
	enact_Conmutador_RED_CONMUTADA(handle);
1a0015b4:	f7ff fff3 	bl	1a00159e <enact_Conmutador_RED_CONMUTADA>
	handle->stateConfVector[6] = Proyecto_Conmutador_RED_CONMUTADA;
1a0015b8:	231a      	movs	r3, #26
1a0015ba:	71a3      	strb	r3, [r4, #6]
	handle->stateConfVectorPosition = 6;
1a0015bc:	2306      	movs	r3, #6
1a0015be:	60a3      	str	r3, [r4, #8]
}
1a0015c0:	bd10      	pop	{r4, pc}

1a0015c2 <effect_Conmutador_CONMUTACION_INICIAL_tr0>:
{
1a0015c2:	b510      	push	{r4, lr}
1a0015c4:	4604      	mov	r4, r0
	exseq_Conmutador_CONMUTACION_INICIAL(handle);
1a0015c6:	f7ff feb3 	bl	1a001330 <exseq_Conmutador_CONMUTACION_INICIAL>
	enseq_Conmutador_RED_CONMUTADA_default(handle);
1a0015ca:	4620      	mov	r0, r4
1a0015cc:	f7ff fff0 	bl	1a0015b0 <enseq_Conmutador_RED_CONMUTADA_default>
}
1a0015d0:	bd10      	pop	{r4, pc}

1a0015d2 <react_Conmutador_CONMUTACION_INICIAL>:
{
1a0015d2:	b510      	push	{r4, lr}
1a0015d4:	4604      	mov	r4, r0
	if (check_Conmutador_CONMUTACION_INICIAL_tr0_tr0(handle) == bool_true)
1a0015d6:	f7ff fdd3 	bl	1a001180 <check_Conmutador_CONMUTACION_INICIAL_tr0_tr0>
1a0015da:	b900      	cbnz	r0, 1a0015de <react_Conmutador_CONMUTACION_INICIAL+0xc>
}
1a0015dc:	bd10      	pop	{r4, pc}
		effect_Conmutador_CONMUTACION_INICIAL_tr0(handle);
1a0015de:	4620      	mov	r0, r4
1a0015e0:	f7ff ffef 	bl	1a0015c2 <effect_Conmutador_CONMUTACION_INICIAL_tr0>
}
1a0015e4:	e7fa      	b.n	1a0015dc <react_Conmutador_CONMUTACION_INICIAL+0xa>

1a0015e6 <enact_Conmutador_GRUPO_CONMUTADO>:
{
1a0015e6:	b510      	push	{r4, lr}
1a0015e8:	4604      	mov	r4, r0
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LED3, PROYECTO_PROYECTOIFACE_LED_ON);
1a0015ea:	2201      	movs	r2, #1
1a0015ec:	2105      	movs	r1, #5
1a0015ee:	f7fe fea3 	bl	1a000338 <proyectoIface_opLED>
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO7, PROYECTO_PROYECTOIFACE_OUT_ON);
1a0015f2:	2201      	movs	r2, #1
1a0015f4:	210c      	movs	r1, #12
1a0015f6:	4620      	mov	r0, r4
1a0015f8:	f7fe fea6 	bl	1a000348 <proyectoIface_switchSalida>
	handle->iface.conmutacionGrupo = 1;
1a0015fc:	2301      	movs	r3, #1
1a0015fe:	6363      	str	r3, [r4, #52]	; 0x34
}
1a001600:	bd10      	pop	{r4, pc}

1a001602 <enseq_Conmutador_GRUPO_CONMUTADO_default>:
{
1a001602:	b510      	push	{r4, lr}
1a001604:	4604      	mov	r4, r0
	enact_Conmutador_GRUPO_CONMUTADO(handle);
1a001606:	f7ff ffee 	bl	1a0015e6 <enact_Conmutador_GRUPO_CONMUTADO>
	handle->stateConfVector[6] = Proyecto_Conmutador_GRUPO_CONMUTADO;
1a00160a:	2319      	movs	r3, #25
1a00160c:	71a3      	strb	r3, [r4, #6]
	handle->stateConfVectorPosition = 6;
1a00160e:	2306      	movs	r3, #6
1a001610:	60a3      	str	r3, [r4, #8]
}
1a001612:	bd10      	pop	{r4, pc}

1a001614 <exact_TECX_DEBOUNCE>:
{
1a001614:	b508      	push	{r3, lr}
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_TECX_DEBOUNCE_tev0_raised) );		
1a001616:	f100 0150 	add.w	r1, r0, #80	; 0x50
1a00161a:	f7ff f813 	bl	1a000644 <proyecto_unsetTimer>
}
1a00161e:	bd08      	pop	{r3, pc}

1a001620 <exseq_TECX_DEBOUNCE>:
{
1a001620:	b508      	push	{r3, lr}
	handle->stateConfVector[0] = Proyecto_last_state;
1a001622:	2200      	movs	r2, #0
1a001624:	7002      	strb	r2, [r0, #0]
	handle->stateConfVectorPosition = 0;
1a001626:	6082      	str	r2, [r0, #8]
	exact_TECX_DEBOUNCE(handle);
1a001628:	f7ff fff4 	bl	1a001614 <exact_TECX_DEBOUNCE>
}
1a00162c:	bd08      	pop	{r3, pc}

1a00162e <effect_TECX_DEBOUNCE_tr0>:
{
1a00162e:	b510      	push	{r4, lr}
1a001630:	4604      	mov	r4, r0
	exseq_TECX_DEBOUNCE(handle);
1a001632:	f7ff fff5 	bl	1a001620 <exseq_TECX_DEBOUNCE>
	enseq_TECX_VALIDACION_default(handle);
1a001636:	4620      	mov	r0, r4
1a001638:	f7ff fdc7 	bl	1a0011ca <enseq_TECX_VALIDACION_default>
}
1a00163c:	bd10      	pop	{r4, pc}

1a00163e <react_TECX_DEBOUNCE>:
{
1a00163e:	b510      	push	{r4, lr}
1a001640:	4604      	mov	r4, r0
	if (check_TECX_DEBOUNCE_tr0_tr0(handle) == bool_true)
1a001642:	f7ff fc23 	bl	1a000e8c <check_TECX_DEBOUNCE_tr0_tr0>
1a001646:	b900      	cbnz	r0, 1a00164a <react_TECX_DEBOUNCE+0xc>
}
1a001648:	bd10      	pop	{r4, pc}
		effect_TECX_DEBOUNCE_tr0(handle);
1a00164a:	4620      	mov	r0, r4
1a00164c:	f7ff ffef 	bl	1a00162e <effect_TECX_DEBOUNCE_tr0>
}
1a001650:	e7fa      	b.n	1a001648 <react_TECX_DEBOUNCE+0xa>

1a001652 <exact_Modo_Grupo_TRANSICION_MODOS>:
{
1a001652:	b510      	push	{r4, lr}
1a001654:	4604      	mov	r4, r0
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Modo_Grupo_TRANSICION_MODOS_tev0_raised) );		
1a001656:	f100 0151 	add.w	r1, r0, #81	; 0x51
1a00165a:	f7fe fff3 	bl	1a000644 <proyecto_unsetTimer>
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Modo_Grupo_TRANSICION_MODOS_tev1_raised) );		
1a00165e:	f104 0152 	add.w	r1, r4, #82	; 0x52
1a001662:	4620      	mov	r0, r4
1a001664:	f7fe ffee 	bl	1a000644 <proyecto_unsetTimer>
}
1a001668:	bd10      	pop	{r4, pc}

1a00166a <exseq_Modo_Grupo_TRANSICION_MODOS>:
{
1a00166a:	b508      	push	{r3, lr}
	handle->stateConfVector[2] = Proyecto_last_state;
1a00166c:	2200      	movs	r2, #0
1a00166e:	7082      	strb	r2, [r0, #2]
	handle->stateConfVectorPosition = 2;
1a001670:	2202      	movs	r2, #2
1a001672:	6082      	str	r2, [r0, #8]
	exact_Modo_Grupo_TRANSICION_MODOS(handle);
1a001674:	f7ff ffed 	bl	1a001652 <exact_Modo_Grupo_TRANSICION_MODOS>
}
1a001678:	bd08      	pop	{r3, pc}

1a00167a <effect_Modo_Grupo_TRANSICION_MODOS_tr0>:
{
1a00167a:	b510      	push	{r4, lr}
1a00167c:	4604      	mov	r4, r0
	exseq_Modo_Grupo_TRANSICION_MODOS(handle);
1a00167e:	f7ff fff4 	bl	1a00166a <exseq_Modo_Grupo_TRANSICION_MODOS>
	enseq_Modo_Grupo_MANUAL_default(handle);
1a001682:	4620      	mov	r0, r4
1a001684:	f7ff fec1 	bl	1a00140a <enseq_Modo_Grupo_MANUAL_default>
}
1a001688:	bd10      	pop	{r4, pc}

1a00168a <effect_Modo_Grupo_TRANSICION_MODOS_tr1>:
{
1a00168a:	b510      	push	{r4, lr}
1a00168c:	4604      	mov	r4, r0
	exseq_Modo_Grupo_TRANSICION_MODOS(handle);
1a00168e:	f7ff ffec 	bl	1a00166a <exseq_Modo_Grupo_TRANSICION_MODOS>
	enseq_Modo_Grupo_AUTOMATICO_default(handle);
1a001692:	4620      	mov	r0, r4
1a001694:	f7ff ff0c 	bl	1a0014b0 <enseq_Modo_Grupo_AUTOMATICO_default>
}
1a001698:	bd10      	pop	{r4, pc}

1a00169a <react_Modo_Grupo_TRANSICION_MODOS>:
{
1a00169a:	b510      	push	{r4, lr}
1a00169c:	4604      	mov	r4, r0
	if (check_Modo_Grupo_TRANSICION_MODOS_tr0_tr0(handle) == bool_true)
1a00169e:	f7ff fc4a 	bl	1a000f36 <check_Modo_Grupo_TRANSICION_MODOS_tr0_tr0>
1a0016a2:	b920      	cbnz	r0, 1a0016ae <react_Modo_Grupo_TRANSICION_MODOS+0x14>
		if (check_Modo_Grupo_TRANSICION_MODOS_tr1_tr1(handle) == bool_true)
1a0016a4:	4620      	mov	r0, r4
1a0016a6:	f7ff fc52 	bl	1a000f4e <check_Modo_Grupo_TRANSICION_MODOS_tr1_tr1>
1a0016aa:	b920      	cbnz	r0, 1a0016b6 <react_Modo_Grupo_TRANSICION_MODOS+0x1c>
}
1a0016ac:	bd10      	pop	{r4, pc}
		effect_Modo_Grupo_TRANSICION_MODOS_tr0(handle);
1a0016ae:	4620      	mov	r0, r4
1a0016b0:	f7ff ffe3 	bl	1a00167a <effect_Modo_Grupo_TRANSICION_MODOS_tr0>
1a0016b4:	e7fa      	b.n	1a0016ac <react_Modo_Grupo_TRANSICION_MODOS+0x12>
			effect_Modo_Grupo_TRANSICION_MODOS_tr1(handle);
1a0016b6:	4620      	mov	r0, r4
1a0016b8:	f7ff ffe7 	bl	1a00168a <effect_Modo_Grupo_TRANSICION_MODOS_tr1>
}
1a0016bc:	e7f6      	b.n	1a0016ac <react_Modo_Grupo_TRANSICION_MODOS+0x12>

1a0016be <exact_Servicio_Red_ESPERA>:
{
1a0016be:	b508      	push	{r3, lr}
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Servicio_Red_ESPERA_tev0_raised) );		
1a0016c0:	f100 0153 	add.w	r1, r0, #83	; 0x53
1a0016c4:	f7fe ffbe 	bl	1a000644 <proyecto_unsetTimer>
}
1a0016c8:	bd08      	pop	{r3, pc}

1a0016ca <exseq_Servicio_Red_ESPERA>:
{
1a0016ca:	b508      	push	{r3, lr}
	handle->stateConfVector[3] = Proyecto_last_state;
1a0016cc:	2200      	movs	r2, #0
1a0016ce:	70c2      	strb	r2, [r0, #3]
	handle->stateConfVectorPosition = 3;
1a0016d0:	2203      	movs	r2, #3
1a0016d2:	6082      	str	r2, [r0, #8]
	exact_Servicio_Red_ESPERA(handle);
1a0016d4:	f7ff fff3 	bl	1a0016be <exact_Servicio_Red_ESPERA>
}
1a0016d8:	bd08      	pop	{r3, pc}

1a0016da <effect_Servicio_Red_ESPERA_tr0>:
{
1a0016da:	b510      	push	{r4, lr}
1a0016dc:	4604      	mov	r4, r0
	exseq_Servicio_Red_ESPERA(handle);
1a0016de:	f7ff fff4 	bl	1a0016ca <exseq_Servicio_Red_ESPERA>
	enseq_Servicio_Red_VALIDACION_default(handle);
1a0016e2:	4620      	mov	r0, r4
1a0016e4:	f7ff fd7b 	bl	1a0011de <enseq_Servicio_Red_VALIDACION_default>
}
1a0016e8:	bd10      	pop	{r4, pc}

1a0016ea <react_Servicio_Red_ESPERA>:
{
1a0016ea:	b510      	push	{r4, lr}
1a0016ec:	4604      	mov	r4, r0
	if (check_Servicio_Red_ESPERA_tr0_tr0(handle) == bool_true)
1a0016ee:	f7ff fc3b 	bl	1a000f68 <check_Servicio_Red_ESPERA_tr0_tr0>
1a0016f2:	b900      	cbnz	r0, 1a0016f6 <react_Servicio_Red_ESPERA+0xc>
}
1a0016f4:	bd10      	pop	{r4, pc}
		effect_Servicio_Red_ESPERA_tr0(handle);
1a0016f6:	4620      	mov	r0, r4
1a0016f8:	f7ff ffef 	bl	1a0016da <effect_Servicio_Red_ESPERA_tr0>
}
1a0016fc:	e7fa      	b.n	1a0016f4 <react_Servicio_Red_ESPERA+0xa>

1a0016fe <exact_Grupo_Electrogeno_GRUPO_APAGADO>:
{
1a0016fe:	b508      	push	{r3, lr}
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_GRUPO_APAGADO_tev0_raised) );		
1a001700:	f100 0154 	add.w	r1, r0, #84	; 0x54
1a001704:	f7fe ff9e 	bl	1a000644 <proyecto_unsetTimer>
}
1a001708:	bd08      	pop	{r3, pc}

1a00170a <exseq_Grupo_Electrogeno_GRUPO_APAGADO>:
{
1a00170a:	b508      	push	{r3, lr}
	handle->stateConfVector[4] = Proyecto_last_state;
1a00170c:	2200      	movs	r2, #0
1a00170e:	7102      	strb	r2, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a001710:	2204      	movs	r2, #4
1a001712:	6082      	str	r2, [r0, #8]
	exact_Grupo_Electrogeno_GRUPO_APAGADO(handle);
1a001714:	f7ff fff3 	bl	1a0016fe <exact_Grupo_Electrogeno_GRUPO_APAGADO>
}
1a001718:	bd08      	pop	{r3, pc}

1a00171a <effect_Grupo_Electrogeno_GRUPO_APAGADO_tr0>:
{
1a00171a:	b510      	push	{r4, lr}
1a00171c:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_GRUPO_APAGADO(handle);
1a00171e:	f7ff fff4 	bl	1a00170a <exseq_Grupo_Electrogeno_GRUPO_APAGADO>
	enseq_Grupo_Electrogeno_ESPERA_GRUPO_default(handle);
1a001722:	4620      	mov	r0, r4
1a001724:	f7ff fead 	bl	1a001482 <enseq_Grupo_Electrogeno_ESPERA_GRUPO_default>
}
1a001728:	bd10      	pop	{r4, pc}

1a00172a <react_Grupo_Electrogeno_GRUPO_APAGADO>:
{
1a00172a:	b510      	push	{r4, lr}
1a00172c:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_GRUPO_APAGADO_tr0_tr0(handle) == bool_true)
1a00172e:	f7ff fc24 	bl	1a000f7a <check_Grupo_Electrogeno_GRUPO_APAGADO_tr0_tr0>
1a001732:	b900      	cbnz	r0, 1a001736 <react_Grupo_Electrogeno_GRUPO_APAGADO+0xc>
}
1a001734:	bd10      	pop	{r4, pc}
		effect_Grupo_Electrogeno_GRUPO_APAGADO_tr0(handle);
1a001736:	4620      	mov	r0, r4
1a001738:	f7ff ffef 	bl	1a00171a <effect_Grupo_Electrogeno_GRUPO_APAGADO_tr0>
}
1a00173c:	e7fa      	b.n	1a001734 <react_Grupo_Electrogeno_GRUPO_APAGADO+0xa>

1a00173e <exact_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>:
{
1a00173e:	b510      	push	{r4, lr}
1a001740:	4604      	mov	r4, r0
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev0_raised) );		
1a001742:	f100 0155 	add.w	r1, r0, #85	; 0x55
1a001746:	f7fe ff7d 	bl	1a000644 <proyecto_unsetTimer>
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev1_raised) );		
1a00174a:	f104 0156 	add.w	r1, r4, #86	; 0x56
1a00174e:	4620      	mov	r0, r4
1a001750:	f7fe ff78 	bl	1a000644 <proyecto_unsetTimer>
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev2_raised) );		
1a001754:	f104 0157 	add.w	r1, r4, #87	; 0x57
1a001758:	4620      	mov	r0, r4
1a00175a:	f7fe ff73 	bl	1a000644 <proyecto_unsetTimer>
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev3_raised) );		
1a00175e:	f104 0158 	add.w	r1, r4, #88	; 0x58
1a001762:	4620      	mov	r0, r4
1a001764:	f7fe ff6e 	bl	1a000644 <proyecto_unsetTimer>
}
1a001768:	bd10      	pop	{r4, pc}

1a00176a <exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>:
{
1a00176a:	b508      	push	{r3, lr}
	handle->stateConfVector[4] = Proyecto_last_state;
1a00176c:	2200      	movs	r2, #0
1a00176e:	7102      	strb	r2, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a001770:	2204      	movs	r2, #4
1a001772:	6082      	str	r2, [r0, #8]
	exact_Grupo_Electrogeno_CHEQUEO_ENCENDIDO(handle);
1a001774:	f7ff ffe3 	bl	1a00173e <exact_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>
}
1a001778:	bd08      	pop	{r3, pc}

1a00177a <effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1>:
{
1a00177a:	b510      	push	{r4, lr}
1a00177c:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO(handle);
1a00177e:	f7ff fff4 	bl	1a00176a <exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>
	enseq_Grupo_Electrogeno_ARRANQUE_EXITO_default(handle);
1a001782:	4620      	mov	r0, r4
1a001784:	f7ff fd30 	bl	1a0011e8 <enseq_Grupo_Electrogeno_ARRANQUE_EXITO_default>
}
1a001788:	bd10      	pop	{r4, pc}

1a00178a <effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2>:
{
1a00178a:	b510      	push	{r4, lr}
1a00178c:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO(handle);
1a00178e:	f7ff ffec 	bl	1a00176a <exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>
	enseq_Grupo_Electrogeno_FALLA_default(handle);
1a001792:	4620      	mov	r0, r4
1a001794:	f7ff fecb 	bl	1a00152e <enseq_Grupo_Electrogeno_FALLA_default>
}
1a001798:	bd10      	pop	{r4, pc}

1a00179a <effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3>:
{
1a00179a:	b510      	push	{r4, lr}
1a00179c:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO(handle);
1a00179e:	f7ff ffe4 	bl	1a00176a <exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>
	enseq_Grupo_Electrogeno_ESPERA_GRUPO_default(handle);
1a0017a2:	4620      	mov	r0, r4
1a0017a4:	f7ff fe6d 	bl	1a001482 <enseq_Grupo_Electrogeno_ESPERA_GRUPO_default>
}
1a0017a8:	bd10      	pop	{r4, pc}

1a0017aa <exact_Grupo_Electrogeno_INICIO_ARRANQUE>:
{
1a0017aa:	b508      	push	{r3, lr}
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_INICIO_ARRANQUE_tev0_raised) );		
1a0017ac:	f100 0159 	add.w	r1, r0, #89	; 0x59
1a0017b0:	f7fe ff48 	bl	1a000644 <proyecto_unsetTimer>
}
1a0017b4:	bd08      	pop	{r3, pc}

1a0017b6 <exseq_Grupo_Electrogeno_INICIO_ARRANQUE>:
{
1a0017b6:	b508      	push	{r3, lr}
	handle->stateConfVector[4] = Proyecto_last_state;
1a0017b8:	2200      	movs	r2, #0
1a0017ba:	7102      	strb	r2, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a0017bc:	2204      	movs	r2, #4
1a0017be:	6082      	str	r2, [r0, #8]
	exact_Grupo_Electrogeno_INICIO_ARRANQUE(handle);
1a0017c0:	f7ff fff3 	bl	1a0017aa <exact_Grupo_Electrogeno_INICIO_ARRANQUE>
}
1a0017c4:	bd08      	pop	{r3, pc}

1a0017c6 <effect_Grupo_Electrogeno_INICIO_ARRANQUE_tr0>:
{
1a0017c6:	b510      	push	{r4, lr}
1a0017c8:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_INICIO_ARRANQUE(handle);
1a0017ca:	f7ff fff4 	bl	1a0017b6 <exseq_Grupo_Electrogeno_INICIO_ARRANQUE>
	enseq_Grupo_Electrogeno_FIN_ARRANQUE_default(handle);
1a0017ce:	4620      	mov	r0, r4
1a0017d0:	f7ff fedc 	bl	1a00158c <enseq_Grupo_Electrogeno_FIN_ARRANQUE_default>
}
1a0017d4:	bd10      	pop	{r4, pc}

1a0017d6 <react_Grupo_Electrogeno_INICIO_ARRANQUE>:
{
1a0017d6:	b510      	push	{r4, lr}
1a0017d8:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_INICIO_ARRANQUE_tr0_tr0(handle) == bool_true)
1a0017da:	f7ff fc30 	bl	1a00103e <check_Grupo_Electrogeno_INICIO_ARRANQUE_tr0_tr0>
1a0017de:	b900      	cbnz	r0, 1a0017e2 <react_Grupo_Electrogeno_INICIO_ARRANQUE+0xc>
}
1a0017e0:	bd10      	pop	{r4, pc}
		effect_Grupo_Electrogeno_INICIO_ARRANQUE_tr0(handle);
1a0017e2:	4620      	mov	r0, r4
1a0017e4:	f7ff ffef 	bl	1a0017c6 <effect_Grupo_Electrogeno_INICIO_ARRANQUE_tr0>
}
1a0017e8:	e7fa      	b.n	1a0017e0 <react_Grupo_Electrogeno_INICIO_ARRANQUE+0xa>

1a0017ea <exact_Grupo_Electrogeno_ESTABILIZACION_GRUPO>:
{
1a0017ea:	b510      	push	{r4, lr}
1a0017ec:	4604      	mov	r4, r0
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tev0_raised) );		
1a0017ee:	f100 015a 	add.w	r1, r0, #90	; 0x5a
1a0017f2:	f7fe ff27 	bl	1a000644 <proyecto_unsetTimer>
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tev1_raised) );		
1a0017f6:	f104 015b 	add.w	r1, r4, #91	; 0x5b
1a0017fa:	4620      	mov	r0, r4
1a0017fc:	f7fe ff22 	bl	1a000644 <proyecto_unsetTimer>
}
1a001800:	bd10      	pop	{r4, pc}

1a001802 <exseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO>:
{
1a001802:	b508      	push	{r3, lr}
	handle->stateConfVector[4] = Proyecto_last_state;
1a001804:	2200      	movs	r2, #0
1a001806:	7102      	strb	r2, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a001808:	2204      	movs	r2, #4
1a00180a:	6082      	str	r2, [r0, #8]
	exact_Grupo_Electrogeno_ESTABILIZACION_GRUPO(handle);
1a00180c:	f7ff ffed 	bl	1a0017ea <exact_Grupo_Electrogeno_ESTABILIZACION_GRUPO>
}
1a001810:	bd08      	pop	{r3, pc}

1a001812 <exact_Grupo_Electrogeno_APAGANDO_GRUPO>:
{
1a001812:	b508      	push	{r3, lr}
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_APAGANDO_GRUPO_tev0_raised) );		
1a001814:	f100 015c 	add.w	r1, r0, #92	; 0x5c
1a001818:	f7fe ff14 	bl	1a000644 <proyecto_unsetTimer>
}
1a00181c:	bd08      	pop	{r3, pc}

1a00181e <exseq_Grupo_Electrogeno_APAGANDO_GRUPO>:
{
1a00181e:	b508      	push	{r3, lr}
	handle->stateConfVector[4] = Proyecto_last_state;
1a001820:	2200      	movs	r2, #0
1a001822:	7102      	strb	r2, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a001824:	2204      	movs	r2, #4
1a001826:	6082      	str	r2, [r0, #8]
	exact_Grupo_Electrogeno_APAGANDO_GRUPO(handle);
1a001828:	f7ff fff3 	bl	1a001812 <exact_Grupo_Electrogeno_APAGANDO_GRUPO>
}
1a00182c:	bd08      	pop	{r3, pc}

1a00182e <exact_Grupo_Electrogeno_CHEQUEO_APAGADO>:
{
1a00182e:	b510      	push	{r4, lr}
1a001830:	4604      	mov	r4, r0
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO_tev0_raised) );		
1a001832:	f100 015d 	add.w	r1, r0, #93	; 0x5d
1a001836:	f7fe ff05 	bl	1a000644 <proyecto_unsetTimer>
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO_tev1_raised) );		
1a00183a:	f104 015e 	add.w	r1, r4, #94	; 0x5e
1a00183e:	4620      	mov	r0, r4
1a001840:	f7fe ff00 	bl	1a000644 <proyecto_unsetTimer>
}
1a001844:	bd10      	pop	{r4, pc}

1a001846 <exseq_Grupo_Electrogeno_CHEQUEO_APAGADO>:
{
1a001846:	b508      	push	{r3, lr}
	handle->stateConfVector[4] = Proyecto_last_state;
1a001848:	2200      	movs	r2, #0
1a00184a:	7102      	strb	r2, [r0, #4]
	handle->stateConfVectorPosition = 4;
1a00184c:	2204      	movs	r2, #4
1a00184e:	6082      	str	r2, [r0, #8]
	exact_Grupo_Electrogeno_CHEQUEO_APAGADO(handle);
1a001850:	f7ff ffed 	bl	1a00182e <exact_Grupo_Electrogeno_CHEQUEO_APAGADO>
}
1a001854:	bd08      	pop	{r3, pc}

1a001856 <exact_Display_MOSTRAR_VALORES>:
{
1a001856:	b508      	push	{r3, lr}
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Display_MOSTRAR_VALORES_tev0_raised) );		
1a001858:	f100 015f 	add.w	r1, r0, #95	; 0x5f
1a00185c:	f7fe fef2 	bl	1a000644 <proyecto_unsetTimer>
}
1a001860:	bd08      	pop	{r3, pc}

1a001862 <exseq_Display_MOSTRAR_VALORES>:
{
1a001862:	b508      	push	{r3, lr}
	handle->stateConfVector[5] = Proyecto_last_state;
1a001864:	2200      	movs	r2, #0
1a001866:	7142      	strb	r2, [r0, #5]
	handle->stateConfVectorPosition = 5;
1a001868:	2205      	movs	r2, #5
1a00186a:	6082      	str	r2, [r0, #8]
	exact_Display_MOSTRAR_VALORES(handle);
1a00186c:	f7ff fff3 	bl	1a001856 <exact_Display_MOSTRAR_VALORES>
}
1a001870:	bd08      	pop	{r3, pc}

1a001872 <effect_Display_MOSTRAR_VALORES_tr0>:
{
1a001872:	b510      	push	{r4, lr}
1a001874:	4604      	mov	r4, r0
	exseq_Display_MOSTRAR_VALORES(handle);
1a001876:	f7ff fff4 	bl	1a001862 <exseq_Display_MOSTRAR_VALORES>
	enseq_Display_IDLE_default(handle);
1a00187a:	4620      	mov	r0, r4
1a00187c:	f7ff fcbd 	bl	1a0011fa <enseq_Display_IDLE_default>
}
1a001880:	bd10      	pop	{r4, pc}

1a001882 <react_Display_MOSTRAR_VALORES>:
{
1a001882:	b510      	push	{r4, lr}
1a001884:	4604      	mov	r4, r0
	if (check_Display_MOSTRAR_VALORES_tr0_tr0(handle) == bool_true)
1a001886:	f7ff fc33 	bl	1a0010f0 <check_Display_MOSTRAR_VALORES_tr0_tr0>
1a00188a:	b900      	cbnz	r0, 1a00188e <react_Display_MOSTRAR_VALORES+0xc>
}
1a00188c:	bd10      	pop	{r4, pc}
		effect_Display_MOSTRAR_VALORES_tr0(handle);
1a00188e:	4620      	mov	r0, r4
1a001890:	f7ff ffef 	bl	1a001872 <effect_Display_MOSTRAR_VALORES_tr0>
}
1a001894:	e7fa      	b.n	1a00188c <react_Display_MOSTRAR_VALORES+0xa>

1a001896 <exact_Conmutador_SIN_CONMUTACION>:
{
1a001896:	b510      	push	{r4, lr}
1a001898:	4604      	mov	r4, r0
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Conmutador_SIN_CONMUTACION_tev0_raised) );		
1a00189a:	f100 0160 	add.w	r1, r0, #96	; 0x60
1a00189e:	f7fe fed1 	bl	1a000644 <proyecto_unsetTimer>
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Conmutador_SIN_CONMUTACION_tev1_raised) );		
1a0018a2:	f104 0161 	add.w	r1, r4, #97	; 0x61
1a0018a6:	4620      	mov	r0, r4
1a0018a8:	f7fe fecc 	bl	1a000644 <proyecto_unsetTimer>
}
1a0018ac:	bd10      	pop	{r4, pc}

1a0018ae <exseq_Conmutador_SIN_CONMUTACION>:
{
1a0018ae:	b508      	push	{r3, lr}
	handle->stateConfVector[6] = Proyecto_last_state;
1a0018b0:	2200      	movs	r2, #0
1a0018b2:	7182      	strb	r2, [r0, #6]
	handle->stateConfVectorPosition = 6;
1a0018b4:	2206      	movs	r2, #6
1a0018b6:	6082      	str	r2, [r0, #8]
	exact_Conmutador_SIN_CONMUTACION(handle);
1a0018b8:	f7ff ffed 	bl	1a001896 <exact_Conmutador_SIN_CONMUTACION>
}
1a0018bc:	bd08      	pop	{r3, pc}

1a0018be <effect_Conmutador_SIN_CONMUTACION_tr0>:
{
1a0018be:	b510      	push	{r4, lr}
1a0018c0:	4604      	mov	r4, r0
	exseq_Conmutador_SIN_CONMUTACION(handle);
1a0018c2:	f7ff fff4 	bl	1a0018ae <exseq_Conmutador_SIN_CONMUTACION>
	enseq_Conmutador_RED_CONMUTADA_default(handle);
1a0018c6:	4620      	mov	r0, r4
1a0018c8:	f7ff fe72 	bl	1a0015b0 <enseq_Conmutador_RED_CONMUTADA_default>
}
1a0018cc:	bd10      	pop	{r4, pc}

1a0018ce <effect_Conmutador_SIN_CONMUTACION_tr1>:
{
1a0018ce:	b510      	push	{r4, lr}
1a0018d0:	4604      	mov	r4, r0
	exseq_Conmutador_SIN_CONMUTACION(handle);
1a0018d2:	f7ff ffec 	bl	1a0018ae <exseq_Conmutador_SIN_CONMUTACION>
	enseq_Conmutador_GRUPO_CONMUTADO_default(handle);
1a0018d6:	4620      	mov	r0, r4
1a0018d8:	f7ff fe93 	bl	1a001602 <enseq_Conmutador_GRUPO_CONMUTADO_default>
}
1a0018dc:	bd10      	pop	{r4, pc}

1a0018de <react_Conmutador_SIN_CONMUTACION>:
{
1a0018de:	b510      	push	{r4, lr}
1a0018e0:	4604      	mov	r4, r0
	if (check_Conmutador_SIN_CONMUTACION_tr0_tr0(handle) == bool_true)
1a0018e2:	f7ff fc2d 	bl	1a001140 <check_Conmutador_SIN_CONMUTACION_tr0_tr0>
1a0018e6:	b920      	cbnz	r0, 1a0018f2 <react_Conmutador_SIN_CONMUTACION+0x14>
		if (check_Conmutador_SIN_CONMUTACION_tr1_tr1(handle) == bool_true)
1a0018e8:	4620      	mov	r0, r4
1a0018ea:	f7ff fc39 	bl	1a001160 <check_Conmutador_SIN_CONMUTACION_tr1_tr1>
1a0018ee:	b920      	cbnz	r0, 1a0018fa <react_Conmutador_SIN_CONMUTACION+0x1c>
}
1a0018f0:	bd10      	pop	{r4, pc}
		effect_Conmutador_SIN_CONMUTACION_tr0(handle);
1a0018f2:	4620      	mov	r0, r4
1a0018f4:	f7ff ffe3 	bl	1a0018be <effect_Conmutador_SIN_CONMUTACION_tr0>
1a0018f8:	e7fa      	b.n	1a0018f0 <react_Conmutador_SIN_CONMUTACION+0x12>
			effect_Conmutador_SIN_CONMUTACION_tr1(handle);
1a0018fa:	4620      	mov	r0, r4
1a0018fc:	f7ff ffe7 	bl	1a0018ce <effect_Conmutador_SIN_CONMUTACION_tr1>
}
1a001900:	e7f6      	b.n	1a0018f0 <react_Conmutador_SIN_CONMUTACION+0x12>

1a001902 <exact_Sensor_Temp_LEYENDO_TEMP>:
{
1a001902:	b508      	push	{r3, lr}
	proyecto_unsetTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Sensor_Temp_LEYENDO_TEMP_tev0_raised) );		
1a001904:	f100 0162 	add.w	r1, r0, #98	; 0x62
1a001908:	f7fe fe9c 	bl	1a000644 <proyecto_unsetTimer>
}
1a00190c:	bd08      	pop	{r3, pc}

1a00190e <exseq_Sensor_Temp_LEYENDO_TEMP>:
{
1a00190e:	b508      	push	{r3, lr}
	handle->stateConfVector[7] = Proyecto_last_state;
1a001910:	2200      	movs	r2, #0
1a001912:	71c2      	strb	r2, [r0, #7]
	handle->stateConfVectorPosition = 7;
1a001914:	2207      	movs	r2, #7
1a001916:	6082      	str	r2, [r0, #8]
	exact_Sensor_Temp_LEYENDO_TEMP(handle);
1a001918:	f7ff fff3 	bl	1a001902 <exact_Sensor_Temp_LEYENDO_TEMP>
}
1a00191c:	bd08      	pop	{r3, pc}

1a00191e <effect_Sensor_Temp_LEYENDO_TEMP_tr0>:
{
1a00191e:	b510      	push	{r4, lr}
1a001920:	4604      	mov	r4, r0
	exseq_Sensor_Temp_LEYENDO_TEMP(handle);
1a001922:	f7ff fff4 	bl	1a00190e <exseq_Sensor_Temp_LEYENDO_TEMP>
	enseq_Sensor_Temp_IDLE_default(handle);
1a001926:	4620      	mov	r0, r4
1a001928:	f7ff fc6c 	bl	1a001204 <enseq_Sensor_Temp_IDLE_default>
}
1a00192c:	bd10      	pop	{r4, pc}

1a00192e <react_Sensor_Temp_LEYENDO_TEMP>:
{
1a00192e:	b510      	push	{r4, lr}
1a001930:	4604      	mov	r4, r0
	if (check_Sensor_Temp_LEYENDO_TEMP_tr0_tr0(handle) == bool_true)
1a001932:	f7ff fc2a 	bl	1a00118a <check_Sensor_Temp_LEYENDO_TEMP_tr0_tr0>
1a001936:	b900      	cbnz	r0, 1a00193a <react_Sensor_Temp_LEYENDO_TEMP+0xc>
}
1a001938:	bd10      	pop	{r4, pc}
		effect_Sensor_Temp_LEYENDO_TEMP_tr0(handle);
1a00193a:	4620      	mov	r0, r4
1a00193c:	f7ff ffef 	bl	1a00191e <effect_Sensor_Temp_LEYENDO_TEMP_tr0>
}
1a001940:	e7fa      	b.n	1a001938 <react_Sensor_Temp_LEYENDO_TEMP+0xa>

1a001942 <enact_TECX_DEBOUNCE>:
{
1a001942:	b508      	push	{r3, lr}
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_TECX_DEBOUNCE_tev0_raised) , 100, bool_false);
1a001944:	2300      	movs	r3, #0
1a001946:	2264      	movs	r2, #100	; 0x64
1a001948:	f100 0150 	add.w	r1, r0, #80	; 0x50
1a00194c:	f7fe fe6c 	bl	1a000628 <proyecto_setTimer>
}
1a001950:	bd08      	pop	{r3, pc}

1a001952 <enseq_TECX_DEBOUNCE_default>:
{
1a001952:	b510      	push	{r4, lr}
1a001954:	4604      	mov	r4, r0
	enact_TECX_DEBOUNCE(handle);
1a001956:	f7ff fff4 	bl	1a001942 <enact_TECX_DEBOUNCE>
	handle->stateConfVector[0] = Proyecto_TECX_DEBOUNCE;
1a00195a:	2301      	movs	r3, #1
1a00195c:	7023      	strb	r3, [r4, #0]
	handle->stateConfVectorPosition = 0;
1a00195e:	2300      	movs	r3, #0
1a001960:	60a3      	str	r3, [r4, #8]
}
1a001962:	bd10      	pop	{r4, pc}

1a001964 <effect_TECX_NO_OPRIMIDO_tr0>:
{
1a001964:	b510      	push	{r4, lr}
1a001966:	4604      	mov	r4, r0
	exseq_TECX_NO_OPRIMIDO(handle);
1a001968:	f7ff fc51 	bl	1a00120e <exseq_TECX_NO_OPRIMIDO>
	enseq_TECX_DEBOUNCE_default(handle);
1a00196c:	4620      	mov	r0, r4
1a00196e:	f7ff fff0 	bl	1a001952 <enseq_TECX_DEBOUNCE_default>
}
1a001972:	bd10      	pop	{r4, pc}

1a001974 <react_TECX_NO_OPRIMIDO>:
{
1a001974:	b510      	push	{r4, lr}
1a001976:	4604      	mov	r4, r0
	if (check_TECX_NO_OPRIMIDO_tr0_tr0(handle) == bool_true)
1a001978:	f7ff fa8b 	bl	1a000e92 <check_TECX_NO_OPRIMIDO_tr0_tr0>
1a00197c:	b900      	cbnz	r0, 1a001980 <react_TECX_NO_OPRIMIDO+0xc>
}
1a00197e:	bd10      	pop	{r4, pc}
		effect_TECX_NO_OPRIMIDO_tr0(handle);
1a001980:	4620      	mov	r0, r4
1a001982:	f7ff ffef 	bl	1a001964 <effect_TECX_NO_OPRIMIDO_tr0>
}
1a001986:	e7fa      	b.n	1a00197e <react_TECX_NO_OPRIMIDO+0xa>

1a001988 <enact_Modo_Grupo_TRANSICION_MODOS>:
{
1a001988:	b510      	push	{r4, lr}
1a00198a:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Modo_Grupo_TRANSICION_MODOS_tev0_raised) , 1000, bool_false);
1a00198c:	2300      	movs	r3, #0
1a00198e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001992:	f100 0151 	add.w	r1, r0, #81	; 0x51
1a001996:	f7fe fe47 	bl	1a000628 <proyecto_setTimer>
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Modo_Grupo_TRANSICION_MODOS_tev1_raised) , 1000, bool_false);
1a00199a:	2300      	movs	r3, #0
1a00199c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0019a0:	f104 0152 	add.w	r1, r4, #82	; 0x52
1a0019a4:	4620      	mov	r0, r4
1a0019a6:	f7fe fe3f 	bl	1a000628 <proyecto_setTimer>
}
1a0019aa:	bd10      	pop	{r4, pc}

1a0019ac <enseq_Modo_Grupo_TRANSICION_MODOS_default>:
{
1a0019ac:	b510      	push	{r4, lr}
1a0019ae:	4604      	mov	r4, r0
	enact_Modo_Grupo_TRANSICION_MODOS(handle);
1a0019b0:	f7ff ffea 	bl	1a001988 <enact_Modo_Grupo_TRANSICION_MODOS>
	handle->stateConfVector[2] = Proyecto_Modo_Grupo_TRANSICION_MODOS;
1a0019b4:	2308      	movs	r3, #8
1a0019b6:	70a3      	strb	r3, [r4, #2]
	handle->stateConfVectorPosition = 2;
1a0019b8:	2302      	movs	r3, #2
1a0019ba:	60a3      	str	r3, [r4, #8]
}
1a0019bc:	bd10      	pop	{r4, pc}

1a0019be <effect_Modo_Grupo_MANUAL_tr0>:
{
1a0019be:	b510      	push	{r4, lr}
1a0019c0:	4604      	mov	r4, r0
	exseq_Modo_Grupo_MANUAL(handle);
1a0019c2:	f7ff fc79 	bl	1a0012b8 <exseq_Modo_Grupo_MANUAL>
	handle->iface.modoGrupo = 0;
1a0019c6:	2300      	movs	r3, #0
1a0019c8:	6263      	str	r3, [r4, #36]	; 0x24
	enseq_Modo_Grupo_TRANSICION_MODOS_default(handle);
1a0019ca:	4620      	mov	r0, r4
1a0019cc:	f7ff ffee 	bl	1a0019ac <enseq_Modo_Grupo_TRANSICION_MODOS_default>
}
1a0019d0:	bd10      	pop	{r4, pc}

1a0019d2 <react_Modo_Grupo_MANUAL>:
{
1a0019d2:	b510      	push	{r4, lr}
1a0019d4:	4604      	mov	r4, r0
	if (check_Modo_Grupo_MANUAL_tr0_tr0(handle) == bool_true)
1a0019d6:	f7ff faa8 	bl	1a000f2a <check_Modo_Grupo_MANUAL_tr0_tr0>
1a0019da:	b900      	cbnz	r0, 1a0019de <react_Modo_Grupo_MANUAL+0xc>
}
1a0019dc:	bd10      	pop	{r4, pc}
		effect_Modo_Grupo_MANUAL_tr0(handle);
1a0019de:	4620      	mov	r0, r4
1a0019e0:	f7ff ffed 	bl	1a0019be <effect_Modo_Grupo_MANUAL_tr0>
}
1a0019e4:	e7fa      	b.n	1a0019dc <react_Modo_Grupo_MANUAL+0xa>

1a0019e6 <effect_Modo_Grupo_AUTOMATICO_tr0>:
{
1a0019e6:	b510      	push	{r4, lr}
1a0019e8:	4604      	mov	r4, r0
	exseq_Modo_Grupo_AUTOMATICO(handle);
1a0019ea:	f7ff fc6a 	bl	1a0012c2 <exseq_Modo_Grupo_AUTOMATICO>
	handle->iface.modoGrupo = 1;
1a0019ee:	2301      	movs	r3, #1
1a0019f0:	6263      	str	r3, [r4, #36]	; 0x24
	enseq_Modo_Grupo_TRANSICION_MODOS_default(handle);
1a0019f2:	4620      	mov	r0, r4
1a0019f4:	f7ff ffda 	bl	1a0019ac <enseq_Modo_Grupo_TRANSICION_MODOS_default>
}
1a0019f8:	bd10      	pop	{r4, pc}

1a0019fa <react_Modo_Grupo_AUTOMATICO>:
{
1a0019fa:	b510      	push	{r4, lr}
1a0019fc:	4604      	mov	r4, r0
	if (check_Modo_Grupo_AUTOMATICO_tr0_tr0(handle) == bool_true)
1a0019fe:	f7ff fa97 	bl	1a000f30 <check_Modo_Grupo_AUTOMATICO_tr0_tr0>
1a001a02:	b900      	cbnz	r0, 1a001a06 <react_Modo_Grupo_AUTOMATICO+0xc>
}
1a001a04:	bd10      	pop	{r4, pc}
		effect_Modo_Grupo_AUTOMATICO_tr0(handle);
1a001a06:	4620      	mov	r0, r4
1a001a08:	f7ff ffed 	bl	1a0019e6 <effect_Modo_Grupo_AUTOMATICO_tr0>
}
1a001a0c:	e7fa      	b.n	1a001a04 <react_Modo_Grupo_AUTOMATICO+0xa>

1a001a0e <enact_Servicio_Red_ESPERA>:
{
1a001a0e:	b508      	push	{r3, lr}
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Servicio_Red_ESPERA_tev0_raised) , 1000, bool_false);
1a001a10:	2300      	movs	r3, #0
1a001a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001a16:	f100 0153 	add.w	r1, r0, #83	; 0x53
1a001a1a:	f7fe fe05 	bl	1a000628 <proyecto_setTimer>
}
1a001a1e:	bd08      	pop	{r3, pc}

1a001a20 <enseq_Servicio_Red_ESPERA_default>:
{
1a001a20:	b510      	push	{r4, lr}
1a001a22:	4604      	mov	r4, r0
	enact_Servicio_Red_ESPERA(handle);
1a001a24:	f7ff fff3 	bl	1a001a0e <enact_Servicio_Red_ESPERA>
	handle->stateConfVector[3] = Proyecto_Servicio_Red_ESPERA;
1a001a28:	230a      	movs	r3, #10
1a001a2a:	70e3      	strb	r3, [r4, #3]
	handle->stateConfVectorPosition = 3;
1a001a2c:	2303      	movs	r3, #3
1a001a2e:	60a3      	str	r3, [r4, #8]
}
1a001a30:	bd10      	pop	{r4, pc}

1a001a32 <effect_Servicio_Red_HAY_LUZ_tr0>:
{
1a001a32:	b510      	push	{r4, lr}
1a001a34:	4604      	mov	r4, r0
	exseq_Servicio_Red_HAY_LUZ(handle);
1a001a36:	f7ff fc49 	bl	1a0012cc <exseq_Servicio_Red_HAY_LUZ>
	enseq_Servicio_Red_ESPERA_default(handle);
1a001a3a:	4620      	mov	r0, r4
1a001a3c:	f7ff fff0 	bl	1a001a20 <enseq_Servicio_Red_ESPERA_default>
}
1a001a40:	bd10      	pop	{r4, pc}

1a001a42 <react_Servicio_Red_HAY_LUZ>:
{
1a001a42:	b510      	push	{r4, lr}
1a001a44:	4604      	mov	r4, r0
	if (check_Servicio_Red_HAY_LUZ_tr0_tr0(handle) == bool_true)
1a001a46:	f7ff fa8d 	bl	1a000f64 <check_Servicio_Red_HAY_LUZ_tr0_tr0>
1a001a4a:	b900      	cbnz	r0, 1a001a4e <react_Servicio_Red_HAY_LUZ+0xc>
}
1a001a4c:	bd10      	pop	{r4, pc}
		effect_Servicio_Red_HAY_LUZ_tr0(handle);
1a001a4e:	4620      	mov	r0, r4
1a001a50:	f7ff ffef 	bl	1a001a32 <effect_Servicio_Red_HAY_LUZ_tr0>
}
1a001a54:	e7fa      	b.n	1a001a4c <react_Servicio_Red_HAY_LUZ+0xa>

1a001a56 <effect_Servicio_Red_NO_HAY_LUZ_tr0>:
{
1a001a56:	b510      	push	{r4, lr}
1a001a58:	4604      	mov	r4, r0
	exseq_Servicio_Red_NO_HAY_LUZ(handle);
1a001a5a:	f7ff fc41 	bl	1a0012e0 <exseq_Servicio_Red_NO_HAY_LUZ>
	enseq_Servicio_Red_ESPERA_default(handle);
1a001a5e:	4620      	mov	r0, r4
1a001a60:	f7ff ffde 	bl	1a001a20 <enseq_Servicio_Red_ESPERA_default>
}
1a001a64:	bd10      	pop	{r4, pc}

1a001a66 <react_Servicio_Red_NO_HAY_LUZ>:
{
1a001a66:	b510      	push	{r4, lr}
1a001a68:	4604      	mov	r4, r0
	if (check_Servicio_Red_NO_HAY_LUZ_tr0_tr0(handle) == bool_true)
1a001a6a:	f7ff fa84 	bl	1a000f76 <check_Servicio_Red_NO_HAY_LUZ_tr0_tr0>
1a001a6e:	b900      	cbnz	r0, 1a001a72 <react_Servicio_Red_NO_HAY_LUZ+0xc>
}
1a001a70:	bd10      	pop	{r4, pc}
		effect_Servicio_Red_NO_HAY_LUZ_tr0(handle);
1a001a72:	4620      	mov	r0, r4
1a001a74:	f7ff ffef 	bl	1a001a56 <effect_Servicio_Red_NO_HAY_LUZ_tr0>
}
1a001a78:	e7fa      	b.n	1a001a70 <react_Servicio_Red_NO_HAY_LUZ+0xa>

1a001a7a <enact_Grupo_Electrogeno_INICIO_ARRANQUE>:
{
1a001a7a:	b510      	push	{r4, lr}
1a001a7c:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_INICIO_ARRANQUE_tev0_raised) , 950, bool_false);
1a001a7e:	2300      	movs	r3, #0
1a001a80:	f240 32b6 	movw	r2, #950	; 0x3b6
1a001a84:	f100 0159 	add.w	r1, r0, #89	; 0x59
1a001a88:	f7fe fdce 	bl	1a000628 <proyecto_setTimer>
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO1, PROYECTO_PROYECTOIFACE_OUT_ON);
1a001a8c:	2201      	movs	r2, #1
1a001a8e:	210f      	movs	r1, #15
1a001a90:	4620      	mov	r0, r4
1a001a92:	f7fe fc59 	bl	1a000348 <proyectoIface_switchSalida>
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LED2, PROYECTO_PROYECTOIFACE_LED_ON);
1a001a96:	2201      	movs	r2, #1
1a001a98:	2104      	movs	r1, #4
1a001a9a:	4620      	mov	r0, r4
1a001a9c:	f7fe fc4c 	bl	1a000338 <proyectoIface_opLED>
}
1a001aa0:	bd10      	pop	{r4, pc}

1a001aa2 <enseq_Grupo_Electrogeno_INICIO_ARRANQUE_default>:
{
1a001aa2:	b510      	push	{r4, lr}
1a001aa4:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_INICIO_ARRANQUE(handle);
1a001aa6:	f7ff ffe8 	bl	1a001a7a <enact_Grupo_Electrogeno_INICIO_ARRANQUE>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_INICIO_ARRANQUE;
1a001aaa:	2311      	movs	r3, #17
1a001aac:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a001aae:	2304      	movs	r3, #4
1a001ab0:	60a3      	str	r3, [r4, #8]
}
1a001ab2:	bd10      	pop	{r4, pc}

1a001ab4 <effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0>:
{
1a001ab4:	b510      	push	{r4, lr}
1a001ab6:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO(handle);
1a001ab8:	f7ff fe57 	bl	1a00176a <exseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>
	enseq_Grupo_Electrogeno_INICIO_ARRANQUE_default(handle);
1a001abc:	4620      	mov	r0, r4
1a001abe:	f7ff fff0 	bl	1a001aa2 <enseq_Grupo_Electrogeno_INICIO_ARRANQUE_default>
}
1a001ac2:	bd10      	pop	{r4, pc}

1a001ac4 <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>:
{
1a001ac4:	b510      	push	{r4, lr}
1a001ac6:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0(handle) == bool_true)
1a001ac8:	f7ff fa5a 	bl	1a000f80 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0_tr0>
1a001acc:	b978      	cbnz	r0, 1a001aee <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO+0x2a>
		if (check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1_tr1(handle) == bool_true)
1a001ace:	4620      	mov	r0, r4
1a001ad0:	f7ff fa6b 	bl	1a000faa <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1_tr1>
1a001ad4:	b978      	cbnz	r0, 1a001af6 <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO+0x32>
			if (check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2_tr2(handle) == bool_true)
1a001ad6:	4620      	mov	r0, r4
1a001ad8:	f7ff fa73 	bl	1a000fc2 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2_tr2>
1a001adc:	b978      	cbnz	r0, 1a001afe <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO+0x3a>
				if (check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3_tr3(handle) == bool_true)
1a001ade:	4620      	mov	r0, r4
1a001ae0:	f7ff fa80 	bl	1a000fe4 <check_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3_tr3>
1a001ae4:	b130      	cbz	r0, 1a001af4 <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO+0x30>
					effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3(handle);
1a001ae6:	4620      	mov	r0, r4
1a001ae8:	f7ff fe57 	bl	1a00179a <effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr3>
}
1a001aec:	e002      	b.n	1a001af4 <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO+0x30>
		effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0(handle);
1a001aee:	4620      	mov	r0, r4
1a001af0:	f7ff ffe0 	bl	1a001ab4 <effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr0>
}
1a001af4:	bd10      	pop	{r4, pc}
			effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1(handle);
1a001af6:	4620      	mov	r0, r4
1a001af8:	f7ff fe3f 	bl	1a00177a <effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr1>
1a001afc:	e7fa      	b.n	1a001af4 <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO+0x30>
				effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2(handle);
1a001afe:	4620      	mov	r0, r4
1a001b00:	f7ff fe43 	bl	1a00178a <effect_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tr2>
1a001b04:	e7f6      	b.n	1a001af4 <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO+0x30>

1a001b06 <effect_Grupo_Electrogeno_ESPERA_GRUPO_tr0>:
{
1a001b06:	b510      	push	{r4, lr}
1a001b08:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_ESPERA_GRUPO(handle);
1a001b0a:	f7ff fbf8 	bl	1a0012fe <exseq_Grupo_Electrogeno_ESPERA_GRUPO>
	enseq_Grupo_Electrogeno_INICIO_ARRANQUE_default(handle);
1a001b0e:	4620      	mov	r0, r4
1a001b10:	f7ff ffc7 	bl	1a001aa2 <enseq_Grupo_Electrogeno_INICIO_ARRANQUE_default>
}
1a001b14:	bd10      	pop	{r4, pc}

1a001b16 <effect_Grupo_Electrogeno_ESPERA_GRUPO_tr1>:
{
1a001b16:	b510      	push	{r4, lr}
1a001b18:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_ESPERA_GRUPO(handle);
1a001b1a:	f7ff fbf0 	bl	1a0012fe <exseq_Grupo_Electrogeno_ESPERA_GRUPO>
	enseq_Grupo_Electrogeno_INICIO_ARRANQUE_default(handle);
1a001b1e:	4620      	mov	r0, r4
1a001b20:	f7ff ffbf 	bl	1a001aa2 <enseq_Grupo_Electrogeno_INICIO_ARRANQUE_default>
}
1a001b24:	bd10      	pop	{r4, pc}

1a001b26 <react_Grupo_Electrogeno_ESPERA_GRUPO>:
{
1a001b26:	b510      	push	{r4, lr}
1a001b28:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_ESPERA_GRUPO_tr0_tr0(handle) == bool_true)
1a001b2a:	f7ff faaa 	bl	1a001082 <check_Grupo_Electrogeno_ESPERA_GRUPO_tr0_tr0>
1a001b2e:	b920      	cbnz	r0, 1a001b3a <react_Grupo_Electrogeno_ESPERA_GRUPO+0x14>
		if (check_Grupo_Electrogeno_ESPERA_GRUPO_tr1_tr1(handle) == bool_true)
1a001b30:	4620      	mov	r0, r4
1a001b32:	f7ff faa9 	bl	1a001088 <check_Grupo_Electrogeno_ESPERA_GRUPO_tr1_tr1>
1a001b36:	b920      	cbnz	r0, 1a001b42 <react_Grupo_Electrogeno_ESPERA_GRUPO+0x1c>
}
1a001b38:	bd10      	pop	{r4, pc}
		effect_Grupo_Electrogeno_ESPERA_GRUPO_tr0(handle);
1a001b3a:	4620      	mov	r0, r4
1a001b3c:	f7ff ffe3 	bl	1a001b06 <effect_Grupo_Electrogeno_ESPERA_GRUPO_tr0>
1a001b40:	e7fa      	b.n	1a001b38 <react_Grupo_Electrogeno_ESPERA_GRUPO+0x12>
			effect_Grupo_Electrogeno_ESPERA_GRUPO_tr1(handle);
1a001b42:	4620      	mov	r0, r4
1a001b44:	f7ff ffe7 	bl	1a001b16 <effect_Grupo_Electrogeno_ESPERA_GRUPO_tr1>
}
1a001b48:	e7f6      	b.n	1a001b38 <react_Grupo_Electrogeno_ESPERA_GRUPO+0x12>

1a001b4a <enact_Grupo_Electrogeno_APAGANDO_GRUPO>:
{
1a001b4a:	b510      	push	{r4, lr}
1a001b4c:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_APAGANDO_GRUPO_tev0_raised) , 5000, bool_false);
1a001b4e:	2300      	movs	r3, #0
1a001b50:	f241 3288 	movw	r2, #5000	; 0x1388
1a001b54:	f100 015c 	add.w	r1, r0, #92	; 0x5c
1a001b58:	f7fe fd66 	bl	1a000628 <proyecto_setTimer>
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO3, PROYECTO_PROYECTOIFACE_OUT_ON);
1a001b5c:	2201      	movs	r2, #1
1a001b5e:	210e      	movs	r1, #14
1a001b60:	4620      	mov	r0, r4
1a001b62:	f7fe fbf1 	bl	1a000348 <proyectoIface_switchSalida>
}
1a001b66:	bd10      	pop	{r4, pc}

1a001b68 <enseq_Grupo_Electrogeno_APAGANDO_GRUPO_default>:
{
1a001b68:	b510      	push	{r4, lr}
1a001b6a:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_APAGANDO_GRUPO(handle);
1a001b6c:	f7ff ffed 	bl	1a001b4a <enact_Grupo_Electrogeno_APAGANDO_GRUPO>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_APAGANDO_GRUPO;
1a001b70:	2313      	movs	r3, #19
1a001b72:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a001b74:	2304      	movs	r3, #4
1a001b76:	60a3      	str	r3, [r4, #8]
}
1a001b78:	bd10      	pop	{r4, pc}

1a001b7a <effect_Grupo_Electrogeno_ARRANQUE_EXITO_tr0>:
{
1a001b7a:	b510      	push	{r4, lr}
1a001b7c:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_ARRANQUE_EXITO(handle);
1a001b7e:	f7ff fbb4 	bl	1a0012ea <exseq_Grupo_Electrogeno_ARRANQUE_EXITO>
	enseq_Grupo_Electrogeno_APAGANDO_GRUPO_default(handle);
1a001b82:	4620      	mov	r0, r4
1a001b84:	f7ff fff0 	bl	1a001b68 <enseq_Grupo_Electrogeno_APAGANDO_GRUPO_default>
}
1a001b88:	bd10      	pop	{r4, pc}

1a001b8a <effect_Grupo_Electrogeno_ARRANQUE_EXITO_tr1>:
{
1a001b8a:	b510      	push	{r4, lr}
1a001b8c:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_ARRANQUE_EXITO(handle);
1a001b8e:	f7ff fbac 	bl	1a0012ea <exseq_Grupo_Electrogeno_ARRANQUE_EXITO>
	enseq_Grupo_Electrogeno_APAGANDO_GRUPO_default(handle);
1a001b92:	4620      	mov	r0, r4
1a001b94:	f7ff ffe8 	bl	1a001b68 <enseq_Grupo_Electrogeno_APAGANDO_GRUPO_default>
}
1a001b98:	bd10      	pop	{r4, pc}

1a001b9a <react_Grupo_Electrogeno_ARRANQUE_EXITO>:
{
1a001b9a:	b510      	push	{r4, lr}
1a001b9c:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_ARRANQUE_EXITO_tr0_tr0(handle) == bool_true)
1a001b9e:	f7ff fa32 	bl	1a001006 <check_Grupo_Electrogeno_ARRANQUE_EXITO_tr0_tr0>
1a001ba2:	b920      	cbnz	r0, 1a001bae <react_Grupo_Electrogeno_ARRANQUE_EXITO+0x14>
		if (check_Grupo_Electrogeno_ARRANQUE_EXITO_tr1_tr1(handle) == bool_true)
1a001ba4:	4620      	mov	r0, r4
1a001ba6:	f7ff fa39 	bl	1a00101c <check_Grupo_Electrogeno_ARRANQUE_EXITO_tr1_tr1>
1a001baa:	b920      	cbnz	r0, 1a001bb6 <react_Grupo_Electrogeno_ARRANQUE_EXITO+0x1c>
}
1a001bac:	bd10      	pop	{r4, pc}
		effect_Grupo_Electrogeno_ARRANQUE_EXITO_tr0(handle);
1a001bae:	4620      	mov	r0, r4
1a001bb0:	f7ff ffe3 	bl	1a001b7a <effect_Grupo_Electrogeno_ARRANQUE_EXITO_tr0>
1a001bb4:	e7fa      	b.n	1a001bac <react_Grupo_Electrogeno_ARRANQUE_EXITO+0x12>
			effect_Grupo_Electrogeno_ARRANQUE_EXITO_tr1(handle);
1a001bb6:	4620      	mov	r0, r4
1a001bb8:	f7ff ffe7 	bl	1a001b8a <effect_Grupo_Electrogeno_ARRANQUE_EXITO_tr1>
}
1a001bbc:	e7f6      	b.n	1a001bac <react_Grupo_Electrogeno_ARRANQUE_EXITO+0x12>

1a001bbe <effect_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0>:
{
1a001bbe:	b510      	push	{r4, lr}
1a001bc0:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_CHEQUEO_APAGADO(handle);
1a001bc2:	f7ff fe40 	bl	1a001846 <exseq_Grupo_Electrogeno_CHEQUEO_APAGADO>
	enseq_Grupo_Electrogeno_APAGANDO_GRUPO_default(handle);
1a001bc6:	4620      	mov	r0, r4
1a001bc8:	f7ff ffce 	bl	1a001b68 <enseq_Grupo_Electrogeno_APAGANDO_GRUPO_default>
}
1a001bcc:	bd10      	pop	{r4, pc}

1a001bce <enact_Grupo_Electrogeno_GRUPO_APAGADO>:
{
1a001bce:	b510      	push	{r4, lr}
1a001bd0:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_GRUPO_APAGADO_tev0_raised) , 500, bool_false);
1a001bd2:	2300      	movs	r3, #0
1a001bd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a001bd8:	f100 0154 	add.w	r1, r0, #84	; 0x54
1a001bdc:	f7fe fd24 	bl	1a000628 <proyecto_setTimer>
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO1, PROYECTO_PROYECTOIFACE_OUT_OFF);
1a001be0:	2200      	movs	r2, #0
1a001be2:	210f      	movs	r1, #15
1a001be4:	4620      	mov	r0, r4
1a001be6:	f7fe fbaf 	bl	1a000348 <proyectoIface_switchSalida>
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LED2, PROYECTO_PROYECTOIFACE_LED_OFF);
1a001bea:	2200      	movs	r2, #0
1a001bec:	2104      	movs	r1, #4
1a001bee:	4620      	mov	r0, r4
1a001bf0:	f7fe fba2 	bl	1a000338 <proyectoIface_opLED>
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LEDG, PROYECTO_PROYECTOIFACE_LED_OFF);
1a001bf4:	2200      	movs	r2, #0
1a001bf6:	2101      	movs	r1, #1
1a001bf8:	4620      	mov	r0, r4
1a001bfa:	f7fe fb9d 	bl	1a000338 <proyectoIface_opLED>
	handle->iface.grupoExito = bool_false;
1a001bfe:	2300      	movs	r3, #0
1a001c00:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	handle->iface.grupoFalla = bool_false;
1a001c04:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	handle->internal.intentoArranque = 0;
1a001c08:	64e3      	str	r3, [r4, #76]	; 0x4c
}
1a001c0a:	bd10      	pop	{r4, pc}

1a001c0c <enseq_Grupo_Electrogeno_GRUPO_APAGADO_default>:
{
1a001c0c:	b510      	push	{r4, lr}
1a001c0e:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_GRUPO_APAGADO(handle);
1a001c10:	f7ff ffdd 	bl	1a001bce <enact_Grupo_Electrogeno_GRUPO_APAGADO>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_GRUPO_APAGADO;
1a001c14:	230d      	movs	r3, #13
1a001c16:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a001c18:	2304      	movs	r3, #4
1a001c1a:	60a3      	str	r3, [r4, #8]
}
1a001c1c:	bd10      	pop	{r4, pc}

1a001c1e <effect_Grupo_Electrogeno_FALLA_tr0>:
{
1a001c1e:	b510      	push	{r4, lr}
1a001c20:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_FALLA(handle);
1a001c22:	f7ff fb67 	bl	1a0012f4 <exseq_Grupo_Electrogeno_FALLA>
	enseq_Grupo_Electrogeno_GRUPO_APAGADO_default(handle);
1a001c26:	4620      	mov	r0, r4
1a001c28:	f7ff fff0 	bl	1a001c0c <enseq_Grupo_Electrogeno_GRUPO_APAGADO_default>
}
1a001c2c:	bd10      	pop	{r4, pc}

1a001c2e <effect_Grupo_Electrogeno_FALLA_tr1>:
{
1a001c2e:	b510      	push	{r4, lr}
1a001c30:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_FALLA(handle);
1a001c32:	f7ff fb5f 	bl	1a0012f4 <exseq_Grupo_Electrogeno_FALLA>
	enseq_Grupo_Electrogeno_GRUPO_APAGADO_default(handle);
1a001c36:	4620      	mov	r0, r4
1a001c38:	f7ff ffe8 	bl	1a001c0c <enseq_Grupo_Electrogeno_GRUPO_APAGADO_default>
}
1a001c3c:	bd10      	pop	{r4, pc}

1a001c3e <react_Grupo_Electrogeno_FALLA>:
{
1a001c3e:	b510      	push	{r4, lr}
1a001c40:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_FALLA_tr0_tr0(handle) == bool_true)
1a001c42:	f7ff f9ee 	bl	1a001022 <check_Grupo_Electrogeno_FALLA_tr0_tr0>
1a001c46:	b920      	cbnz	r0, 1a001c52 <react_Grupo_Electrogeno_FALLA+0x14>
		if (check_Grupo_Electrogeno_FALLA_tr1_tr1(handle) == bool_true)
1a001c48:	4620      	mov	r0, r4
1a001c4a:	f7ff f9f5 	bl	1a001038 <check_Grupo_Electrogeno_FALLA_tr1_tr1>
1a001c4e:	b920      	cbnz	r0, 1a001c5a <react_Grupo_Electrogeno_FALLA+0x1c>
}
1a001c50:	bd10      	pop	{r4, pc}
		effect_Grupo_Electrogeno_FALLA_tr0(handle);
1a001c52:	4620      	mov	r0, r4
1a001c54:	f7ff ffe3 	bl	1a001c1e <effect_Grupo_Electrogeno_FALLA_tr0>
1a001c58:	e7fa      	b.n	1a001c50 <react_Grupo_Electrogeno_FALLA+0x12>
			effect_Grupo_Electrogeno_FALLA_tr1(handle);
1a001c5a:	4620      	mov	r0, r4
1a001c5c:	f7ff ffe7 	bl	1a001c2e <effect_Grupo_Electrogeno_FALLA_tr1>
}
1a001c60:	e7f6      	b.n	1a001c50 <react_Grupo_Electrogeno_FALLA+0x12>

1a001c62 <effect_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1>:
{
1a001c62:	b510      	push	{r4, lr}
1a001c64:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_CHEQUEO_APAGADO(handle);
1a001c66:	f7ff fdee 	bl	1a001846 <exseq_Grupo_Electrogeno_CHEQUEO_APAGADO>
	enseq_Grupo_Electrogeno_GRUPO_APAGADO_default(handle);
1a001c6a:	4620      	mov	r0, r4
1a001c6c:	f7ff ffce 	bl	1a001c0c <enseq_Grupo_Electrogeno_GRUPO_APAGADO_default>
}
1a001c70:	bd10      	pop	{r4, pc}

1a001c72 <react_Grupo_Electrogeno_CHEQUEO_APAGADO>:
{
1a001c72:	b510      	push	{r4, lr}
1a001c74:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0_tr0(handle) == bool_true)
1a001c76:	f7ff fa12 	bl	1a00109e <check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0_tr0>
1a001c7a:	b920      	cbnz	r0, 1a001c86 <react_Grupo_Electrogeno_CHEQUEO_APAGADO+0x14>
		if (check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1_tr1(handle) == bool_true)
1a001c7c:	4620      	mov	r0, r4
1a001c7e:	f7ff fa1a 	bl	1a0010b6 <check_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1_tr1>
1a001c82:	b920      	cbnz	r0, 1a001c8e <react_Grupo_Electrogeno_CHEQUEO_APAGADO+0x1c>
}
1a001c84:	bd10      	pop	{r4, pc}
		effect_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0(handle);
1a001c86:	4620      	mov	r0, r4
1a001c88:	f7ff ff99 	bl	1a001bbe <effect_Grupo_Electrogeno_CHEQUEO_APAGADO_tr0>
1a001c8c:	e7fa      	b.n	1a001c84 <react_Grupo_Electrogeno_CHEQUEO_APAGADO+0x12>
			effect_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1(handle);
1a001c8e:	4620      	mov	r0, r4
1a001c90:	f7ff ffe7 	bl	1a001c62 <effect_Grupo_Electrogeno_CHEQUEO_APAGADO_tr1>
}
1a001c94:	e7f6      	b.n	1a001c84 <react_Grupo_Electrogeno_CHEQUEO_APAGADO+0x12>

1a001c96 <enact_Grupo_Electrogeno_ESTABILIZACION_GRUPO>:
{
1a001c96:	b510      	push	{r4, lr}
1a001c98:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tev0_raised) , 5000, bool_false);
1a001c9a:	2300      	movs	r3, #0
1a001c9c:	f241 3288 	movw	r2, #5000	; 0x1388
1a001ca0:	f100 015a 	add.w	r1, r0, #90	; 0x5a
1a001ca4:	f7fe fcc0 	bl	1a000628 <proyecto_setTimer>
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tev1_raised) , 5000, bool_false);
1a001ca8:	2300      	movs	r3, #0
1a001caa:	f241 3288 	movw	r2, #5000	; 0x1388
1a001cae:	f104 015b 	add.w	r1, r4, #91	; 0x5b
1a001cb2:	4620      	mov	r0, r4
1a001cb4:	f7fe fcb8 	bl	1a000628 <proyecto_setTimer>
}
1a001cb8:	bd10      	pop	{r4, pc}

1a001cba <enseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO_default>:
{
1a001cba:	b510      	push	{r4, lr}
1a001cbc:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_ESTABILIZACION_GRUPO(handle);
1a001cbe:	f7ff ffea 	bl	1a001c96 <enact_Grupo_Electrogeno_ESTABILIZACION_GRUPO>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_ESTABILIZACION_GRUPO;
1a001cc2:	2312      	movs	r3, #18
1a001cc4:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a001cc6:	2304      	movs	r3, #4
1a001cc8:	60a3      	str	r3, [r4, #8]
}
1a001cca:	bd10      	pop	{r4, pc}

1a001ccc <effect_Grupo_Electrogeno_FIN_ARRANQUE_tr0>:
{
1a001ccc:	b510      	push	{r4, lr}
1a001cce:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_FIN_ARRANQUE(handle);
1a001cd0:	f7ff fb1a 	bl	1a001308 <exseq_Grupo_Electrogeno_FIN_ARRANQUE>
	enseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO_default(handle);
1a001cd4:	4620      	mov	r0, r4
1a001cd6:	f7ff fff0 	bl	1a001cba <enseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO_default>
}
1a001cda:	bd10      	pop	{r4, pc}

1a001cdc <react_Grupo_Electrogeno_FIN_ARRANQUE>:
{
1a001cdc:	b508      	push	{r3, lr}
	effect_Grupo_Electrogeno_FIN_ARRANQUE_tr0(handle);
1a001cde:	f7ff fff5 	bl	1a001ccc <effect_Grupo_Electrogeno_FIN_ARRANQUE_tr0>
}
1a001ce2:	bd08      	pop	{r3, pc}

1a001ce4 <enact_Conmutador_SIN_CONMUTACION>:
{
1a001ce4:	b510      	push	{r4, lr}
1a001ce6:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Conmutador_SIN_CONMUTACION_tev0_raised) , 2000, bool_false);
1a001ce8:	2300      	movs	r3, #0
1a001cea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a001cee:	f100 0160 	add.w	r1, r0, #96	; 0x60
1a001cf2:	f7fe fc99 	bl	1a000628 <proyecto_setTimer>
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Conmutador_SIN_CONMUTACION_tev1_raised) , 2000, bool_false);
1a001cf6:	2300      	movs	r3, #0
1a001cf8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a001cfc:	f104 0161 	add.w	r1, r4, #97	; 0x61
1a001d00:	4620      	mov	r0, r4
1a001d02:	f7fe fc91 	bl	1a000628 <proyecto_setTimer>
	proyectoIface_opLED(handle, PROYECTO_PROYECTOIFACE_LED3, PROYECTO_PROYECTOIFACE_LED_OFF);
1a001d06:	2200      	movs	r2, #0
1a001d08:	2105      	movs	r1, #5
1a001d0a:	4620      	mov	r0, r4
1a001d0c:	f7fe fb14 	bl	1a000338 <proyectoIface_opLED>
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO5, PROYECTO_PROYECTOIFACE_OUT_OFF);
1a001d10:	2200      	movs	r2, #0
1a001d12:	210d      	movs	r1, #13
1a001d14:	4620      	mov	r0, r4
1a001d16:	f7fe fb17 	bl	1a000348 <proyectoIface_switchSalida>
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO7, PROYECTO_PROYECTOIFACE_OUT_OFF);
1a001d1a:	2200      	movs	r2, #0
1a001d1c:	210c      	movs	r1, #12
1a001d1e:	4620      	mov	r0, r4
1a001d20:	f7fe fb12 	bl	1a000348 <proyectoIface_switchSalida>
}
1a001d24:	bd10      	pop	{r4, pc}

1a001d26 <enseq_Conmutador_SIN_CONMUTACION_default>:
{
1a001d26:	b510      	push	{r4, lr}
1a001d28:	4604      	mov	r4, r0
	enact_Conmutador_SIN_CONMUTACION(handle);
1a001d2a:	f7ff ffdb 	bl	1a001ce4 <enact_Conmutador_SIN_CONMUTACION>
	handle->stateConfVector[6] = Proyecto_Conmutador_SIN_CONMUTACION;
1a001d2e:	231b      	movs	r3, #27
1a001d30:	71a3      	strb	r3, [r4, #6]
	handle->stateConfVectorPosition = 6;
1a001d32:	2306      	movs	r3, #6
1a001d34:	60a3      	str	r3, [r4, #8]
}
1a001d36:	bd10      	pop	{r4, pc}

1a001d38 <effect_Conmutador_GRUPO_CONMUTADO_tr0>:
{
1a001d38:	b510      	push	{r4, lr}
1a001d3a:	4604      	mov	r4, r0
	exseq_Conmutador_GRUPO_CONMUTADO(handle);
1a001d3c:	f7ff faee 	bl	1a00131c <exseq_Conmutador_GRUPO_CONMUTADO>
	handle->iface.conmutacionRed = 1;
1a001d40:	2301      	movs	r3, #1
1a001d42:	6323      	str	r3, [r4, #48]	; 0x30
	handle->iface.conmutacionGrupo = 0;
1a001d44:	2300      	movs	r3, #0
1a001d46:	6363      	str	r3, [r4, #52]	; 0x34
	enseq_Conmutador_SIN_CONMUTACION_default(handle);
1a001d48:	4620      	mov	r0, r4
1a001d4a:	f7ff ffec 	bl	1a001d26 <enseq_Conmutador_SIN_CONMUTACION_default>
}
1a001d4e:	bd10      	pop	{r4, pc}

1a001d50 <effect_Conmutador_GRUPO_CONMUTADO_tr1>:
{
1a001d50:	b510      	push	{r4, lr}
1a001d52:	4604      	mov	r4, r0
	exseq_Conmutador_GRUPO_CONMUTADO(handle);
1a001d54:	f7ff fae2 	bl	1a00131c <exseq_Conmutador_GRUPO_CONMUTADO>
	handle->iface.conmutacionRed = 1;
1a001d58:	2301      	movs	r3, #1
1a001d5a:	6323      	str	r3, [r4, #48]	; 0x30
	handle->iface.conmutacionGrupo = 0;
1a001d5c:	2300      	movs	r3, #0
1a001d5e:	6363      	str	r3, [r4, #52]	; 0x34
	enseq_Conmutador_SIN_CONMUTACION_default(handle);
1a001d60:	4620      	mov	r0, r4
1a001d62:	f7ff ffe0 	bl	1a001d26 <enseq_Conmutador_SIN_CONMUTACION_default>
}
1a001d66:	bd10      	pop	{r4, pc}

1a001d68 <react_Conmutador_GRUPO_CONMUTADO>:
{
1a001d68:	b510      	push	{r4, lr}
1a001d6a:	4604      	mov	r4, r0
	if (check_Conmutador_GRUPO_CONMUTADO_tr0_tr0(handle) == bool_true)
1a001d6c:	f7ff f9c3 	bl	1a0010f6 <check_Conmutador_GRUPO_CONMUTADO_tr0_tr0>
1a001d70:	b920      	cbnz	r0, 1a001d7c <react_Conmutador_GRUPO_CONMUTADO+0x14>
		if (check_Conmutador_GRUPO_CONMUTADO_tr1_tr1(handle) == bool_true)
1a001d72:	4620      	mov	r0, r4
1a001d74:	f7ff f9c2 	bl	1a0010fc <check_Conmutador_GRUPO_CONMUTADO_tr1_tr1>
1a001d78:	b920      	cbnz	r0, 1a001d84 <react_Conmutador_GRUPO_CONMUTADO+0x1c>
}
1a001d7a:	bd10      	pop	{r4, pc}
		effect_Conmutador_GRUPO_CONMUTADO_tr0(handle);
1a001d7c:	4620      	mov	r0, r4
1a001d7e:	f7ff ffdb 	bl	1a001d38 <effect_Conmutador_GRUPO_CONMUTADO_tr0>
1a001d82:	e7fa      	b.n	1a001d7a <react_Conmutador_GRUPO_CONMUTADO+0x12>
			effect_Conmutador_GRUPO_CONMUTADO_tr1(handle);
1a001d84:	4620      	mov	r0, r4
1a001d86:	f7ff ffe3 	bl	1a001d50 <effect_Conmutador_GRUPO_CONMUTADO_tr1>
}
1a001d8a:	e7f6      	b.n	1a001d7a <react_Conmutador_GRUPO_CONMUTADO+0x12>

1a001d8c <effect_Conmutador_RED_CONMUTADA_tr0>:
{
1a001d8c:	b510      	push	{r4, lr}
1a001d8e:	4604      	mov	r4, r0
	exseq_Conmutador_RED_CONMUTADA(handle);
1a001d90:	f7ff fac9 	bl	1a001326 <exseq_Conmutador_RED_CONMUTADA>
	handle->iface.conmutacionRed = 0;
1a001d94:	2300      	movs	r3, #0
1a001d96:	6323      	str	r3, [r4, #48]	; 0x30
	handle->iface.conmutacionGrupo = 1;
1a001d98:	2301      	movs	r3, #1
1a001d9a:	6363      	str	r3, [r4, #52]	; 0x34
	enseq_Conmutador_SIN_CONMUTACION_default(handle);
1a001d9c:	4620      	mov	r0, r4
1a001d9e:	f7ff ffc2 	bl	1a001d26 <enseq_Conmutador_SIN_CONMUTACION_default>
}
1a001da2:	bd10      	pop	{r4, pc}

1a001da4 <effect_Conmutador_RED_CONMUTADA_tr1>:
{
1a001da4:	b510      	push	{r4, lr}
1a001da6:	4604      	mov	r4, r0
	exseq_Conmutador_RED_CONMUTADA(handle);
1a001da8:	f7ff fabd 	bl	1a001326 <exseq_Conmutador_RED_CONMUTADA>
	handle->iface.conmutacionRed = 0;
1a001dac:	2300      	movs	r3, #0
1a001dae:	6323      	str	r3, [r4, #48]	; 0x30
	handle->iface.conmutacionGrupo = 1;
1a001db0:	2301      	movs	r3, #1
1a001db2:	6363      	str	r3, [r4, #52]	; 0x34
	enseq_Conmutador_SIN_CONMUTACION_default(handle);
1a001db4:	4620      	mov	r0, r4
1a001db6:	f7ff ffb6 	bl	1a001d26 <enseq_Conmutador_SIN_CONMUTACION_default>
}
1a001dba:	bd10      	pop	{r4, pc}

1a001dbc <react_Conmutador_RED_CONMUTADA>:
{
1a001dbc:	b510      	push	{r4, lr}
1a001dbe:	4604      	mov	r4, r0
	if (check_Conmutador_RED_CONMUTADA_tr0_tr0(handle) == bool_true)
1a001dc0:	f7ff f9a7 	bl	1a001112 <check_Conmutador_RED_CONMUTADA_tr0_tr0>
1a001dc4:	b920      	cbnz	r0, 1a001dd0 <react_Conmutador_RED_CONMUTADA+0x14>
		if (check_Conmutador_RED_CONMUTADA_tr1_tr1(handle) == bool_true)
1a001dc6:	4620      	mov	r0, r4
1a001dc8:	f7ff f9af 	bl	1a00112a <check_Conmutador_RED_CONMUTADA_tr1_tr1>
1a001dcc:	b920      	cbnz	r0, 1a001dd8 <react_Conmutador_RED_CONMUTADA+0x1c>
}
1a001dce:	bd10      	pop	{r4, pc}
		effect_Conmutador_RED_CONMUTADA_tr0(handle);
1a001dd0:	4620      	mov	r0, r4
1a001dd2:	f7ff ffdb 	bl	1a001d8c <effect_Conmutador_RED_CONMUTADA_tr0>
1a001dd6:	e7fa      	b.n	1a001dce <react_Conmutador_RED_CONMUTADA+0x12>
			effect_Conmutador_RED_CONMUTADA_tr1(handle);
1a001dd8:	4620      	mov	r0, r4
1a001dda:	f7ff ffe3 	bl	1a001da4 <effect_Conmutador_RED_CONMUTADA_tr1>
}
1a001dde:	e7f6      	b.n	1a001dce <react_Conmutador_RED_CONMUTADA+0x12>

1a001de0 <enact_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>:
{
1a001de0:	b510      	push	{r4, lr}
1a001de2:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev0_raised) , 1000, bool_false);
1a001de4:	2300      	movs	r3, #0
1a001de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001dea:	f100 0155 	add.w	r1, r0, #85	; 0x55
1a001dee:	f7fe fc1b 	bl	1a000628 <proyecto_setTimer>
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev1_raised) , 1000, bool_false);
1a001df2:	2300      	movs	r3, #0
1a001df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001df8:	f104 0156 	add.w	r1, r4, #86	; 0x56
1a001dfc:	4620      	mov	r0, r4
1a001dfe:	f7fe fc13 	bl	1a000628 <proyecto_setTimer>
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev2_raised) , 1000, bool_false);
1a001e02:	2300      	movs	r3, #0
1a001e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001e08:	f104 0157 	add.w	r1, r4, #87	; 0x57
1a001e0c:	4620      	mov	r0, r4
1a001e0e:	f7fe fc0b 	bl	1a000628 <proyecto_setTimer>
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_tev3_raised) , 1000, bool_false);
1a001e12:	2300      	movs	r3, #0
1a001e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001e18:	f104 0158 	add.w	r1, r4, #88	; 0x58
1a001e1c:	4620      	mov	r0, r4
1a001e1e:	f7fe fc03 	bl	1a000628 <proyecto_setTimer>
	handle->iface.isGrupoOn = proyectoIface_grupoStatus(handle, PROYECTO_PROYECTOIFACE_GPIO2);
1a001e22:	211f      	movs	r1, #31
1a001e24:	4620      	mov	r0, r4
1a001e26:	f7fe fa95 	bl	1a000354 <proyectoIface_grupoStatus>
1a001e2a:	f884 0020 	strb.w	r0, [r4, #32]
}
1a001e2e:	bd10      	pop	{r4, pc}

1a001e30 <enseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_default>:
{
1a001e30:	b510      	push	{r4, lr}
1a001e32:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_CHEQUEO_ENCENDIDO(handle);
1a001e34:	f7ff ffd4 	bl	1a001de0 <enact_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_CHEQUEO_ENCENDIDO;
1a001e38:	230e      	movs	r3, #14
1a001e3a:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a001e3c:	2304      	movs	r3, #4
1a001e3e:	60a3      	str	r3, [r4, #8]
}
1a001e40:	bd10      	pop	{r4, pc}

1a001e42 <effect_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0>:
{
1a001e42:	b510      	push	{r4, lr}
1a001e44:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO(handle);
1a001e46:	f7ff fcdc 	bl	1a001802 <exseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO>
	handle->internal.intentoArranque += 1;
1a001e4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a001e4c:	3301      	adds	r3, #1
1a001e4e:	64e3      	str	r3, [r4, #76]	; 0x4c
	enseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_default(handle);
1a001e50:	4620      	mov	r0, r4
1a001e52:	f7ff ffed 	bl	1a001e30 <enseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_default>
}
1a001e56:	bd10      	pop	{r4, pc}

1a001e58 <effect_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1>:
{
1a001e58:	b510      	push	{r4, lr}
1a001e5a:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO(handle);
1a001e5c:	f7ff fcd1 	bl	1a001802 <exseq_Grupo_Electrogeno_ESTABILIZACION_GRUPO>
	enseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_default(handle);
1a001e60:	4620      	mov	r0, r4
1a001e62:	f7ff ffe5 	bl	1a001e30 <enseq_Grupo_Electrogeno_CHEQUEO_ENCENDIDO_default>
}
1a001e66:	bd10      	pop	{r4, pc}

1a001e68 <react_Grupo_Electrogeno_ESTABILIZACION_GRUPO>:
{
1a001e68:	b510      	push	{r4, lr}
1a001e6a:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0_tr0(handle) == bool_true)
1a001e6c:	f7ff f8ea 	bl	1a001044 <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0_tr0>
1a001e70:	b920      	cbnz	r0, 1a001e7c <react_Grupo_Electrogeno_ESTABILIZACION_GRUPO+0x14>
		if (check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1_tr1(handle) == bool_true)
1a001e72:	4620      	mov	r0, r4
1a001e74:	f7ff f8f6 	bl	1a001064 <check_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1_tr1>
1a001e78:	b920      	cbnz	r0, 1a001e84 <react_Grupo_Electrogeno_ESTABILIZACION_GRUPO+0x1c>
}
1a001e7a:	bd10      	pop	{r4, pc}
		effect_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0(handle);
1a001e7c:	4620      	mov	r0, r4
1a001e7e:	f7ff ffe0 	bl	1a001e42 <effect_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr0>
1a001e82:	e7fa      	b.n	1a001e7a <react_Grupo_Electrogeno_ESTABILIZACION_GRUPO+0x12>
			effect_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1(handle);
1a001e84:	4620      	mov	r0, r4
1a001e86:	f7ff ffe7 	bl	1a001e58 <effect_Grupo_Electrogeno_ESTABILIZACION_GRUPO_tr1>
}
1a001e8a:	e7f6      	b.n	1a001e7a <react_Grupo_Electrogeno_ESTABILIZACION_GRUPO+0x12>

1a001e8c <enact_Grupo_Electrogeno_CHEQUEO_APAGADO>:
{
1a001e8c:	b510      	push	{r4, lr}
1a001e8e:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO_tev0_raised) , 500, bool_false);
1a001e90:	2300      	movs	r3, #0
1a001e92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a001e96:	f100 015d 	add.w	r1, r0, #93	; 0x5d
1a001e9a:	f7fe fbc5 	bl	1a000628 <proyecto_setTimer>
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO_tev1_raised) , 1000, bool_false);
1a001e9e:	2300      	movs	r3, #0
1a001ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001ea4:	f104 015e 	add.w	r1, r4, #94	; 0x5e
1a001ea8:	4620      	mov	r0, r4
1a001eaa:	f7fe fbbd 	bl	1a000628 <proyecto_setTimer>
	handle->iface.isGrupoOn = proyectoIface_grupoStatus(handle, PROYECTO_PROYECTOIFACE_GPIO2);
1a001eae:	211f      	movs	r1, #31
1a001eb0:	4620      	mov	r0, r4
1a001eb2:	f7fe fa4f 	bl	1a000354 <proyectoIface_grupoStatus>
1a001eb6:	f884 0020 	strb.w	r0, [r4, #32]
	proyectoIface_switchSalida(handle, PROYECTO_PROYECTOIFACE_GPIO3, PROYECTO_PROYECTOIFACE_OUT_OFF);
1a001eba:	2200      	movs	r2, #0
1a001ebc:	210e      	movs	r1, #14
1a001ebe:	4620      	mov	r0, r4
1a001ec0:	f7fe fa42 	bl	1a000348 <proyectoIface_switchSalida>
}
1a001ec4:	bd10      	pop	{r4, pc}

1a001ec6 <enseq_Grupo_Electrogeno_CHEQUEO_APAGADO_default>:
{
1a001ec6:	b510      	push	{r4, lr}
1a001ec8:	4604      	mov	r4, r0
	enact_Grupo_Electrogeno_CHEQUEO_APAGADO(handle);
1a001eca:	f7ff ffdf 	bl	1a001e8c <enact_Grupo_Electrogeno_CHEQUEO_APAGADO>
	handle->stateConfVector[4] = Proyecto_Grupo_Electrogeno_CHEQUEO_APAGADO;
1a001ece:	2315      	movs	r3, #21
1a001ed0:	7123      	strb	r3, [r4, #4]
	handle->stateConfVectorPosition = 4;
1a001ed2:	2304      	movs	r3, #4
1a001ed4:	60a3      	str	r3, [r4, #8]
}
1a001ed6:	bd10      	pop	{r4, pc}

1a001ed8 <effect_Grupo_Electrogeno_APAGANDO_GRUPO_tr0>:
{
1a001ed8:	b510      	push	{r4, lr}
1a001eda:	4604      	mov	r4, r0
	exseq_Grupo_Electrogeno_APAGANDO_GRUPO(handle);
1a001edc:	f7ff fc9f 	bl	1a00181e <exseq_Grupo_Electrogeno_APAGANDO_GRUPO>
	enseq_Grupo_Electrogeno_CHEQUEO_APAGADO_default(handle);
1a001ee0:	4620      	mov	r0, r4
1a001ee2:	f7ff fff0 	bl	1a001ec6 <enseq_Grupo_Electrogeno_CHEQUEO_APAGADO_default>
}
1a001ee6:	bd10      	pop	{r4, pc}

1a001ee8 <react_Grupo_Electrogeno_APAGANDO_GRUPO>:
{
1a001ee8:	b510      	push	{r4, lr}
1a001eea:	4604      	mov	r4, r0
	if (check_Grupo_Electrogeno_APAGANDO_GRUPO_tr0_tr0(handle) == bool_true)
1a001eec:	f7ff f8c6 	bl	1a00107c <check_Grupo_Electrogeno_APAGANDO_GRUPO_tr0_tr0>
1a001ef0:	b900      	cbnz	r0, 1a001ef4 <react_Grupo_Electrogeno_APAGANDO_GRUPO+0xc>
}
1a001ef2:	bd10      	pop	{r4, pc}
		effect_Grupo_Electrogeno_APAGANDO_GRUPO_tr0(handle);
1a001ef4:	4620      	mov	r0, r4
1a001ef6:	f7ff ffef 	bl	1a001ed8 <effect_Grupo_Electrogeno_APAGANDO_GRUPO_tr0>
}
1a001efa:	e7fa      	b.n	1a001ef2 <react_Grupo_Electrogeno_APAGANDO_GRUPO+0xa>

1a001efc <enact_Display_MOSTRAR_VALORES>:
{
1a001efc:	b510      	push	{r4, lr}
1a001efe:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Display_MOSTRAR_VALORES_tev0_raised) , 1200, bool_false);
1a001f00:	2300      	movs	r3, #0
1a001f02:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
1a001f06:	f100 015f 	add.w	r1, r0, #95	; 0x5f
1a001f0a:	f7fe fb8d 	bl	1a000628 <proyecto_setTimer>
	proyectoIface_displayValores(handle);
1a001f0e:	4620      	mov	r0, r4
1a001f10:	f7fe fa28 	bl	1a000364 <proyectoIface_displayValores>
}
1a001f14:	bd10      	pop	{r4, pc}

1a001f16 <enseq_Display_MOSTRAR_VALORES_default>:
{
1a001f16:	b510      	push	{r4, lr}
1a001f18:	4604      	mov	r4, r0
	enact_Display_MOSTRAR_VALORES(handle);
1a001f1a:	f7ff ffef 	bl	1a001efc <enact_Display_MOSTRAR_VALORES>
	handle->stateConfVector[5] = Proyecto_Display_MOSTRAR_VALORES;
1a001f1e:	2318      	movs	r3, #24
1a001f20:	7163      	strb	r3, [r4, #5]
	handle->stateConfVectorPosition = 5;
1a001f22:	2305      	movs	r3, #5
1a001f24:	60a3      	str	r3, [r4, #8]
}
1a001f26:	bd10      	pop	{r4, pc}

1a001f28 <effect_Display_IDLE_tr0>:
{
1a001f28:	b510      	push	{r4, lr}
1a001f2a:	4604      	mov	r4, r0
	exseq_Display_IDLE(handle);
1a001f2c:	f7ff f9f1 	bl	1a001312 <exseq_Display_IDLE>
	handle->iface.numDisplay += 1;
1a001f30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001f32:	3301      	adds	r3, #1
1a001f34:	62e3      	str	r3, [r4, #44]	; 0x2c
	enseq_Display_MOSTRAR_VALORES_default(handle);
1a001f36:	4620      	mov	r0, r4
1a001f38:	f7ff ffed 	bl	1a001f16 <enseq_Display_MOSTRAR_VALORES_default>
}
1a001f3c:	bd10      	pop	{r4, pc}

1a001f3e <react_Display_IDLE>:
{
1a001f3e:	b510      	push	{r4, lr}
1a001f40:	4604      	mov	r4, r0
	if (check_Display_IDLE_tr0_tr0(handle) == bool_true)
1a001f42:	f7ff f8ca 	bl	1a0010da <check_Display_IDLE_tr0_tr0>
1a001f46:	b920      	cbnz	r0, 1a001f52 <react_Display_IDLE+0x14>
		if (check_Display_IDLE_lr0_lr0(handle) == bool_true)
1a001f48:	4620      	mov	r0, r4
1a001f4a:	f7ff f8c0 	bl	1a0010ce <check_Display_IDLE_lr0_lr0>
1a001f4e:	b920      	cbnz	r0, 1a001f5a <react_Display_IDLE+0x1c>
}
1a001f50:	bd10      	pop	{r4, pc}
		effect_Display_IDLE_tr0(handle);
1a001f52:	4620      	mov	r0, r4
1a001f54:	f7ff ffe8 	bl	1a001f28 <effect_Display_IDLE_tr0>
1a001f58:	e7fa      	b.n	1a001f50 <react_Display_IDLE+0x12>
			effect_Display_IDLE_lr0_lr0(handle);
1a001f5a:	4620      	mov	r0, r4
1a001f5c:	f7ff f918 	bl	1a001190 <effect_Display_IDLE_lr0_lr0>
}
1a001f60:	e7f6      	b.n	1a001f50 <react_Display_IDLE+0x12>

1a001f62 <enact_Sensor_Temp_LEYENDO_TEMP>:
{
1a001f62:	b510      	push	{r4, lr}
1a001f64:	4604      	mov	r4, r0
	proyecto_setTimer(handle, (sc_eventid) &(handle->timeEvents.proyecto_Sensor_Temp_LEYENDO_TEMP_tev0_raised) , 500, bool_false);
1a001f66:	2300      	movs	r3, #0
1a001f68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a001f6c:	f100 0162 	add.w	r1, r0, #98	; 0x62
1a001f70:	f7fe fb5a 	bl	1a000628 <proyecto_setTimer>
	proyectoIface_guardarTemp(handle);
1a001f74:	4620      	mov	r0, r4
1a001f76:	f7fe fb3f 	bl	1a0005f8 <proyectoIface_guardarTemp>
}
1a001f7a:	bd10      	pop	{r4, pc}

1a001f7c <enseq_Sensor_Temp_LEYENDO_TEMP_default>:
{
1a001f7c:	b510      	push	{r4, lr}
1a001f7e:	4604      	mov	r4, r0
	enact_Sensor_Temp_LEYENDO_TEMP(handle);
1a001f80:	f7ff ffef 	bl	1a001f62 <enact_Sensor_Temp_LEYENDO_TEMP>
	handle->stateConfVector[7] = Proyecto_Sensor_Temp_LEYENDO_TEMP;
1a001f84:	231e      	movs	r3, #30
1a001f86:	71e3      	strb	r3, [r4, #7]
	handle->stateConfVectorPosition = 7;
1a001f88:	2307      	movs	r3, #7
1a001f8a:	60a3      	str	r3, [r4, #8]
}
1a001f8c:	bd10      	pop	{r4, pc}

1a001f8e <effect_Sensor_Temp_IDLE_tr0>:
{
1a001f8e:	b510      	push	{r4, lr}
1a001f90:	4604      	mov	r4, r0
	exseq_Sensor_Temp_IDLE(handle);
1a001f92:	f7ff f9d2 	bl	1a00133a <exseq_Sensor_Temp_IDLE>
	enseq_Sensor_Temp_LEYENDO_TEMP_default(handle);
1a001f96:	4620      	mov	r0, r4
1a001f98:	f7ff fff0 	bl	1a001f7c <enseq_Sensor_Temp_LEYENDO_TEMP_default>
}
1a001f9c:	bd10      	pop	{r4, pc}

1a001f9e <react_Sensor_Temp_IDLE>:
{
1a001f9e:	b510      	push	{r4, lr}
1a001fa0:	4604      	mov	r4, r0
	if (check_Sensor_Temp_IDLE_tr0_tr0(handle) == bool_true)
1a001fa2:	f7ff f8f0 	bl	1a001186 <check_Sensor_Temp_IDLE_tr0_tr0>
1a001fa6:	b900      	cbnz	r0, 1a001faa <react_Sensor_Temp_IDLE+0xc>
}
1a001fa8:	bd10      	pop	{r4, pc}
		effect_Sensor_Temp_IDLE_tr0(handle);
1a001faa:	4620      	mov	r0, r4
1a001fac:	f7ff ffef 	bl	1a001f8e <effect_Sensor_Temp_IDLE_tr0>
}
1a001fb0:	e7fa      	b.n	1a001fa8 <react_Sensor_Temp_IDLE+0xa>

1a001fb2 <proyecto_init>:
{
1a001fb2:	b538      	push	{r3, r4, r5, lr}
1a001fb4:	4604      	mov	r4, r0
		for (i = 0; i < PROYECTO_MAX_ORTHOGONAL_STATES; ++i)
1a001fb6:	2300      	movs	r3, #0
1a001fb8:	e002      	b.n	1a001fc0 <proyecto_init+0xe>
			handle->stateConfVector[i] = Proyecto_last_state;
1a001fba:	2200      	movs	r2, #0
1a001fbc:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < PROYECTO_MAX_ORTHOGONAL_STATES; ++i)
1a001fbe:	3301      	adds	r3, #1
1a001fc0:	2b07      	cmp	r3, #7
1a001fc2:	ddfa      	ble.n	1a001fba <proyecto_init+0x8>
		handle->stateConfVectorPosition = 0;
1a001fc4:	2500      	movs	r5, #0
1a001fc6:	60a5      	str	r5, [r4, #8]
		clearInEvents(handle);
1a001fc8:	4620      	mov	r0, r4
1a001fca:	f7fe ff21 	bl	1a000e10 <clearInEvents>
		handle->iface.estadoLuz = 0;
1a001fce:	61e5      	str	r5, [r4, #28]
		handle->iface.isGrupoOn = bool_false;
1a001fd0:	f884 5020 	strb.w	r5, [r4, #32]
		handle->iface.isContactoOn = bool_false;
1a001fd4:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
		handle->iface.modoGrupo = 1;
1a001fd8:	2301      	movs	r3, #1
1a001fda:	6263      	str	r3, [r4, #36]	; 0x24
		handle->iface.grupoExito = bool_false;
1a001fdc:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
		handle->iface.grupoFalla = bool_false;
1a001fe0:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
		handle->iface.numDisplay = 0;
1a001fe4:	62e5      	str	r5, [r4, #44]	; 0x2c
		handle->iface.conmutacionRed = 0;
1a001fe6:	6325      	str	r5, [r4, #48]	; 0x30
		handle->iface.conmutacionGrupo = 0;
1a001fe8:	6365      	str	r5, [r4, #52]	; 0x34
		handle->iface.temperatura = 0.0;
1a001fea:	2200      	movs	r2, #0
1a001fec:	2300      	movs	r3, #0
1a001fee:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
		handle->internal.viTecla = 0;
1a001ff2:	64a5      	str	r5, [r4, #72]	; 0x48
		handle->internal.intentoArranque = 0;
1a001ff4:	64e5      	str	r5, [r4, #76]	; 0x4c
}
1a001ff6:	bd38      	pop	{r3, r4, r5, pc}

1a001ff8 <proyecto_enter>:
{
1a001ff8:	b510      	push	{r4, lr}
1a001ffa:	4604      	mov	r4, r0
	enseq_TECX_default(handle);
1a001ffc:	f7ff f9e3 	bl	1a0013c6 <enseq_TECX_default>
	enseq_Teclas_default(handle);
1a002000:	4620      	mov	r0, r4
1a002002:	f7ff f9e8 	bl	1a0013d6 <enseq_Teclas_default>
	enseq_Modo_Grupo_default(handle);
1a002006:	4620      	mov	r0, r4
1a002008:	f7ff fa0c 	bl	1a001424 <enseq_Modo_Grupo_default>
	enseq_Servicio_Red_default(handle);
1a00200c:	4620      	mov	r0, r4
1a00200e:	f7ff fa26 	bl	1a00145e <enseq_Servicio_Red_default>
	enseq_Grupo_Electrogeno_default(handle);
1a002012:	4620      	mov	r0, r4
1a002014:	f7ff fa42 	bl	1a00149c <enseq_Grupo_Electrogeno_default>
	enseq_Display_default(handle);
1a002018:	4620      	mov	r0, r4
1a00201a:	f7ff f9e4 	bl	1a0013e6 <enseq_Display_default>
	enseq_Conmutador_default(handle);
1a00201e:	4620      	mov	r0, r4
1a002020:	f7ff faaa 	bl	1a001578 <enseq_Conmutador_default>
	enseq_Sensor_Temp_default(handle);
1a002024:	4620      	mov	r0, r4
1a002026:	f7ff f9e6 	bl	1a0013f6 <enseq_Sensor_Temp_default>
}
1a00202a:	bd10      	pop	{r4, pc}

1a00202c <proyecto_runCycle>:
{
1a00202c:	b510      	push	{r4, lr}
1a00202e:	4604      	mov	r4, r0
	for (handle->stateConfVectorPosition = 0;
1a002030:	2300      	movs	r3, #0
1a002032:	6083      	str	r3, [r0, #8]
1a002034:	e005      	b.n	1a002042 <proyecto_runCycle+0x16>
			react_TECX_DEBOUNCE(handle);
1a002036:	4620      	mov	r0, r4
1a002038:	f7ff fb01 	bl	1a00163e <react_TECX_DEBOUNCE>
		handle->stateConfVectorPosition++)
1a00203c:	68a3      	ldr	r3, [r4, #8]
1a00203e:	3301      	adds	r3, #1
1a002040:	60a3      	str	r3, [r4, #8]
		handle->stateConfVectorPosition < PROYECTO_MAX_ORTHOGONAL_STATES;
1a002042:	68a3      	ldr	r3, [r4, #8]
	for (handle->stateConfVectorPosition = 0;
1a002044:	2b07      	cmp	r3, #7
1a002046:	f200 80b7 	bhi.w	1a0021b8 <proyecto_runCycle+0x18c>
		switch (handle->stateConfVector[handle->stateConfVectorPosition])
1a00204a:	5ce3      	ldrb	r3, [r4, r3]
1a00204c:	3b01      	subs	r3, #1
1a00204e:	2b1d      	cmp	r3, #29
1a002050:	d8f4      	bhi.n	1a00203c <proyecto_runCycle+0x10>
1a002052:	a201      	add	r2, pc, #4	; (adr r2, 1a002058 <proyecto_runCycle+0x2c>)
1a002054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002058:	1a002037 	.word	0x1a002037
1a00205c:	1a0020d1 	.word	0x1a0020d1
1a002060:	1a0020d9 	.word	0x1a0020d9
1a002064:	1a0020e1 	.word	0x1a0020e1
1a002068:	1a0020e9 	.word	0x1a0020e9
1a00206c:	1a0020f1 	.word	0x1a0020f1
1a002070:	1a0020f9 	.word	0x1a0020f9
1a002074:	1a002101 	.word	0x1a002101
1a002078:	1a002109 	.word	0x1a002109
1a00207c:	1a002111 	.word	0x1a002111
1a002080:	1a002119 	.word	0x1a002119
1a002084:	1a002121 	.word	0x1a002121
1a002088:	1a002129 	.word	0x1a002129
1a00208c:	1a002131 	.word	0x1a002131
1a002090:	1a002139 	.word	0x1a002139
1a002094:	1a002141 	.word	0x1a002141
1a002098:	1a002149 	.word	0x1a002149
1a00209c:	1a002151 	.word	0x1a002151
1a0020a0:	1a002159 	.word	0x1a002159
1a0020a4:	1a002161 	.word	0x1a002161
1a0020a8:	1a002169 	.word	0x1a002169
1a0020ac:	1a002171 	.word	0x1a002171
1a0020b0:	1a002179 	.word	0x1a002179
1a0020b4:	1a002181 	.word	0x1a002181
1a0020b8:	1a002189 	.word	0x1a002189
1a0020bc:	1a002191 	.word	0x1a002191
1a0020c0:	1a002199 	.word	0x1a002199
1a0020c4:	1a0021a1 	.word	0x1a0021a1
1a0020c8:	1a0021a9 	.word	0x1a0021a9
1a0020cc:	1a0021b1 	.word	0x1a0021b1
			react_TECX_NO_OPRIMIDO(handle);
1a0020d0:	4620      	mov	r0, r4
1a0020d2:	f7ff fc4f 	bl	1a001974 <react_TECX_NO_OPRIMIDO>
			break;
1a0020d6:	e7b1      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_TECX_OPRIMIDO(handle);
1a0020d8:	4620      	mov	r0, r4
1a0020da:	f7ff f933 	bl	1a001344 <react_TECX_OPRIMIDO>
			break;
1a0020de:	e7ad      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_TECX_VALIDACION(handle);
1a0020e0:	4620      	mov	r0, r4
1a0020e2:	f7ff f939 	bl	1a001358 <react_TECX_VALIDACION>
			break;
1a0020e6:	e7a9      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Teclas_ESPERA(handle);
1a0020e8:	4620      	mov	r0, r4
1a0020ea:	f7ff f947 	bl	1a00137c <react_Teclas_ESPERA>
			break;
1a0020ee:	e7a5      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Modo_Grupo_MANUAL(handle);
1a0020f0:	4620      	mov	r0, r4
1a0020f2:	f7ff fc6e 	bl	1a0019d2 <react_Modo_Grupo_MANUAL>
			break;
1a0020f6:	e7a1      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Modo_Grupo_AUTOMATICO(handle);
1a0020f8:	4620      	mov	r0, r4
1a0020fa:	f7ff fc7e 	bl	1a0019fa <react_Modo_Grupo_AUTOMATICO>
			break;
1a0020fe:	e79d      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Modo_Grupo_TRANSICION_MODOS(handle);
1a002100:	4620      	mov	r0, r4
1a002102:	f7ff faca 	bl	1a00169a <react_Modo_Grupo_TRANSICION_MODOS>
			break;
1a002106:	e799      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Servicio_Red_HAY_LUZ(handle);
1a002108:	4620      	mov	r0, r4
1a00210a:	f7ff fc9a 	bl	1a001a42 <react_Servicio_Red_HAY_LUZ>
			break;
1a00210e:	e795      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Servicio_Red_ESPERA(handle);
1a002110:	4620      	mov	r0, r4
1a002112:	f7ff faea 	bl	1a0016ea <react_Servicio_Red_ESPERA>
			break;
1a002116:	e791      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Servicio_Red_VALIDACION(handle);
1a002118:	4620      	mov	r0, r4
1a00211a:	f7ff f9ee 	bl	1a0014fa <react_Servicio_Red_VALIDACION>
			break;
1a00211e:	e78d      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Servicio_Red_NO_HAY_LUZ(handle);
1a002120:	4620      	mov	r0, r4
1a002122:	f7ff fca0 	bl	1a001a66 <react_Servicio_Red_NO_HAY_LUZ>
			break;
1a002126:	e789      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_GRUPO_APAGADO(handle);
1a002128:	4620      	mov	r0, r4
1a00212a:	f7ff fafe 	bl	1a00172a <react_Grupo_Electrogeno_GRUPO_APAGADO>
			break;
1a00212e:	e785      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO(handle);
1a002130:	4620      	mov	r0, r4
1a002132:	f7ff fcc7 	bl	1a001ac4 <react_Grupo_Electrogeno_CHEQUEO_ENCENDIDO>
			break;
1a002136:	e781      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_ARRANQUE_EXITO(handle);
1a002138:	4620      	mov	r0, r4
1a00213a:	f7ff fd2e 	bl	1a001b9a <react_Grupo_Electrogeno_ARRANQUE_EXITO>
			break;
1a00213e:	e77d      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_FALLA(handle);
1a002140:	4620      	mov	r0, r4
1a002142:	f7ff fd7c 	bl	1a001c3e <react_Grupo_Electrogeno_FALLA>
			break;
1a002146:	e779      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_INICIO_ARRANQUE(handle);
1a002148:	4620      	mov	r0, r4
1a00214a:	f7ff fb44 	bl	1a0017d6 <react_Grupo_Electrogeno_INICIO_ARRANQUE>
			break;
1a00214e:	e775      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_ESTABILIZACION_GRUPO(handle);
1a002150:	4620      	mov	r0, r4
1a002152:	f7ff fe89 	bl	1a001e68 <react_Grupo_Electrogeno_ESTABILIZACION_GRUPO>
			break;
1a002156:	e771      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_APAGANDO_GRUPO(handle);
1a002158:	4620      	mov	r0, r4
1a00215a:	f7ff fec5 	bl	1a001ee8 <react_Grupo_Electrogeno_APAGANDO_GRUPO>
			break;
1a00215e:	e76d      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_ESPERA_GRUPO(handle);
1a002160:	4620      	mov	r0, r4
1a002162:	f7ff fce0 	bl	1a001b26 <react_Grupo_Electrogeno_ESPERA_GRUPO>
			break;
1a002166:	e769      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_CHEQUEO_APAGADO(handle);
1a002168:	4620      	mov	r0, r4
1a00216a:	f7ff fd82 	bl	1a001c72 <react_Grupo_Electrogeno_CHEQUEO_APAGADO>
			break;
1a00216e:	e765      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Grupo_Electrogeno_FIN_ARRANQUE(handle);
1a002170:	4620      	mov	r0, r4
1a002172:	f7ff fdb3 	bl	1a001cdc <react_Grupo_Electrogeno_FIN_ARRANQUE>
			break;
1a002176:	e761      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Display_IDLE(handle);
1a002178:	4620      	mov	r0, r4
1a00217a:	f7ff fee0 	bl	1a001f3e <react_Display_IDLE>
			break;
1a00217e:	e75d      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Display_MOSTRAR_VALORES(handle);
1a002180:	4620      	mov	r0, r4
1a002182:	f7ff fb7e 	bl	1a001882 <react_Display_MOSTRAR_VALORES>
			break;
1a002186:	e759      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Conmutador_GRUPO_CONMUTADO(handle);
1a002188:	4620      	mov	r0, r4
1a00218a:	f7ff fded 	bl	1a001d68 <react_Conmutador_GRUPO_CONMUTADO>
			break;
1a00218e:	e755      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Conmutador_RED_CONMUTADA(handle);
1a002190:	4620      	mov	r0, r4
1a002192:	f7ff fe13 	bl	1a001dbc <react_Conmutador_RED_CONMUTADA>
			break;
1a002196:	e751      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Conmutador_SIN_CONMUTACION(handle);
1a002198:	4620      	mov	r0, r4
1a00219a:	f7ff fba0 	bl	1a0018de <react_Conmutador_SIN_CONMUTACION>
			break;
1a00219e:	e74d      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Conmutador_CONMUTACION_INICIAL(handle);
1a0021a0:	4620      	mov	r0, r4
1a0021a2:	f7ff fa16 	bl	1a0015d2 <react_Conmutador_CONMUTACION_INICIAL>
			break;
1a0021a6:	e749      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Sensor_Temp_IDLE(handle);
1a0021a8:	4620      	mov	r0, r4
1a0021aa:	f7ff fef8 	bl	1a001f9e <react_Sensor_Temp_IDLE>
			break;
1a0021ae:	e745      	b.n	1a00203c <proyecto_runCycle+0x10>
			react_Sensor_Temp_LEYENDO_TEMP(handle);
1a0021b0:	4620      	mov	r0, r4
1a0021b2:	f7ff fbbc 	bl	1a00192e <react_Sensor_Temp_LEYENDO_TEMP>
			break;
1a0021b6:	e741      	b.n	1a00203c <proyecto_runCycle+0x10>
	clearInEvents(handle);
1a0021b8:	4620      	mov	r0, r4
1a0021ba:	f7fe fe29 	bl	1a000e10 <clearInEvents>
}
1a0021be:	bd10      	pop	{r4, pc}

1a0021c0 <proyecto_raiseTimeEvent>:
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
1a0021c0:	3050      	adds	r0, #80	; 0x50
1a0021c2:	4288      	cmp	r0, r1
1a0021c4:	dc04      	bgt.n	1a0021d0 <proyecto_raiseTimeEvent+0x10>
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + sizeof(ProyectoTimeEvents))
1a0021c6:	3013      	adds	r0, #19
1a0021c8:	4288      	cmp	r0, r1
1a0021ca:	d901      	bls.n	1a0021d0 <proyecto_raiseTimeEvent+0x10>
		*(sc_boolean*)evid = bool_true;
1a0021cc:	2301      	movs	r3, #1
1a0021ce:	700b      	strb	r3, [r1, #0]
}
1a0021d0:	4770      	bx	lr

1a0021d2 <proyectoIface_raise_evTECXNoOprimido>:
	handle->iface.evTECXNoOprimido_raised = bool_true;
1a0021d2:	2301      	movs	r3, #1
1a0021d4:	7403      	strb	r3, [r0, #16]
}
1a0021d6:	4770      	bx	lr

1a0021d8 <proyectoIface_raise_evTECXOprimido>:
	handle->iface.evTECXOprimido_value = value;
1a0021d8:	6141      	str	r1, [r0, #20]
	handle->iface.evTECXOprimido_raised = bool_true;
1a0021da:	2301      	movs	r3, #1
1a0021dc:	7443      	strb	r3, [r0, #17]
}
1a0021de:	4770      	bx	lr

1a0021e0 <proyectoIface_raise_inputRedFalse>:
	handle->iface.InputRedFalse_raised = bool_true;
1a0021e0:	2301      	movs	r3, #1
1a0021e2:	7603      	strb	r3, [r0, #24]
}
1a0021e4:	4770      	bx	lr

1a0021e6 <proyectoIface_raise_inputRedTrue>:
	handle->iface.InputRedTrue_raised = bool_true;
1a0021e6:	2301      	movs	r3, #1
1a0021e8:	7643      	strb	r3, [r0, #25]
}
1a0021ea:	4770      	bx	lr

1a0021ec <proyectoIface_raise_showDisplay>:
	handle->iface.showDisplay_raised = bool_true;
1a0021ec:	2301      	movs	r3, #1
1a0021ee:	7683      	strb	r3, [r0, #26]
}
1a0021f0:	4770      	bx	lr

1a0021f2 <proyectoIface_raise_leerTemp>:
	handle->iface.leerTemp_raised = bool_true;
1a0021f2:	2301      	movs	r3, #1
1a0021f4:	76c3      	strb	r3, [r0, #27]
}
1a0021f6:	4770      	bx	lr

1a0021f8 <proyectoIface_get_estadoLuz>:
}
1a0021f8:	69c0      	ldr	r0, [r0, #28]
1a0021fa:	4770      	bx	lr

1a0021fc <proyectoIface_get_modoGrupo>:
}
1a0021fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
1a0021fe:	4770      	bx	lr

1a002200 <proyectoIface_get_grupoExito>:
}
1a002200:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
1a002204:	4770      	bx	lr

1a002206 <proyectoIface_get_grupoFalla>:
}
1a002206:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
1a00220a:	4770      	bx	lr

1a00220c <proyectoIface_get_numDisplay>:
}
1a00220c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00220e:	4770      	bx	lr

1a002210 <proyectoIface_get_conmutacionRed>:
}
1a002210:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002212:	4770      	bx	lr

1a002214 <proyectoIface_get_conmutacionGrupo>:
}
1a002214:	6b40      	ldr	r0, [r0, #52]	; 0x34
1a002216:	4770      	bx	lr

1a002218 <proyectoIface_get_temperatura>:
}
1a002218:	ed90 0b0e 	vldr	d0, [r0, #56]	; 0x38
1a00221c:	4770      	bx	lr

1a00221e <proyectoIface_set_temperatura>:
	handle->iface.temperatura = value;
1a00221e:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
}
1a002222:	4770      	bx	lr

1a002224 <InitTimerTicks>:
#include "Proyecto.h"
#include "TimerTicks.h"


void InitTimerTicks(TimerTicks *list, uint32_t len)
{
1a002224:	b430      	push	{r4, r5}
	uint32_t i;

	for(i = 0; i < len; i++) {
1a002226:	2400      	movs	r4, #0
1a002228:	428c      	cmp	r4, r1
1a00222a:	d20a      	bcs.n	1a002242 <InitTimerTicks+0x1e>
		list[i].evid = (sc_eventid)0;
1a00222c:	0125      	lsls	r5, r4, #4
1a00222e:	1942      	adds	r2, r0, r5
1a002230:	2300      	movs	r3, #0
1a002232:	5143      	str	r3, [r0, r5]
		list[i].time_ms = 0;
1a002234:	6053      	str	r3, [r2, #4]
		list[i].count = 0;
1a002236:	6093      	str	r3, [r2, #8]
		list[i].periodic = false;
1a002238:	7313      	strb	r3, [r2, #12]
		list[i].active = false;
1a00223a:	7353      	strb	r3, [r2, #13]
		list[i].evPending = false;
1a00223c:	7393      	strb	r3, [r2, #14]
	for(i = 0; i < len; i++) {
1a00223e:	3401      	adds	r4, #1
1a002240:	e7f2      	b.n	1a002228 <InitTimerTicks+0x4>
	}
}
1a002242:	bc30      	pop	{r4, r5}
1a002244:	4770      	bx	lr

1a002246 <SetNewTimerTick>:


sc_eventid SetNewTimerTick(TimerTicks *list, uint32_t len, sc_eventid evid, sc_uinteger time_ms, sc_boolean periodic)
{
1a002246:	b470      	push	{r4, r5, r6}
	uint32_t i;

	sc_eventid ret = (sc_eventid)0;
	for(i = 0; i < len; i++) {
1a002248:	2400      	movs	r4, #0
1a00224a:	428c      	cmp	r4, r1
1a00224c:	d211      	bcs.n	1a002272 <SetNewTimerTick+0x2c>
		if(!list[i].evid) {
1a00224e:	0125      	lsls	r5, r4, #4
1a002250:	1946      	adds	r6, r0, r5
1a002252:	5945      	ldr	r5, [r0, r5]
1a002254:	b10d      	cbz	r5, 1a00225a <SetNewTimerTick+0x14>
	for(i = 0; i < len; i++) {
1a002256:	3401      	adds	r4, #1
1a002258:	e7f7      	b.n	1a00224a <SetNewTimerTick+0x4>
			list[i].time_ms = time_ms;
1a00225a:	6073      	str	r3, [r6, #4]
			list[i].count = time_ms;
1a00225c:	60b3      	str	r3, [r6, #8]
			list[i].evid = evid;
1a00225e:	6032      	str	r2, [r6, #0]
			list[i].periodic = periodic;
1a002260:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002264:	7333      	strb	r3, [r6, #12]
			list[i].active = true;
1a002266:	2301      	movs	r3, #1
1a002268:	7373      	strb	r3, [r6, #13]
			list[i].evPending = false;
1a00226a:	2300      	movs	r3, #0
1a00226c:	73b3      	strb	r3, [r6, #14]
			ret = evid;
1a00226e:	4610      	mov	r0, r2
			break;
1a002270:	e000      	b.n	1a002274 <SetNewTimerTick+0x2e>
	sc_eventid ret = (sc_eventid)0;
1a002272:	2000      	movs	r0, #0
		}
	}
	return ret;
}
1a002274:	bc70      	pop	{r4, r5, r6}
1a002276:	4770      	bx	lr

1a002278 <UnsetTimerTick>:
void* UnsetTimerTick(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;
	sc_eventid ret = (sc_eventid)0;

	for(i = 0; i < len; i++) {
1a002278:	2300      	movs	r3, #0
1a00227a:	428b      	cmp	r3, r1
1a00227c:	d214      	bcs.n	1a0022a8 <UnsetTimerTick+0x30>
{
1a00227e:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a002280:	011c      	lsls	r4, r3, #4
1a002282:	1905      	adds	r5, r0, r4
1a002284:	5904      	ldr	r4, [r0, r4]
1a002286:	4294      	cmp	r4, r2
1a002288:	d004      	beq.n	1a002294 <UnsetTimerTick+0x1c>
	for(i = 0; i < len; i++) {
1a00228a:	3301      	adds	r3, #1
1a00228c:	428b      	cmp	r3, r1
1a00228e:	d3f7      	bcc.n	1a002280 <UnsetTimerTick+0x8>
	sc_eventid ret = (sc_eventid)0;
1a002290:	2000      	movs	r0, #0
			list[i].evPending = false;
			ret = id;
			break;
		}
	}
	return ret;
1a002292:	e007      	b.n	1a0022a4 <UnsetTimerTick+0x2c>
			list[i].evid = (sc_eventid)0;
1a002294:	2300      	movs	r3, #0
1a002296:	602b      	str	r3, [r5, #0]
			list[i].time_ms = 0;
1a002298:	606b      	str	r3, [r5, #4]
			list[i].count = 0;
1a00229a:	60ab      	str	r3, [r5, #8]
			list[i].periodic = false;
1a00229c:	732b      	strb	r3, [r5, #12]
			list[i].active = false;
1a00229e:	736b      	strb	r3, [r5, #13]
			list[i].evPending = false;
1a0022a0:	73ab      	strb	r3, [r5, #14]
			ret = id;
1a0022a2:	4610      	mov	r0, r2
}
1a0022a4:	bc30      	pop	{r4, r5}
1a0022a6:	4770      	bx	lr
	sc_eventid ret = (sc_eventid)0;
1a0022a8:	2000      	movs	r0, #0
}
1a0022aa:	4770      	bx	lr

1a0022ac <IsPendEvent>:

sc_boolean IsPendEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	int i;
	sc_boolean ret = false;
	for(i=0; i < len; i++) {
1a0022ac:	2300      	movs	r3, #0
1a0022ae:	428b      	cmp	r3, r1
1a0022b0:	d211      	bcs.n	1a0022d6 <IsPendEvent+0x2a>
{
1a0022b2:	b430      	push	{r4, r5}
1a0022b4:	e002      	b.n	1a0022bc <IsPendEvent+0x10>
	for(i=0; i < len; i++) {
1a0022b6:	3301      	adds	r3, #1
1a0022b8:	428b      	cmp	r3, r1
1a0022ba:	d209      	bcs.n	1a0022d0 <IsPendEvent+0x24>
		if((list[i].evid == id) && (list[i].evPending == true)) {
1a0022bc:	011c      	lsls	r4, r3, #4
1a0022be:	1905      	adds	r5, r0, r4
1a0022c0:	5904      	ldr	r4, [r0, r4]
1a0022c2:	4294      	cmp	r4, r2
1a0022c4:	d1f7      	bne.n	1a0022b6 <IsPendEvent+0xa>
1a0022c6:	7bac      	ldrb	r4, [r5, #14]
1a0022c8:	2c00      	cmp	r4, #0
1a0022ca:	d0f4      	beq.n	1a0022b6 <IsPendEvent+0xa>
			ret = true;
1a0022cc:	2001      	movs	r0, #1
1a0022ce:	e000      	b.n	1a0022d2 <IsPendEvent+0x26>
	sc_boolean ret = false;
1a0022d0:	2000      	movs	r0, #0
			break;
		}
	}
	return ret;
}
1a0022d2:	bc30      	pop	{r4, r5}
1a0022d4:	4770      	bx	lr
	sc_boolean ret = false;
1a0022d6:	2000      	movs	r0, #0
}
1a0022d8:	4770      	bx	lr

1a0022da <MarkAsAttEvent>:

void MarkAsAttEvent(TimerTicks *list, uint32_t len, sc_eventid id)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a0022da:	2300      	movs	r3, #0
1a0022dc:	428b      	cmp	r3, r1
1a0022de:	d20d      	bcs.n	1a0022fc <MarkAsAttEvent+0x22>
{
1a0022e0:	b430      	push	{r4, r5}
		if(list[i].evid == id) {
1a0022e2:	011c      	lsls	r4, r3, #4
1a0022e4:	1905      	adds	r5, r0, r4
1a0022e6:	5904      	ldr	r4, [r0, r4]
1a0022e8:	4294      	cmp	r4, r2
1a0022ea:	d003      	beq.n	1a0022f4 <MarkAsAttEvent+0x1a>
	for(i = 0; i < len; i++) {
1a0022ec:	3301      	adds	r3, #1
1a0022ee:	428b      	cmp	r3, r1
1a0022f0:	d3f7      	bcc.n	1a0022e2 <MarkAsAttEvent+0x8>
1a0022f2:	e001      	b.n	1a0022f8 <MarkAsAttEvent+0x1e>
			list[i].evPending = false;
1a0022f4:	2300      	movs	r3, #0
1a0022f6:	73ab      	strb	r3, [r5, #14]
			break;
		}
	}
}
1a0022f8:	bc30      	pop	{r4, r5}
1a0022fa:	4770      	bx	lr
1a0022fc:	4770      	bx	lr

1a0022fe <UpdateTimers>:

void UpdateTimers(TimerTicks *list, uint32_t len)
{
	uint32_t i;

	for(i = 0; i < len; i++) {
1a0022fe:	2300      	movs	r3, #0
1a002300:	428b      	cmp	r3, r1
1a002302:	d21d      	bcs.n	1a002340 <UpdateTimers+0x42>
{
1a002304:	b410      	push	{r4}
1a002306:	e006      	b.n	1a002316 <UpdateTimers+0x18>
				list[i].count--;
			if(!list[i].count) {
				if(list[i].periodic)
					list[i].count = list[i].time_ms;
				else
					list[i].active = false;
1a002308:	2400      	movs	r4, #0
1a00230a:	7354      	strb	r4, [r2, #13]
				list[i].evPending = true;
1a00230c:	2401      	movs	r4, #1
1a00230e:	7394      	strb	r4, [r2, #14]
	for(i = 0; i < len; i++) {
1a002310:	3301      	adds	r3, #1
1a002312:	428b      	cmp	r3, r1
1a002314:	d211      	bcs.n	1a00233a <UpdateTimers+0x3c>
		if(list[i].active == true) {
1a002316:	eb00 1203 	add.w	r2, r0, r3, lsl #4
1a00231a:	7b54      	ldrb	r4, [r2, #13]
1a00231c:	2c00      	cmp	r4, #0
1a00231e:	d0f7      	beq.n	1a002310 <UpdateTimers+0x12>
			if(list[i].count)
1a002320:	6894      	ldr	r4, [r2, #8]
1a002322:	b10c      	cbz	r4, 1a002328 <UpdateTimers+0x2a>
				list[i].count--;
1a002324:	3c01      	subs	r4, #1
1a002326:	6094      	str	r4, [r2, #8]
			if(!list[i].count) {
1a002328:	6894      	ldr	r4, [r2, #8]
1a00232a:	2c00      	cmp	r4, #0
1a00232c:	d1f0      	bne.n	1a002310 <UpdateTimers+0x12>
				if(list[i].periodic)
1a00232e:	7b14      	ldrb	r4, [r2, #12]
1a002330:	2c00      	cmp	r4, #0
1a002332:	d0e9      	beq.n	1a002308 <UpdateTimers+0xa>
					list[i].count = list[i].time_ms;
1a002334:	6854      	ldr	r4, [r2, #4]
1a002336:	6094      	str	r4, [r2, #8]
1a002338:	e7e8      	b.n	1a00230c <UpdateTimers+0xe>
			}
		}
	}
}
1a00233a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00233e:	4770      	bx	lr
1a002340:	4770      	bx	lr

1a002342 <initialise_monitor_handles>:
}
1a002342:	4770      	bx	lr

1a002344 <Reset_Handler>:
void Reset_Handler(void) {
1a002344:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a002346:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a002348:	4b19      	ldr	r3, [pc, #100]	; (1a0023b0 <Reset_Handler+0x6c>)
1a00234a:	4a1a      	ldr	r2, [pc, #104]	; (1a0023b4 <Reset_Handler+0x70>)
1a00234c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00234e:	3304      	adds	r3, #4
1a002350:	4a19      	ldr	r2, [pc, #100]	; (1a0023b8 <Reset_Handler+0x74>)
1a002352:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002354:	2300      	movs	r3, #0
1a002356:	e005      	b.n	1a002364 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a002358:	4a18      	ldr	r2, [pc, #96]	; (1a0023bc <Reset_Handler+0x78>)
1a00235a:	f04f 31ff 	mov.w	r1, #4294967295
1a00235e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002362:	3301      	adds	r3, #1
1a002364:	2b07      	cmp	r3, #7
1a002366:	d9f7      	bls.n	1a002358 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a002368:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00236a:	4b15      	ldr	r3, [pc, #84]	; (1a0023c0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00236c:	e007      	b.n	1a00237e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00236e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a002372:	689a      	ldr	r2, [r3, #8]
1a002374:	6859      	ldr	r1, [r3, #4]
1a002376:	6818      	ldr	r0, [r3, #0]
1a002378:	f7fd ff07 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00237c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00237e:	4a11      	ldr	r2, [pc, #68]	; (1a0023c4 <Reset_Handler+0x80>)
1a002380:	4293      	cmp	r3, r2
1a002382:	d3f4      	bcc.n	1a00236e <Reset_Handler+0x2a>
1a002384:	e006      	b.n	1a002394 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a002386:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a002388:	6859      	ldr	r1, [r3, #4]
1a00238a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00238e:	f7fd ff0b 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a002392:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a002394:	4a0c      	ldr	r2, [pc, #48]	; (1a0023c8 <Reset_Handler+0x84>)
1a002396:	4293      	cmp	r3, r2
1a002398:	d3f5      	bcc.n	1a002386 <Reset_Handler+0x42>
    SystemInit();
1a00239a:	f000 ffef 	bl	1a00337c <SystemInit>
    __libc_init_array();
1a00239e:	f002 f8ef 	bl	1a004580 <__libc_init_array>
    initialise_monitor_handles();
1a0023a2:	f7ff ffce 	bl	1a002342 <initialise_monitor_handles>
    main();
1a0023a6:	f7fe f971 	bl	1a00068c <main>
        __asm__ volatile("wfi");
1a0023aa:	bf30      	wfi
1a0023ac:	e7fd      	b.n	1a0023aa <Reset_Handler+0x66>
1a0023ae:	bf00      	nop
1a0023b0:	40053100 	.word	0x40053100
1a0023b4:	10df1000 	.word	0x10df1000
1a0023b8:	01dff7ff 	.word	0x01dff7ff
1a0023bc:	e000e280 	.word	0xe000e280
1a0023c0:	1a000114 	.word	0x1a000114
1a0023c4:	1a000150 	.word	0x1a000150
1a0023c8:	1a000178 	.word	0x1a000178

1a0023cc <_fini>:
void _fini(void) {}
1a0023cc:	4770      	bx	lr

1a0023ce <_init>:
void _init(void) {}
1a0023ce:	4770      	bx	lr

1a0023d0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0023d0:	2300      	movs	r3, #0
1a0023d2:	2b1c      	cmp	r3, #28
1a0023d4:	d812      	bhi.n	1a0023fc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0023d6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0023d8:	4a09      	ldr	r2, [pc, #36]	; (1a002400 <Board_SetupMuxing+0x30>)
1a0023da:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0023de:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0023e2:	784a      	ldrb	r2, [r1, #1]
1a0023e4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0023e6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0023ea:	4906      	ldr	r1, [pc, #24]	; (1a002404 <Board_SetupMuxing+0x34>)
1a0023ec:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0023f0:	3301      	adds	r3, #1
1a0023f2:	2b1c      	cmp	r3, #28
1a0023f4:	d9f0      	bls.n	1a0023d8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0023f6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0023fa:	4770      	bx	lr
1a0023fc:	4770      	bx	lr
1a0023fe:	bf00      	nop
1a002400:	1a00466c 	.word	0x1a00466c
1a002404:	40086000 	.word	0x40086000

1a002408 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002408:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00240a:	4a17      	ldr	r2, [pc, #92]	; (1a002468 <Board_SetupClocking+0x60>)
1a00240c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002414:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002418:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00241c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002424:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002428:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00242c:	2201      	movs	r2, #1
1a00242e:	490f      	ldr	r1, [pc, #60]	; (1a00246c <Board_SetupClocking+0x64>)
1a002430:	2006      	movs	r0, #6
1a002432:	f000 fb79 	bl	1a002b28 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002436:	2400      	movs	r4, #0
1a002438:	b14c      	cbz	r4, 1a00244e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00243a:	4b0b      	ldr	r3, [pc, #44]	; (1a002468 <Board_SetupClocking+0x60>)
1a00243c:	685a      	ldr	r2, [r3, #4]
1a00243e:	f022 020c 	bic.w	r2, r2, #12
1a002442:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002444:	685a      	ldr	r2, [r3, #4]
1a002446:	f042 0203 	orr.w	r2, r2, #3
1a00244a:	605a      	str	r2, [r3, #4]
}
1a00244c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00244e:	4808      	ldr	r0, [pc, #32]	; (1a002470 <Board_SetupClocking+0x68>)
1a002450:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002454:	2301      	movs	r3, #1
1a002456:	788a      	ldrb	r2, [r1, #2]
1a002458:	7849      	ldrb	r1, [r1, #1]
1a00245a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00245e:	f000 fe3b 	bl	1a0030d8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002462:	3401      	adds	r4, #1
1a002464:	e7e8      	b.n	1a002438 <Board_SetupClocking+0x30>
1a002466:	bf00      	nop
1a002468:	40043000 	.word	0x40043000
1a00246c:	0c28cb00 	.word	0x0c28cb00
1a002470:	1a004668 	.word	0x1a004668

1a002474 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002474:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002476:	f7ff ffab 	bl	1a0023d0 <Board_SetupMuxing>
    Board_SetupClocking();
1a00247a:	f7ff ffc5 	bl	1a002408 <Board_SetupClocking>
}
1a00247e:	bd08      	pop	{r3, pc}

1a002480 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002480:	2200      	movs	r2, #0
1a002482:	2a05      	cmp	r2, #5
1a002484:	d819      	bhi.n	1a0024ba <Board_LED_Init+0x3a>
{
1a002486:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002488:	490c      	ldr	r1, [pc, #48]	; (1a0024bc <Board_LED_Init+0x3c>)
1a00248a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00248e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002492:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002494:	4b0a      	ldr	r3, [pc, #40]	; (1a0024c0 <Board_LED_Init+0x40>)
1a002496:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00249a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00249e:	2001      	movs	r0, #1
1a0024a0:	40a0      	lsls	r0, r4
1a0024a2:	4301      	orrs	r1, r0
1a0024a4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0024a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0024ac:	2100      	movs	r1, #0
1a0024ae:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0024b0:	3201      	adds	r2, #1
1a0024b2:	2a05      	cmp	r2, #5
1a0024b4:	d9e8      	bls.n	1a002488 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0024b6:	bc70      	pop	{r4, r5, r6}
1a0024b8:	4770      	bx	lr
1a0024ba:	4770      	bx	lr
1a0024bc:	1a0046ec 	.word	0x1a0046ec
1a0024c0:	400f4000 	.word	0x400f4000

1a0024c4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0024c4:	2300      	movs	r3, #0
1a0024c6:	2b03      	cmp	r3, #3
1a0024c8:	d816      	bhi.n	1a0024f8 <Board_TEC_Init+0x34>
{
1a0024ca:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0024cc:	490b      	ldr	r1, [pc, #44]	; (1a0024fc <Board_TEC_Init+0x38>)
1a0024ce:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0024d2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0024d6:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0024d8:	4c09      	ldr	r4, [pc, #36]	; (1a002500 <Board_TEC_Init+0x3c>)
1a0024da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0024de:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0024e2:	2001      	movs	r0, #1
1a0024e4:	40a8      	lsls	r0, r5
1a0024e6:	ea21 0100 	bic.w	r1, r1, r0
1a0024ea:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0024ee:	3301      	adds	r3, #1
1a0024f0:	2b03      	cmp	r3, #3
1a0024f2:	d9eb      	bls.n	1a0024cc <Board_TEC_Init+0x8>
   }
}
1a0024f4:	bc30      	pop	{r4, r5}
1a0024f6:	4770      	bx	lr
1a0024f8:	4770      	bx	lr
1a0024fa:	bf00      	nop
1a0024fc:	1a0046e4 	.word	0x1a0046e4
1a002500:	400f4000 	.word	0x400f4000

1a002504 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002504:	2300      	movs	r3, #0
1a002506:	2b08      	cmp	r3, #8
1a002508:	d816      	bhi.n	1a002538 <Board_GPIO_Init+0x34>
{
1a00250a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00250c:	490b      	ldr	r1, [pc, #44]	; (1a00253c <Board_GPIO_Init+0x38>)
1a00250e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002512:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002516:	784d      	ldrb	r5, [r1, #1]
1a002518:	4c09      	ldr	r4, [pc, #36]	; (1a002540 <Board_GPIO_Init+0x3c>)
1a00251a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00251e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002522:	2001      	movs	r0, #1
1a002524:	40a8      	lsls	r0, r5
1a002526:	ea21 0100 	bic.w	r1, r1, r0
1a00252a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00252e:	3301      	adds	r3, #1
1a002530:	2b08      	cmp	r3, #8
1a002532:	d9eb      	bls.n	1a00250c <Board_GPIO_Init+0x8>
   }
}
1a002534:	bc30      	pop	{r4, r5}
1a002536:	4770      	bx	lr
1a002538:	4770      	bx	lr
1a00253a:	bf00      	nop
1a00253c:	1a0046f8 	.word	0x1a0046f8
1a002540:	400f4000 	.word	0x400f4000

1a002544 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002544:	b510      	push	{r4, lr}
1a002546:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002548:	4c08      	ldr	r4, [pc, #32]	; (1a00256c <Board_ADC_Init+0x28>)
1a00254a:	4669      	mov	r1, sp
1a00254c:	4620      	mov	r0, r4
1a00254e:	f000 fa13 	bl	1a002978 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002552:	4a07      	ldr	r2, [pc, #28]	; (1a002570 <Board_ADC_Init+0x2c>)
1a002554:	4669      	mov	r1, sp
1a002556:	4620      	mov	r0, r4
1a002558:	f000 fa2e 	bl	1a0029b8 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a00255c:	2200      	movs	r2, #0
1a00255e:	4669      	mov	r1, sp
1a002560:	4620      	mov	r0, r4
1a002562:	f000 fa42 	bl	1a0029ea <Chip_ADC_SetResolution>
}
1a002566:	b002      	add	sp, #8
1a002568:	bd10      	pop	{r4, pc}
1a00256a:	bf00      	nop
1a00256c:	400e3000 	.word	0x400e3000
1a002570:	00061a80 	.word	0x00061a80

1a002574 <Board_SPI_Init>:
{
1a002574:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002576:	4c0b      	ldr	r4, [pc, #44]	; (1a0025a4 <Board_SPI_Init+0x30>)
1a002578:	4620      	mov	r0, r4
1a00257a:	f000 f895 	bl	1a0026a8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00257e:	6863      	ldr	r3, [r4, #4]
1a002580:	f023 0304 	bic.w	r3, r3, #4
1a002584:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002586:	6823      	ldr	r3, [r4, #0]
1a002588:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00258c:	f043 0307 	orr.w	r3, r3, #7
1a002590:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002592:	4905      	ldr	r1, [pc, #20]	; (1a0025a8 <Board_SPI_Init+0x34>)
1a002594:	4620      	mov	r0, r4
1a002596:	f000 f868 	bl	1a00266a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00259a:	6863      	ldr	r3, [r4, #4]
1a00259c:	f043 0302 	orr.w	r3, r3, #2
1a0025a0:	6063      	str	r3, [r4, #4]
}
1a0025a2:	bd10      	pop	{r4, pc}
1a0025a4:	400c5000 	.word	0x400c5000
1a0025a8:	000186a0 	.word	0x000186a0

1a0025ac <Board_I2C_Init>:
{
1a0025ac:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0025ae:	2000      	movs	r0, #0
1a0025b0:	f000 f936 	bl	1a002820 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0025b4:	4b04      	ldr	r3, [pc, #16]	; (1a0025c8 <Board_I2C_Init+0x1c>)
1a0025b6:	f640 0208 	movw	r2, #2056	; 0x808
1a0025ba:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0025be:	4903      	ldr	r1, [pc, #12]	; (1a0025cc <Board_I2C_Init+0x20>)
1a0025c0:	2000      	movs	r0, #0
1a0025c2:	f000 f93f 	bl	1a002844 <Chip_I2C_SetClockRate>
}
1a0025c6:	bd08      	pop	{r3, pc}
1a0025c8:	40086000 	.word	0x40086000
1a0025cc:	000f4240 	.word	0x000f4240

1a0025d0 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0025d0:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0025d2:	4c07      	ldr	r4, [pc, #28]	; (1a0025f0 <Board_Debug_Init+0x20>)
1a0025d4:	4620      	mov	r0, r4
1a0025d6:	f000 fe39 	bl	1a00324c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0025da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0025de:	4620      	mov	r0, r4
1a0025e0:	f000 fe5e 	bl	1a0032a0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0025e4:	2303      	movs	r3, #3
1a0025e6:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0025e8:	2301      	movs	r3, #1
1a0025ea:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0025ec:	bd10      	pop	{r4, pc}
1a0025ee:	bf00      	nop
1a0025f0:	400c1000 	.word	0x400c1000

1a0025f4 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0025f4:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0025f6:	f7ff ffeb 	bl	1a0025d0 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0025fa:	4809      	ldr	r0, [pc, #36]	; (1a002620 <Board_Init+0x2c>)
1a0025fc:	f000 f996 	bl	1a00292c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002600:	f7ff ff80 	bl	1a002504 <Board_GPIO_Init>
   Board_ADC_Init();
1a002604:	f7ff ff9e 	bl	1a002544 <Board_ADC_Init>
   Board_SPI_Init();
1a002608:	f7ff ffb4 	bl	1a002574 <Board_SPI_Init>
   Board_I2C_Init();
1a00260c:	f7ff ffce 	bl	1a0025ac <Board_I2C_Init>

   Board_LED_Init();
1a002610:	f7ff ff36 	bl	1a002480 <Board_LED_Init>
   Board_TEC_Init();
1a002614:	f7ff ff56 	bl	1a0024c4 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002618:	f000 fb32 	bl	1a002c80 <SystemCoreClockUpdate>
}
1a00261c:	bd08      	pop	{r3, pc}
1a00261e:	bf00      	nop
1a002620:	400f4000 	.word	0x400f4000

1a002624 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a002624:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002626:	f7ff ffd3 	bl	1a0025d0 <Board_Debug_Init>
1a00262a:	bd08      	pop	{r3, pc}

1a00262c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00262c:	4b03      	ldr	r3, [pc, #12]	; (1a00263c <Chip_SSP_GetClockIndex+0x10>)
1a00262e:	4298      	cmp	r0, r3
1a002630:	d001      	beq.n	1a002636 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002632:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002634:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002636:	20a5      	movs	r0, #165	; 0xa5
1a002638:	4770      	bx	lr
1a00263a:	bf00      	nop
1a00263c:	400c5000 	.word	0x400c5000

1a002640 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002640:	4b04      	ldr	r3, [pc, #16]	; (1a002654 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002642:	4298      	cmp	r0, r3
1a002644:	d002      	beq.n	1a00264c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002646:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00264a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00264c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002650:	4770      	bx	lr
1a002652:	bf00      	nop
1a002654:	400c5000 	.word	0x400c5000

1a002658 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002658:	6803      	ldr	r3, [r0, #0]
1a00265a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00265e:	0209      	lsls	r1, r1, #8
1a002660:	b289      	uxth	r1, r1
1a002662:	4319      	orrs	r1, r3
1a002664:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002666:	6102      	str	r2, [r0, #16]
}
1a002668:	4770      	bx	lr

1a00266a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00266a:	b570      	push	{r4, r5, r6, lr}
1a00266c:	4606      	mov	r6, r0
1a00266e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002670:	f7ff ffe6 	bl	1a002640 <Chip_SSP_GetPeriphClockIndex>
1a002674:	f000 fdae 	bl	1a0031d4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002678:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00267a:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a00267e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002680:	e000      	b.n	1a002684 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002682:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002684:	42ab      	cmp	r3, r5
1a002686:	d90b      	bls.n	1a0026a0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002688:	1c4c      	adds	r4, r1, #1
1a00268a:	fb02 f304 	mul.w	r3, r2, r4
1a00268e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002692:	429d      	cmp	r5, r3
1a002694:	d2f6      	bcs.n	1a002684 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002696:	2cff      	cmp	r4, #255	; 0xff
1a002698:	d9f3      	bls.n	1a002682 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00269a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00269c:	2100      	movs	r1, #0
1a00269e:	e7f1      	b.n	1a002684 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0026a0:	4630      	mov	r0, r6
1a0026a2:	f7ff ffd9 	bl	1a002658 <Chip_SSP_SetClockRate>
}
1a0026a6:	bd70      	pop	{r4, r5, r6, pc}

1a0026a8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0026a8:	b510      	push	{r4, lr}
1a0026aa:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0026ac:	f7ff ffbe 	bl	1a00262c <Chip_SSP_GetClockIndex>
1a0026b0:	f000 fd76 	bl	1a0031a0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0026b4:	4620      	mov	r0, r4
1a0026b6:	f7ff ffc3 	bl	1a002640 <Chip_SSP_GetPeriphClockIndex>
1a0026ba:	f000 fd71 	bl	1a0031a0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0026be:	6863      	ldr	r3, [r4, #4]
1a0026c0:	f023 0304 	bic.w	r3, r3, #4
1a0026c4:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0026c6:	6823      	ldr	r3, [r4, #0]
1a0026c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0026cc:	f043 0307 	orr.w	r3, r3, #7
1a0026d0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0026d2:	4902      	ldr	r1, [pc, #8]	; (1a0026dc <Chip_SSP_Init+0x34>)
1a0026d4:	4620      	mov	r0, r4
1a0026d6:	f7ff ffc8 	bl	1a00266a <Chip_SSP_SetBitRate>
}
1a0026da:	bd10      	pop	{r4, pc}
1a0026dc:	000186a0 	.word	0x000186a0

1a0026e0 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0026e0:	2901      	cmp	r1, #1
1a0026e2:	d109      	bne.n	1a0026f8 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0026e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0026e8:	0082      	lsls	r2, r0, #2
1a0026ea:	4b04      	ldr	r3, [pc, #16]	; (1a0026fc <Chip_I2C_EventHandler+0x1c>)
1a0026ec:	4413      	add	r3, r2
1a0026ee:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0026f0:	7d13      	ldrb	r3, [r2, #20]
1a0026f2:	b2db      	uxtb	r3, r3
1a0026f4:	2b04      	cmp	r3, #4
1a0026f6:	d0fb      	beq.n	1a0026f0 <Chip_I2C_EventHandler+0x10>
}
1a0026f8:	4770      	bx	lr
1a0026fa:	bf00      	nop
1a0026fc:	10000000 	.word	0x10000000

1a002700 <handleMasterXferState>:
{
1a002700:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a002702:	6843      	ldr	r3, [r0, #4]
1a002704:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a002708:	2b58      	cmp	r3, #88	; 0x58
1a00270a:	d87f      	bhi.n	1a00280c <handleMasterXferState+0x10c>
1a00270c:	e8df f003 	tbb	[pc, r3]
1a002710:	7e7e7e7a 	.word	0x7e7e7e7a
1a002714:	7e7e7e7e 	.word	0x7e7e7e7e
1a002718:	7e7e7e2f 	.word	0x7e7e7e2f
1a00271c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002720:	7e7e7e2f 	.word	0x7e7e7e2f
1a002724:	7e7e7e7e 	.word	0x7e7e7e7e
1a002728:	7e7e7e39 	.word	0x7e7e7e39
1a00272c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002730:	7e7e7e6e 	.word	0x7e7e7e6e
1a002734:	7e7e7e7e 	.word	0x7e7e7e7e
1a002738:	7e7e7e39 	.word	0x7e7e7e39
1a00273c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002740:	7e7e7e72 	.word	0x7e7e7e72
1a002744:	7e7e7e7e 	.word	0x7e7e7e7e
1a002748:	7e7e7e76 	.word	0x7e7e7e76
1a00274c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002750:	7e7e7e6c 	.word	0x7e7e7e6c
1a002754:	7e7e7e7e 	.word	0x7e7e7e7e
1a002758:	7e7e7e6e 	.word	0x7e7e7e6e
1a00275c:	7e7e7e7e 	.word	0x7e7e7e7e
1a002760:	7e7e7e2d 	.word	0x7e7e7e2d
1a002764:	7e7e7e7e 	.word	0x7e7e7e7e
1a002768:	4f          	.byte	0x4f
1a002769:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a00276a:	233c      	movs	r3, #60	; 0x3c
1a00276c:	e020      	b.n	1a0027b0 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00276e:	780a      	ldrb	r2, [r1, #0]
1a002770:	688b      	ldr	r3, [r1, #8]
1a002772:	fab3 f383 	clz	r3, r3
1a002776:	095b      	lsrs	r3, r3, #5
1a002778:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a00277c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00277e:	233c      	movs	r3, #60	; 0x3c
		break;
1a002780:	e023      	b.n	1a0027ca <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a002782:	688b      	ldr	r3, [r1, #8]
1a002784:	b94b      	cbnz	r3, 1a00279a <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a002786:	690b      	ldr	r3, [r1, #16]
1a002788:	b123      	cbz	r3, 1a002794 <handleMasterXferState+0x94>
1a00278a:	f06f 0320 	mvn.w	r3, #32
1a00278e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a002792:	e01a      	b.n	1a0027ca <handleMasterXferState+0xca>
1a002794:	f06f 0310 	mvn.w	r3, #16
1a002798:	e7f9      	b.n	1a00278e <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a00279a:	684b      	ldr	r3, [r1, #4]
1a00279c:	1c5a      	adds	r2, r3, #1
1a00279e:	604a      	str	r2, [r1, #4]
1a0027a0:	781b      	ldrb	r3, [r3, #0]
1a0027a2:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0027a4:	688b      	ldr	r3, [r1, #8]
1a0027a6:	3b01      	subs	r3, #1
1a0027a8:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0027aa:	233c      	movs	r3, #60	; 0x3c
1a0027ac:	e00d      	b.n	1a0027ca <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a0027ae:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a0027b0:	6884      	ldr	r4, [r0, #8]
1a0027b2:	68ca      	ldr	r2, [r1, #12]
1a0027b4:	1c55      	adds	r5, r2, #1
1a0027b6:	60cd      	str	r5, [r1, #12]
1a0027b8:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a0027ba:	690a      	ldr	r2, [r1, #16]
1a0027bc:	3a01      	subs	r2, #1
1a0027be:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a0027c0:	690a      	ldr	r2, [r1, #16]
1a0027c2:	2a01      	cmp	r2, #1
1a0027c4:	dd01      	ble.n	1a0027ca <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a0027c6:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0027ca:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0027ce:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a0027d0:	f023 0210 	bic.w	r2, r3, #16
1a0027d4:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a0027d6:	f013 0f10 	tst.w	r3, #16
1a0027da:	d019      	beq.n	1a002810 <handleMasterXferState+0x110>
1a0027dc:	7d0b      	ldrb	r3, [r1, #20]
1a0027de:	2b02      	cmp	r3, #2
1a0027e0:	d016      	beq.n	1a002810 <handleMasterXferState+0x110>
	return 1;
1a0027e2:	2001      	movs	r0, #1
}
1a0027e4:	bc30      	pop	{r4, r5}
1a0027e6:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a0027e8:	233c      	movs	r3, #60	; 0x3c
1a0027ea:	e7e9      	b.n	1a0027c0 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a0027ec:	2305      	movs	r3, #5
1a0027ee:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0027f0:	232c      	movs	r3, #44	; 0x2c
		break;
1a0027f2:	e7ea      	b.n	1a0027ca <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a0027f4:	2301      	movs	r3, #1
1a0027f6:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0027f8:	232c      	movs	r3, #44	; 0x2c
		break;
1a0027fa:	e7e6      	b.n	1a0027ca <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a0027fc:	2302      	movs	r3, #2
1a0027fe:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a002800:	233c      	movs	r3, #60	; 0x3c
		break;
1a002802:	e7e2      	b.n	1a0027ca <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a002804:	2303      	movs	r3, #3
1a002806:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002808:	232c      	movs	r3, #44	; 0x2c
1a00280a:	e7de      	b.n	1a0027ca <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a00280c:	233c      	movs	r3, #60	; 0x3c
1a00280e:	e7dc      	b.n	1a0027ca <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a002810:	7d0b      	ldrb	r3, [r1, #20]
1a002812:	2b04      	cmp	r3, #4
1a002814:	d001      	beq.n	1a00281a <handleMasterXferState+0x11a>
		return 0;
1a002816:	2000      	movs	r0, #0
1a002818:	e7e4      	b.n	1a0027e4 <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a00281a:	2300      	movs	r3, #0
1a00281c:	750b      	strb	r3, [r1, #20]
1a00281e:	e7fa      	b.n	1a002816 <handleMasterXferState+0x116>

1a002820 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002820:	b570      	push	{r4, r5, r6, lr}
1a002822:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002824:	4e06      	ldr	r6, [pc, #24]	; (1a002840 <Chip_I2C_Init+0x20>)
1a002826:	00c4      	lsls	r4, r0, #3
1a002828:	1a22      	subs	r2, r4, r0
1a00282a:	0093      	lsls	r3, r2, #2
1a00282c:	4433      	add	r3, r6
1a00282e:	8898      	ldrh	r0, [r3, #4]
1a002830:	f000 fcb6 	bl	1a0031a0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002834:	1b64      	subs	r4, r4, r5
1a002836:	00a3      	lsls	r3, r4, #2
1a002838:	58f3      	ldr	r3, [r6, r3]
1a00283a:	226c      	movs	r2, #108	; 0x6c
1a00283c:	619a      	str	r2, [r3, #24]
}
1a00283e:	bd70      	pop	{r4, r5, r6, pc}
1a002840:	10000000 	.word	0x10000000

1a002844 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002848:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00284a:	4e0b      	ldr	r6, [pc, #44]	; (1a002878 <Chip_I2C_SetClockRate+0x34>)
1a00284c:	00c5      	lsls	r5, r0, #3
1a00284e:	1a2b      	subs	r3, r5, r0
1a002850:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002854:	eb06 0308 	add.w	r3, r6, r8
1a002858:	8898      	ldrh	r0, [r3, #4]
1a00285a:	f000 fcbb 	bl	1a0031d4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00285e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002862:	f856 3008 	ldr.w	r3, [r6, r8]
1a002866:	0842      	lsrs	r2, r0, #1
1a002868:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00286a:	f856 3008 	ldr.w	r3, [r6, r8]
1a00286e:	691a      	ldr	r2, [r3, #16]
1a002870:	1a80      	subs	r0, r0, r2
1a002872:	6158      	str	r0, [r3, #20]
}
1a002874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002878:	10000000 	.word	0x10000000

1a00287c <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a00287c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002880:	009a      	lsls	r2, r3, #2
1a002882:	4b09      	ldr	r3, [pc, #36]	; (1a0028a8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a002884:	4413      	add	r3, r2
1a002886:	691b      	ldr	r3, [r3, #16]
1a002888:	b153      	cbz	r3, 1a0028a0 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a00288a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00288e:	0082      	lsls	r2, r0, #2
1a002890:	4b05      	ldr	r3, [pc, #20]	; (1a0028a8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a002892:	4413      	add	r3, r2
1a002894:	6898      	ldr	r0, [r3, #8]
}
1a002896:	4288      	cmp	r0, r1
1a002898:	bf14      	ite	ne
1a00289a:	2000      	movne	r0, #0
1a00289c:	2001      	moveq	r0, #1
1a00289e:	4770      	bx	lr
		iic->mEvent = event;
1a0028a0:	4b01      	ldr	r3, [pc, #4]	; (1a0028a8 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0028a2:	4413      	add	r3, r2
1a0028a4:	6099      	str	r1, [r3, #8]
1a0028a6:	e7f0      	b.n	1a00288a <Chip_I2C_SetMasterEventHandler+0xe>
1a0028a8:	10000000 	.word	0x10000000

1a0028ac <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a0028ac:	b510      	push	{r4, lr}
1a0028ae:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a0028b0:	4809      	ldr	r0, [pc, #36]	; (1a0028d8 <Chip_I2C_MasterStateHandler+0x2c>)
1a0028b2:	00e3      	lsls	r3, r4, #3
1a0028b4:	1b1b      	subs	r3, r3, r4
1a0028b6:	009a      	lsls	r2, r3, #2
1a0028b8:	1883      	adds	r3, r0, r2
1a0028ba:	6919      	ldr	r1, [r3, #16]
1a0028bc:	5880      	ldr	r0, [r0, r2]
1a0028be:	f7ff ff1f 	bl	1a002700 <handleMasterXferState>
1a0028c2:	b940      	cbnz	r0, 1a0028d6 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a0028c4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a0028c8:	009a      	lsls	r2, r3, #2
1a0028ca:	4b03      	ldr	r3, [pc, #12]	; (1a0028d8 <Chip_I2C_MasterStateHandler+0x2c>)
1a0028cc:	4413      	add	r3, r2
1a0028ce:	689b      	ldr	r3, [r3, #8]
1a0028d0:	2102      	movs	r1, #2
1a0028d2:	4620      	mov	r0, r4
1a0028d4:	4798      	blx	r3
	}
}
1a0028d6:	bd10      	pop	{r4, pc}
1a0028d8:	10000000 	.word	0x10000000

1a0028dc <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a0028dc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0028e0:	0083      	lsls	r3, r0, #2
1a0028e2:	4a03      	ldr	r2, [pc, #12]	; (1a0028f0 <Chip_I2C_IsStateChanged+0x14>)
1a0028e4:	58d3      	ldr	r3, [r2, r3]
1a0028e6:	6818      	ldr	r0, [r3, #0]
}
1a0028e8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a0028ec:	4770      	bx	lr
1a0028ee:	bf00      	nop
1a0028f0:	10000000 	.word	0x10000000

1a0028f4 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a0028f4:	2901      	cmp	r1, #1
1a0028f6:	d115      	bne.n	1a002924 <Chip_I2C_EventHandlerPolling+0x30>
{
1a0028f8:	b538      	push	{r3, r4, r5, lr}
1a0028fa:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a0028fc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002900:	009a      	lsls	r2, r3, #2
1a002902:	4b09      	ldr	r3, [pc, #36]	; (1a002928 <Chip_I2C_EventHandlerPolling+0x34>)
1a002904:	4413      	add	r3, r2
1a002906:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a002908:	7d2b      	ldrb	r3, [r5, #20]
1a00290a:	b2db      	uxtb	r3, r3
1a00290c:	2b04      	cmp	r3, #4
1a00290e:	d108      	bne.n	1a002922 <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a002910:	4620      	mov	r0, r4
1a002912:	f7ff ffe3 	bl	1a0028dc <Chip_I2C_IsStateChanged>
1a002916:	2800      	cmp	r0, #0
1a002918:	d0f6      	beq.n	1a002908 <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a00291a:	4620      	mov	r0, r4
1a00291c:	f7ff ffc6 	bl	1a0028ac <Chip_I2C_MasterStateHandler>
1a002920:	e7f2      	b.n	1a002908 <Chip_I2C_EventHandlerPolling+0x14>
}
1a002922:	bd38      	pop	{r3, r4, r5, pc}
1a002924:	4770      	bx	lr
1a002926:	bf00      	nop
1a002928:	10000000 	.word	0x10000000

1a00292c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00292c:	4770      	bx	lr
1a00292e:	Address 0x1a00292e is out of bounds.


1a002930 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002930:	4b03      	ldr	r3, [pc, #12]	; (1a002940 <Chip_ADC_GetClockIndex+0x10>)
1a002932:	4298      	cmp	r0, r3
1a002934:	d001      	beq.n	1a00293a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002936:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002938:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00293a:	2004      	movs	r0, #4
1a00293c:	4770      	bx	lr
1a00293e:	bf00      	nop
1a002940:	400e4000 	.word	0x400e4000

1a002944 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002944:	b570      	push	{r4, r5, r6, lr}
1a002946:	460d      	mov	r5, r1
1a002948:	4614      	mov	r4, r2
1a00294a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00294c:	f7ff fff0 	bl	1a002930 <Chip_ADC_GetClockIndex>
1a002950:	f000 fc40 	bl	1a0031d4 <Chip_Clock_GetRate>
	if (burstMode) {
1a002954:	b155      	cbz	r5, 1a00296c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a002956:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00295a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00295e:	0064      	lsls	r4, r4, #1
1a002960:	fbb0 f0f4 	udiv	r0, r0, r4
1a002964:	b2c0      	uxtb	r0, r0
1a002966:	3801      	subs	r0, #1
	return div;
}
1a002968:	b2c0      	uxtb	r0, r0
1a00296a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a00296c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002970:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a002974:	e7f1      	b.n	1a00295a <getClkDiv+0x16>
1a002976:	Address 0x1a002976 is out of bounds.


1a002978 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002978:	b538      	push	{r3, r4, r5, lr}
1a00297a:	4605      	mov	r5, r0
1a00297c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00297e:	f7ff ffd7 	bl	1a002930 <Chip_ADC_GetClockIndex>
1a002982:	2301      	movs	r3, #1
1a002984:	461a      	mov	r2, r3
1a002986:	4619      	mov	r1, r3
1a002988:	f000 fbec 	bl	1a003164 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00298c:	2100      	movs	r1, #0
1a00298e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002990:	4a08      	ldr	r2, [pc, #32]	; (1a0029b4 <Chip_ADC_Init+0x3c>)
1a002992:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002994:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002996:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002998:	230b      	movs	r3, #11
1a00299a:	4628      	mov	r0, r5
1a00299c:	f7ff ffd2 	bl	1a002944 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0029a0:	0200      	lsls	r0, r0, #8
1a0029a2:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0029a6:	7920      	ldrb	r0, [r4, #4]
1a0029a8:	0440      	lsls	r0, r0, #17
1a0029aa:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0029ae:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0029b0:	6028      	str	r0, [r5, #0]
}
1a0029b2:	bd38      	pop	{r3, r4, r5, pc}
1a0029b4:	00061a80 	.word	0x00061a80

1a0029b8 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0029b8:	b570      	push	{r4, r5, r6, lr}
1a0029ba:	4605      	mov	r5, r0
1a0029bc:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0029be:	6804      	ldr	r4, [r0, #0]
1a0029c0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0029c4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0029c8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0029ca:	790b      	ldrb	r3, [r1, #4]
1a0029cc:	f1c3 030b 	rsb	r3, r3, #11
1a0029d0:	b2db      	uxtb	r3, r3
1a0029d2:	7949      	ldrb	r1, [r1, #5]
1a0029d4:	f7ff ffb6 	bl	1a002944 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0029d8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0029dc:	7933      	ldrb	r3, [r6, #4]
1a0029de:	045b      	lsls	r3, r3, #17
1a0029e0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0029e4:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0029e6:	602b      	str	r3, [r5, #0]
}
1a0029e8:	bd70      	pop	{r4, r5, r6, pc}

1a0029ea <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0029ea:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0029ec:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0029ee:	680a      	ldr	r2, [r1, #0]
1a0029f0:	f7ff ffe2 	bl	1a0029b8 <Chip_ADC_SetSampleRate>
}
1a0029f4:	bd08      	pop	{r3, pc}

1a0029f6 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0029f6:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a0029f8:	6843      	ldr	r3, [r0, #4]
1a0029fa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0029fe:	2b30      	cmp	r3, #48	; 0x30
1a002a00:	d04c      	beq.n	1a002a9c <Chip_I2CM_XferHandler+0xa6>
1a002a02:	d908      	bls.n	1a002a16 <Chip_I2CM_XferHandler+0x20>
1a002a04:	2b48      	cmp	r3, #72	; 0x48
1a002a06:	d06c      	beq.n	1a002ae2 <Chip_I2CM_XferHandler+0xec>
1a002a08:	d934      	bls.n	1a002a74 <Chip_I2CM_XferHandler+0x7e>
1a002a0a:	2b58      	cmp	r3, #88	; 0x58
1a002a0c:	d058      	beq.n	1a002ac0 <Chip_I2CM_XferHandler+0xca>
1a002a0e:	2bf8      	cmp	r3, #248	; 0xf8
1a002a10:	d13e      	bne.n	1a002a90 <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a002a12:	2000      	movs	r0, #0
1a002a14:	e02b      	b.n	1a002a6e <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a002a16:	2b10      	cmp	r3, #16
1a002a18:	d016      	beq.n	1a002a48 <Chip_I2CM_XferHandler+0x52>
1a002a1a:	d90e      	bls.n	1a002a3a <Chip_I2CM_XferHandler+0x44>
1a002a1c:	2b20      	cmp	r3, #32
1a002a1e:	d03d      	beq.n	1a002a9c <Chip_I2CM_XferHandler+0xa6>
1a002a20:	2b28      	cmp	r3, #40	; 0x28
1a002a22:	d001      	beq.n	1a002a28 <Chip_I2CM_XferHandler+0x32>
1a002a24:	2b18      	cmp	r3, #24
1a002a26:	d135      	bne.n	1a002a94 <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a002a28:	888b      	ldrh	r3, [r1, #4]
1a002a2a:	2b00      	cmp	r3, #0
1a002a2c:	d13e      	bne.n	1a002aac <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a002a2e:	88cb      	ldrh	r3, [r1, #6]
1a002a30:	2b00      	cmp	r3, #0
1a002a32:	d15e      	bne.n	1a002af2 <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a002a34:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a002a36:	232c      	movs	r3, #44	; 0x2c
1a002a38:	e00f      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a002a3a:	b91b      	cbnz	r3, 1a002a44 <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a002a3c:	2303      	movs	r3, #3
1a002a3e:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a002a40:	232c      	movs	r3, #44	; 0x2c
        break;
1a002a42:	e00a      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a002a44:	2b08      	cmp	r3, #8
1a002a46:	d125      	bne.n	1a002a94 <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a002a48:	780a      	ldrb	r2, [r1, #0]
1a002a4a:	888b      	ldrh	r3, [r1, #4]
1a002a4c:	fab3 f383 	clz	r3, r3
1a002a50:	095b      	lsrs	r3, r3, #5
1a002a52:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a002a56:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a002a58:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a002a5a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a002a5e:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a002a60:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a002a64:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a002a66:	8848      	ldrh	r0, [r1, #2]
1a002a68:	38ff      	subs	r0, #255	; 0xff
1a002a6a:	bf18      	it	ne
1a002a6c:	2001      	movne	r0, #1
}
1a002a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002a72:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a002a74:	2b38      	cmp	r3, #56	; 0x38
1a002a76:	d038      	beq.n	1a002aea <Chip_I2CM_XferHandler+0xf4>
1a002a78:	2b40      	cmp	r3, #64	; 0x40
1a002a7a:	d10b      	bne.n	1a002a94 <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a002a7c:	88ca      	ldrh	r2, [r1, #6]
1a002a7e:	2a01      	cmp	r2, #1
1a002a80:	d927      	bls.n	1a002ad2 <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a002a82:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a002a84:	2a00      	cmp	r2, #0
1a002a86:	d1e8      	bne.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a002a88:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a002a8a:	f023 0310 	bic.w	r3, r3, #16
1a002a8e:	e7e4      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a002a90:	2b50      	cmp	r3, #80	; 0x50
1a002a92:	d015      	beq.n	1a002ac0 <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a002a94:	2301      	movs	r3, #1
1a002a96:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a002a98:	232c      	movs	r3, #44	; 0x2c
        break;
1a002a9a:	e7de      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a002a9c:	784b      	ldrb	r3, [r1, #1]
1a002a9e:	f013 0f01 	tst.w	r3, #1
1a002aa2:	d1c1      	bne.n	1a002a28 <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a002aa4:	2302      	movs	r3, #2
1a002aa6:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a002aa8:	232c      	movs	r3, #44	; 0x2c
			break;
1a002aaa:	e7d6      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a002aac:	688b      	ldr	r3, [r1, #8]
1a002aae:	1c5a      	adds	r2, r3, #1
1a002ab0:	608a      	str	r2, [r1, #8]
1a002ab2:	781b      	ldrb	r3, [r3, #0]
1a002ab4:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a002ab6:	888b      	ldrh	r3, [r1, #4]
1a002ab8:	3b01      	subs	r3, #1
1a002aba:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a002abc:	233c      	movs	r3, #60	; 0x3c
1a002abe:	e7cc      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a002ac0:	6882      	ldr	r2, [r0, #8]
1a002ac2:	68cb      	ldr	r3, [r1, #12]
1a002ac4:	1c5c      	adds	r4, r3, #1
1a002ac6:	60cc      	str	r4, [r1, #12]
1a002ac8:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a002aca:	88cb      	ldrh	r3, [r1, #6]
1a002acc:	3b01      	subs	r3, #1
1a002ace:	80cb      	strh	r3, [r1, #6]
1a002ad0:	e7d4      	b.n	1a002a7c <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a002ad2:	784b      	ldrb	r3, [r1, #1]
1a002ad4:	f013 0f02 	tst.w	r3, #2
1a002ad8:	d101      	bne.n	1a002ade <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a002ada:	233c      	movs	r3, #60	; 0x3c
1a002adc:	e7d2      	b.n	1a002a84 <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a002ade:	2338      	movs	r3, #56	; 0x38
1a002ae0:	e7d0      	b.n	1a002a84 <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a002ae2:	2304      	movs	r3, #4
1a002ae4:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a002ae6:	232c      	movs	r3, #44	; 0x2c
		break;
1a002ae8:	e7b7      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a002aea:	2305      	movs	r3, #5
1a002aec:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a002aee:	233c      	movs	r3, #60	; 0x3c
		break;
1a002af0:	e7b3      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a002af2:	231c      	movs	r3, #28
1a002af4:	e7b1      	b.n	1a002a5a <Chip_I2CM_XferHandler+0x64>

1a002af6 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a002af6:	23ff      	movs	r3, #255	; 0xff
1a002af8:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a002afa:	232c      	movs	r3, #44	; 0x2c
1a002afc:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a002afe:	2360      	movs	r3, #96	; 0x60
1a002b00:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a002b02:	4770      	bx	lr

1a002b04 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a002b04:	b538      	push	{r3, r4, r5, lr}
1a002b06:	4604      	mov	r4, r0
1a002b08:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a002b0a:	f7ff fff4 	bl	1a002af6 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a002b0e:	2000      	movs	r0, #0

	while (ret == 0) {
1a002b10:	e003      	b.n	1a002b1a <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a002b12:	4629      	mov	r1, r5
1a002b14:	4620      	mov	r0, r4
1a002b16:	f7ff ff6e 	bl	1a0029f6 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a002b1a:	b920      	cbnz	r0, 1a002b26 <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a002b1c:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a002b1e:	f013 0f08 	tst.w	r3, #8
1a002b22:	d0fb      	beq.n	1a002b1c <Chip_I2CM_XferBlocking+0x18>
1a002b24:	e7f5      	b.n	1a002b12 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a002b26:	bd38      	pop	{r3, r4, r5, pc}

1a002b28 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002b28:	b570      	push	{r4, r5, r6, lr}
1a002b2a:	b08a      	sub	sp, #40	; 0x28
1a002b2c:	4605      	mov	r5, r0
1a002b2e:	460e      	mov	r6, r1
1a002b30:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002b32:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002b36:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002b38:	2806      	cmp	r0, #6
1a002b3a:	d018      	beq.n	1a002b6e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002b3c:	2300      	movs	r3, #0
1a002b3e:	2201      	movs	r2, #1
1a002b40:	4629      	mov	r1, r5
1a002b42:	2004      	movs	r0, #4
1a002b44:	f000 fac8 	bl	1a0030d8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002b48:	4a4a      	ldr	r2, [pc, #296]	; (1a002c74 <Chip_SetupCoreClock+0x14c>)
1a002b4a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002b4c:	f043 0301 	orr.w	r3, r3, #1
1a002b50:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002b52:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002b56:	a901      	add	r1, sp, #4
1a002b58:	4630      	mov	r0, r6
1a002b5a:	f000 fa35 	bl	1a002fc8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002b5e:	4b46      	ldr	r3, [pc, #280]	; (1a002c78 <Chip_SetupCoreClock+0x150>)
1a002b60:	429e      	cmp	r6, r3
1a002b62:	d916      	bls.n	1a002b92 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002b64:	9b01      	ldr	r3, [sp, #4]
1a002b66:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002b6a:	d003      	beq.n	1a002b74 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002b6c:	e7fe      	b.n	1a002b6c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002b6e:	f000 f98d 	bl	1a002e8c <Chip_Clock_EnableCrystal>
1a002b72:	e7e3      	b.n	1a002b3c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a002b74:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002b78:	d005      	beq.n	1a002b86 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002b7e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002b80:	2500      	movs	r5, #0
			direct = 1;
1a002b82:	2601      	movs	r6, #1
1a002b84:	e007      	b.n	1a002b96 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002b86:	9b04      	ldr	r3, [sp, #16]
1a002b88:	3301      	adds	r3, #1
1a002b8a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002b8c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002b8e:	2600      	movs	r6, #0
1a002b90:	e001      	b.n	1a002b96 <Chip_SetupCoreClock+0x6e>
1a002b92:	2500      	movs	r5, #0
1a002b94:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002b96:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002b9a:	9b01      	ldr	r3, [sp, #4]
1a002b9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002ba0:	9a05      	ldr	r2, [sp, #20]
1a002ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002ba6:	9a03      	ldr	r2, [sp, #12]
1a002ba8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002bac:	9a04      	ldr	r2, [sp, #16]
1a002bae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002bb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002bb6:	4a2f      	ldr	r2, [pc, #188]	; (1a002c74 <Chip_SetupCoreClock+0x14c>)
1a002bb8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002bba:	4b2e      	ldr	r3, [pc, #184]	; (1a002c74 <Chip_SetupCoreClock+0x14c>)
1a002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002bbe:	f013 0f01 	tst.w	r3, #1
1a002bc2:	d0fa      	beq.n	1a002bba <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002bc4:	2300      	movs	r3, #0
1a002bc6:	2201      	movs	r2, #1
1a002bc8:	2109      	movs	r1, #9
1a002bca:	2004      	movs	r0, #4
1a002bcc:	f000 fa84 	bl	1a0030d8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002bd0:	b306      	cbz	r6, 1a002c14 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002bd2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002bd6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002bda:	1e5a      	subs	r2, r3, #1
1a002bdc:	9209      	str	r2, [sp, #36]	; 0x24
1a002bde:	2b00      	cmp	r3, #0
1a002be0:	d1fa      	bne.n	1a002bd8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002be2:	9b01      	ldr	r3, [sp, #4]
1a002be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002be8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002bea:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002bee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002bf2:	9a05      	ldr	r2, [sp, #20]
1a002bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002bf8:	9a03      	ldr	r2, [sp, #12]
1a002bfa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002bfe:	9a04      	ldr	r2, [sp, #16]
1a002c00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002c08:	4a1a      	ldr	r2, [pc, #104]	; (1a002c74 <Chip_SetupCoreClock+0x14c>)
1a002c0a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002c0c:	2c00      	cmp	r4, #0
1a002c0e:	d12e      	bne.n	1a002c6e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002c10:	b00a      	add	sp, #40	; 0x28
1a002c12:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a002c14:	2d00      	cmp	r5, #0
1a002c16:	d0f9      	beq.n	1a002c0c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002c18:	f24c 3350 	movw	r3, #50000	; 0xc350
1a002c1c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002c20:	1e5a      	subs	r2, r3, #1
1a002c22:	9209      	str	r2, [sp, #36]	; 0x24
1a002c24:	2b00      	cmp	r3, #0
1a002c26:	d1fa      	bne.n	1a002c1e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a002c28:	9b04      	ldr	r3, [sp, #16]
1a002c2a:	1e5a      	subs	r2, r3, #1
1a002c2c:	9204      	str	r2, [sp, #16]
1a002c2e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002c32:	9b01      	ldr	r3, [sp, #4]
1a002c34:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002c38:	9905      	ldr	r1, [sp, #20]
1a002c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002c3e:	9903      	ldr	r1, [sp, #12]
1a002c40:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002c48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002c4c:	4a09      	ldr	r2, [pc, #36]	; (1a002c74 <Chip_SetupCoreClock+0x14c>)
1a002c4e:	6453      	str	r3, [r2, #68]	; 0x44
1a002c50:	e7dc      	b.n	1a002c0c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002c52:	480a      	ldr	r0, [pc, #40]	; (1a002c7c <Chip_SetupCoreClock+0x154>)
1a002c54:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002c58:	78cb      	ldrb	r3, [r1, #3]
1a002c5a:	788a      	ldrb	r2, [r1, #2]
1a002c5c:	7849      	ldrb	r1, [r1, #1]
1a002c5e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002c62:	f000 fa39 	bl	1a0030d8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002c66:	3401      	adds	r4, #1
1a002c68:	2c11      	cmp	r4, #17
1a002c6a:	d9f2      	bls.n	1a002c52 <Chip_SetupCoreClock+0x12a>
1a002c6c:	e7d0      	b.n	1a002c10 <Chip_SetupCoreClock+0xe8>
1a002c6e:	2400      	movs	r4, #0
1a002c70:	e7fa      	b.n	1a002c68 <Chip_SetupCoreClock+0x140>
1a002c72:	bf00      	nop
1a002c74:	40050000 	.word	0x40050000
1a002c78:	068e7780 	.word	0x068e7780
1a002c7c:	1a004710 	.word	0x1a004710

1a002c80 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002c80:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002c82:	2069      	movs	r0, #105	; 0x69
1a002c84:	f000 faa6 	bl	1a0031d4 <Chip_Clock_GetRate>
1a002c88:	4b01      	ldr	r3, [pc, #4]	; (1a002c90 <SystemCoreClockUpdate+0x10>)
1a002c8a:	6018      	str	r0, [r3, #0]
}
1a002c8c:	bd08      	pop	{r3, pc}
1a002c8e:	bf00      	nop
1a002c90:	1000024c 	.word	0x1000024c

1a002c94 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002c94:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002c96:	680b      	ldr	r3, [r1, #0]
1a002c98:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002c9c:	d002      	beq.n	1a002ca4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002ca2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002ca4:	4607      	mov	r7, r0
1a002ca6:	2501      	movs	r5, #1
1a002ca8:	e03a      	b.n	1a002d20 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002caa:	694b      	ldr	r3, [r1, #20]
1a002cac:	fb03 f302 	mul.w	r3, r3, r2
1a002cb0:	fbb3 f3f5 	udiv	r3, r3, r5
1a002cb4:	e01c      	b.n	1a002cf0 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002cb6:	461c      	mov	r4, r3
	if (val < 0)
1a002cb8:	ebb0 0c04 	subs.w	ip, r0, r4
1a002cbc:	d427      	bmi.n	1a002d0e <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002cbe:	4567      	cmp	r7, ip
1a002cc0:	d906      	bls.n	1a002cd0 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a002cc2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002cc4:	1c77      	adds	r7, r6, #1
1a002cc6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002cc8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002cca:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002ccc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002cce:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a002cd0:	3201      	adds	r2, #1
1a002cd2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002cd6:	dc1d      	bgt.n	1a002d14 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a002cd8:	680c      	ldr	r4, [r1, #0]
1a002cda:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002cde:	d0e4      	beq.n	1a002caa <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002ce0:	1c73      	adds	r3, r6, #1
1a002ce2:	fa02 fc03 	lsl.w	ip, r2, r3
1a002ce6:	694b      	ldr	r3, [r1, #20]
1a002ce8:	fb03 f30c 	mul.w	r3, r3, ip
1a002cec:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002cf0:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a002d2c <pll_calc_divs+0x98>
1a002cf4:	4563      	cmp	r3, ip
1a002cf6:	d9eb      	bls.n	1a002cd0 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002cf8:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a002d30 <pll_calc_divs+0x9c>
1a002cfc:	4563      	cmp	r3, ip
1a002cfe:	d809      	bhi.n	1a002d14 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a002d00:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002d04:	d1d7      	bne.n	1a002cb6 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a002d06:	1c74      	adds	r4, r6, #1
1a002d08:	fa23 f404 	lsr.w	r4, r3, r4
1a002d0c:	e7d4      	b.n	1a002cb8 <pll_calc_divs+0x24>
		return -val;
1a002d0e:	f1cc 0c00 	rsb	ip, ip, #0
1a002d12:	e7d4      	b.n	1a002cbe <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a002d14:	3601      	adds	r6, #1
1a002d16:	2e03      	cmp	r6, #3
1a002d18:	dc01      	bgt.n	1a002d1e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a002d1a:	2201      	movs	r2, #1
1a002d1c:	e7d9      	b.n	1a002cd2 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a002d1e:	3501      	adds	r5, #1
1a002d20:	2d04      	cmp	r5, #4
1a002d22:	dc01      	bgt.n	1a002d28 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a002d24:	2600      	movs	r6, #0
1a002d26:	e7f6      	b.n	1a002d16 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a002d28:	bcf0      	pop	{r4, r5, r6, r7}
1a002d2a:	4770      	bx	lr
1a002d2c:	094c5eff 	.word	0x094c5eff
1a002d30:	1312d000 	.word	0x1312d000

1a002d34 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002d34:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002d36:	b099      	sub	sp, #100	; 0x64
1a002d38:	4605      	mov	r5, r0
1a002d3a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002d3c:	225c      	movs	r2, #92	; 0x5c
1a002d3e:	2100      	movs	r1, #0
1a002d40:	a801      	add	r0, sp, #4
1a002d42:	f001 fc41 	bl	1a0045c8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002d46:	2380      	movs	r3, #128	; 0x80
1a002d48:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002d4a:	6963      	ldr	r3, [r4, #20]
1a002d4c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002d4e:	7923      	ldrb	r3, [r4, #4]
1a002d50:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002d54:	4669      	mov	r1, sp
1a002d56:	4628      	mov	r0, r5
1a002d58:	f7ff ff9c 	bl	1a002c94 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002d5c:	9b06      	ldr	r3, [sp, #24]
1a002d5e:	42ab      	cmp	r3, r5
1a002d60:	d027      	beq.n	1a002db2 <pll_get_frac+0x7e>
	if (val < 0)
1a002d62:	1aeb      	subs	r3, r5, r3
1a002d64:	d42e      	bmi.n	1a002dc4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002d66:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002d6e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002d70:	6963      	ldr	r3, [r4, #20]
1a002d72:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002d74:	7923      	ldrb	r3, [r4, #4]
1a002d76:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002d7a:	a910      	add	r1, sp, #64	; 0x40
1a002d7c:	4628      	mov	r0, r5
1a002d7e:	f7ff ff89 	bl	1a002c94 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002d82:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002d84:	42ab      	cmp	r3, r5
1a002d86:	d01f      	beq.n	1a002dc8 <pll_get_frac+0x94>
	if (val < 0)
1a002d88:	1aeb      	subs	r3, r5, r3
1a002d8a:	d425      	bmi.n	1a002dd8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002d8c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002d8e:	4b2b      	ldr	r3, [pc, #172]	; (1a002e3c <pll_get_frac+0x108>)
1a002d90:	429d      	cmp	r5, r3
1a002d92:	d923      	bls.n	1a002ddc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002d96:	1aed      	subs	r5, r5, r3
1a002d98:	d433      	bmi.n	1a002e02 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002d9a:	42ae      	cmp	r6, r5
1a002d9c:	dc3b      	bgt.n	1a002e16 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002d9e:	42be      	cmp	r6, r7
1a002da0:	dc31      	bgt.n	1a002e06 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002da2:	466d      	mov	r5, sp
1a002da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002da8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002db0:	e006      	b.n	1a002dc0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002db2:	466d      	mov	r5, sp
1a002db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002db8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002dc0:	b019      	add	sp, #100	; 0x64
1a002dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002dc4:	425b      	negs	r3, r3
1a002dc6:	e7ce      	b.n	1a002d66 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002dc8:	ad10      	add	r5, sp, #64	; 0x40
1a002dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002dce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002dd6:	e7f3      	b.n	1a002dc0 <pll_get_frac+0x8c>
		return -val;
1a002dd8:	425b      	negs	r3, r3
1a002dda:	e7d7      	b.n	1a002d8c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002ddc:	2340      	movs	r3, #64	; 0x40
1a002dde:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002de0:	6963      	ldr	r3, [r4, #20]
1a002de2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002de4:	a908      	add	r1, sp, #32
1a002de6:	4628      	mov	r0, r5
1a002de8:	f7ff ff54 	bl	1a002c94 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002dee:	42ab      	cmp	r3, r5
1a002df0:	d1d0      	bne.n	1a002d94 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002df2:	ad08      	add	r5, sp, #32
1a002df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002df8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002e00:	e7de      	b.n	1a002dc0 <pll_get_frac+0x8c>
		return -val;
1a002e02:	426d      	negs	r5, r5
1a002e04:	e7c9      	b.n	1a002d9a <pll_get_frac+0x66>
			*ppll = pll[2];
1a002e06:	ad10      	add	r5, sp, #64	; 0x40
1a002e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002e14:	e7d4      	b.n	1a002dc0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002e16:	42af      	cmp	r7, r5
1a002e18:	db07      	blt.n	1a002e2a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002e1a:	ad08      	add	r5, sp, #32
1a002e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002e28:	e7ca      	b.n	1a002dc0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002e2a:	ad10      	add	r5, sp, #64	; 0x40
1a002e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002e38:	e7c2      	b.n	1a002dc0 <pll_get_frac+0x8c>
1a002e3a:	bf00      	nop
1a002e3c:	068e7780 	.word	0x068e7780

1a002e40 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002e40:	b430      	push	{r4, r5}
1a002e42:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002e44:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002e46:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002e48:	e000      	b.n	1a002e4c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002e4a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002e4c:	281c      	cmp	r0, #28
1a002e4e:	d118      	bne.n	1a002e82 <Chip_Clock_FindBaseClock+0x42>
1a002e50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002e54:	0051      	lsls	r1, r2, #1
1a002e56:	4a0c      	ldr	r2, [pc, #48]	; (1a002e88 <Chip_Clock_FindBaseClock+0x48>)
1a002e58:	440a      	add	r2, r1
1a002e5a:	7914      	ldrb	r4, [r2, #4]
1a002e5c:	4284      	cmp	r4, r0
1a002e5e:	d010      	beq.n	1a002e82 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002e60:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002e64:	004a      	lsls	r2, r1, #1
1a002e66:	4908      	ldr	r1, [pc, #32]	; (1a002e88 <Chip_Clock_FindBaseClock+0x48>)
1a002e68:	5a8a      	ldrh	r2, [r1, r2]
1a002e6a:	42aa      	cmp	r2, r5
1a002e6c:	d8ed      	bhi.n	1a002e4a <Chip_Clock_FindBaseClock+0xa>
1a002e6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002e72:	0051      	lsls	r1, r2, #1
1a002e74:	4a04      	ldr	r2, [pc, #16]	; (1a002e88 <Chip_Clock_FindBaseClock+0x48>)
1a002e76:	440a      	add	r2, r1
1a002e78:	8852      	ldrh	r2, [r2, #2]
1a002e7a:	42aa      	cmp	r2, r5
1a002e7c:	d3e5      	bcc.n	1a002e4a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002e7e:	4620      	mov	r0, r4
1a002e80:	e7e4      	b.n	1a002e4c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002e82:	bc30      	pop	{r4, r5}
1a002e84:	4770      	bx	lr
1a002e86:	bf00      	nop
1a002e88:	1a004764 	.word	0x1a004764

1a002e8c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002e8c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002e92:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002e94:	4a0d      	ldr	r2, [pc, #52]	; (1a002ecc <Chip_Clock_EnableCrystal+0x40>)
1a002e96:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002e98:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002e9c:	6992      	ldr	r2, [r2, #24]
1a002e9e:	428a      	cmp	r2, r1
1a002ea0:	d001      	beq.n	1a002ea6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002ea2:	4a0a      	ldr	r2, [pc, #40]	; (1a002ecc <Chip_Clock_EnableCrystal+0x40>)
1a002ea4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002ea6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002eaa:	4a09      	ldr	r2, [pc, #36]	; (1a002ed0 <Chip_Clock_EnableCrystal+0x44>)
1a002eac:	6811      	ldr	r1, [r2, #0]
1a002eae:	4a09      	ldr	r2, [pc, #36]	; (1a002ed4 <Chip_Clock_EnableCrystal+0x48>)
1a002eb0:	4291      	cmp	r1, r2
1a002eb2:	d901      	bls.n	1a002eb8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002eb4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002eb8:	4a04      	ldr	r2, [pc, #16]	; (1a002ecc <Chip_Clock_EnableCrystal+0x40>)
1a002eba:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002ebc:	9b01      	ldr	r3, [sp, #4]
1a002ebe:	1e5a      	subs	r2, r3, #1
1a002ec0:	9201      	str	r2, [sp, #4]
1a002ec2:	2b00      	cmp	r3, #0
1a002ec4:	d1fa      	bne.n	1a002ebc <Chip_Clock_EnableCrystal+0x30>
}
1a002ec6:	b002      	add	sp, #8
1a002ec8:	4770      	bx	lr
1a002eca:	bf00      	nop
1a002ecc:	40050000 	.word	0x40050000
1a002ed0:	1a00470c 	.word	0x1a00470c
1a002ed4:	01312cff 	.word	0x01312cff

1a002ed8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002ed8:	3012      	adds	r0, #18
1a002eda:	4b05      	ldr	r3, [pc, #20]	; (1a002ef0 <Chip_Clock_GetDividerSource+0x18>)
1a002edc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002ee0:	f010 0f01 	tst.w	r0, #1
1a002ee4:	d102      	bne.n	1a002eec <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ee6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002eea:	4770      	bx	lr
		return CLKINPUT_PD;
1a002eec:	2011      	movs	r0, #17
}
1a002eee:	4770      	bx	lr
1a002ef0:	40050000 	.word	0x40050000

1a002ef4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002ef4:	f100 0212 	add.w	r2, r0, #18
1a002ef8:	4b03      	ldr	r3, [pc, #12]	; (1a002f08 <Chip_Clock_GetDividerDivisor+0x14>)
1a002efa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002efe:	4b03      	ldr	r3, [pc, #12]	; (1a002f0c <Chip_Clock_GetDividerDivisor+0x18>)
1a002f00:	5c18      	ldrb	r0, [r3, r0]
}
1a002f02:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002f06:	4770      	bx	lr
1a002f08:	40050000 	.word	0x40050000
1a002f0c:	1a00475c 	.word	0x1a00475c

1a002f10 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002f10:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002f12:	2810      	cmp	r0, #16
1a002f14:	d80a      	bhi.n	1a002f2c <Chip_Clock_GetClockInputHz+0x1c>
1a002f16:	e8df f000 	tbb	[pc, r0]
1a002f1a:	0b44      	.short	0x0b44
1a002f1c:	0921180d 	.word	0x0921180d
1a002f20:	2d2a2724 	.word	0x2d2a2724
1a002f24:	34300909 	.word	0x34300909
1a002f28:	3c38      	.short	0x3c38
1a002f2a:	40          	.byte	0x40
1a002f2b:	00          	.byte	0x00
	uint32_t rate = 0;
1a002f2c:	2000      	movs	r0, #0
1a002f2e:	e03a      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002f30:	481e      	ldr	r0, [pc, #120]	; (1a002fac <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002f32:	e038      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002f34:	4b1e      	ldr	r3, [pc, #120]	; (1a002fb0 <Chip_Clock_GetClockInputHz+0xa0>)
1a002f36:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002f3a:	f003 0307 	and.w	r3, r3, #7
1a002f3e:	2b04      	cmp	r3, #4
1a002f40:	d001      	beq.n	1a002f46 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002f42:	481c      	ldr	r0, [pc, #112]	; (1a002fb4 <Chip_Clock_GetClockInputHz+0xa4>)
1a002f44:	e02f      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a002f46:	2000      	movs	r0, #0
1a002f48:	e02d      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002f4a:	4b19      	ldr	r3, [pc, #100]	; (1a002fb0 <Chip_Clock_GetClockInputHz+0xa0>)
1a002f4c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002f50:	f003 0307 	and.w	r3, r3, #7
1a002f54:	2b04      	cmp	r3, #4
1a002f56:	d027      	beq.n	1a002fa8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002f58:	4816      	ldr	r0, [pc, #88]	; (1a002fb4 <Chip_Clock_GetClockInputHz+0xa4>)
1a002f5a:	e024      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002f5c:	4b16      	ldr	r3, [pc, #88]	; (1a002fb8 <Chip_Clock_GetClockInputHz+0xa8>)
1a002f5e:	6818      	ldr	r0, [r3, #0]
		break;
1a002f60:	e021      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002f62:	4b16      	ldr	r3, [pc, #88]	; (1a002fbc <Chip_Clock_GetClockInputHz+0xac>)
1a002f64:	6818      	ldr	r0, [r3, #0]
		break;
1a002f66:	e01e      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002f68:	4b15      	ldr	r3, [pc, #84]	; (1a002fc0 <Chip_Clock_GetClockInputHz+0xb0>)
1a002f6a:	6818      	ldr	r0, [r3, #0]
		break;
1a002f6c:	e01b      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002f6e:	4b14      	ldr	r3, [pc, #80]	; (1a002fc0 <Chip_Clock_GetClockInputHz+0xb0>)
1a002f70:	6858      	ldr	r0, [r3, #4]
		break;
1a002f72:	e018      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002f74:	f000 f868 	bl	1a003048 <Chip_Clock_GetMainPLLHz>
		break;
1a002f78:	e015      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002f7a:	2100      	movs	r1, #0
1a002f7c:	f000 f89a 	bl	1a0030b4 <Chip_Clock_GetDivRate>
		break;
1a002f80:	e011      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002f82:	2101      	movs	r1, #1
1a002f84:	f000 f896 	bl	1a0030b4 <Chip_Clock_GetDivRate>
		break;
1a002f88:	e00d      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002f8a:	2102      	movs	r1, #2
1a002f8c:	f000 f892 	bl	1a0030b4 <Chip_Clock_GetDivRate>
		break;
1a002f90:	e009      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002f92:	2103      	movs	r1, #3
1a002f94:	f000 f88e 	bl	1a0030b4 <Chip_Clock_GetDivRate>
		break;
1a002f98:	e005      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002f9a:	2104      	movs	r1, #4
1a002f9c:	f000 f88a 	bl	1a0030b4 <Chip_Clock_GetDivRate>
		break;
1a002fa0:	e001      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a002fa2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002fa6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a002fa8:	4806      	ldr	r0, [pc, #24]	; (1a002fc4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002faa:	e7fc      	b.n	1a002fa6 <Chip_Clock_GetClockInputHz+0x96>
1a002fac:	00b71b00 	.word	0x00b71b00
1a002fb0:	40043000 	.word	0x40043000
1a002fb4:	017d7840 	.word	0x017d7840
1a002fb8:	1a0046e0 	.word	0x1a0046e0
1a002fbc:	1a00470c 	.word	0x1a00470c
1a002fc0:	10000220 	.word	0x10000220
1a002fc4:	02faf080 	.word	0x02faf080

1a002fc8 <Chip_Clock_CalcMainPLLValue>:
{
1a002fc8:	b538      	push	{r3, r4, r5, lr}
1a002fca:	4605      	mov	r5, r0
1a002fcc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002fce:	7908      	ldrb	r0, [r1, #4]
1a002fd0:	f7ff ff9e 	bl	1a002f10 <Chip_Clock_GetClockInputHz>
1a002fd4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002fd6:	4b19      	ldr	r3, [pc, #100]	; (1a00303c <Chip_Clock_CalcMainPLLValue+0x74>)
1a002fd8:	442b      	add	r3, r5
1a002fda:	4a19      	ldr	r2, [pc, #100]	; (1a003040 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002fdc:	4293      	cmp	r3, r2
1a002fde:	d821      	bhi.n	1a003024 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002fe0:	b318      	cbz	r0, 1a00302a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002fe2:	2380      	movs	r3, #128	; 0x80
1a002fe4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002fe6:	2300      	movs	r3, #0
1a002fe8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002fea:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002fec:	fbb5 f3f0 	udiv	r3, r5, r0
1a002ff0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002ff2:	4a14      	ldr	r2, [pc, #80]	; (1a003044 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002ff4:	4295      	cmp	r5, r2
1a002ff6:	d903      	bls.n	1a003000 <Chip_Clock_CalcMainPLLValue+0x38>
1a002ff8:	fb03 f000 	mul.w	r0, r3, r0
1a002ffc:	42a8      	cmp	r0, r5
1a002ffe:	d007      	beq.n	1a003010 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003000:	4621      	mov	r1, r4
1a003002:	4628      	mov	r0, r5
1a003004:	f7ff fe96 	bl	1a002d34 <pll_get_frac>
		if (!ppll->nsel) {
1a003008:	68a3      	ldr	r3, [r4, #8]
1a00300a:	b18b      	cbz	r3, 1a003030 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00300c:	3b01      	subs	r3, #1
1a00300e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003010:	6923      	ldr	r3, [r4, #16]
1a003012:	b183      	cbz	r3, 1a003036 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003014:	68e2      	ldr	r2, [r4, #12]
1a003016:	b10a      	cbz	r2, 1a00301c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003018:	3a01      	subs	r2, #1
1a00301a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00301c:	3b01      	subs	r3, #1
1a00301e:	6123      	str	r3, [r4, #16]
	return 0;
1a003020:	2000      	movs	r0, #0
}
1a003022:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003024:	f04f 30ff 	mov.w	r0, #4294967295
1a003028:	e7fb      	b.n	1a003022 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00302a:	f04f 30ff 	mov.w	r0, #4294967295
1a00302e:	e7f8      	b.n	1a003022 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003030:	f04f 30ff 	mov.w	r0, #4294967295
1a003034:	e7f5      	b.n	1a003022 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003036:	f04f 30ff 	mov.w	r0, #4294967295
1a00303a:	e7f2      	b.n	1a003022 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00303c:	ff6b3a10 	.word	0xff6b3a10
1a003040:	0b940510 	.word	0x0b940510
1a003044:	094c5eff 	.word	0x094c5eff

1a003048 <Chip_Clock_GetMainPLLHz>:
{
1a003048:	b530      	push	{r4, r5, lr}
1a00304a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00304c:	4d17      	ldr	r5, [pc, #92]	; (1a0030ac <Chip_Clock_GetMainPLLHz+0x64>)
1a00304e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003050:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003054:	f7ff ff5c 	bl	1a002f10 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003058:	4b15      	ldr	r3, [pc, #84]	; (1a0030b0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00305a:	681b      	ldr	r3, [r3, #0]
1a00305c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00305e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003060:	f013 0f01 	tst.w	r3, #1
1a003064:	d020      	beq.n	1a0030a8 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a003066:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00306a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00306e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003072:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003076:	3301      	adds	r3, #1
	n = nsel + 1;
1a003078:	3201      	adds	r2, #1
	p = ptab[psel];
1a00307a:	f10d 0c08 	add.w	ip, sp, #8
1a00307e:	4461      	add	r1, ip
1a003080:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003084:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003088:	d108      	bne.n	1a00309c <Chip_Clock_GetMainPLLHz+0x54>
1a00308a:	b93d      	cbnz	r5, 1a00309c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00308c:	0049      	lsls	r1, r1, #1
1a00308e:	fbb3 f3f1 	udiv	r3, r3, r1
1a003092:	fbb0 f0f2 	udiv	r0, r0, r2
1a003096:	fb00 f003 	mul.w	r0, r0, r3
1a00309a:	e003      	b.n	1a0030a4 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a00309c:	fbb0 f0f2 	udiv	r0, r0, r2
1a0030a0:	fb03 f000 	mul.w	r0, r3, r0
}
1a0030a4:	b003      	add	sp, #12
1a0030a6:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0030a8:	2000      	movs	r0, #0
1a0030aa:	e7fb      	b.n	1a0030a4 <Chip_Clock_GetMainPLLHz+0x5c>
1a0030ac:	40050000 	.word	0x40050000
1a0030b0:	1a004758 	.word	0x1a004758

1a0030b4 <Chip_Clock_GetDivRate>:
{
1a0030b4:	b538      	push	{r3, r4, r5, lr}
1a0030b6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0030b8:	4608      	mov	r0, r1
1a0030ba:	f7ff ff0d 	bl	1a002ed8 <Chip_Clock_GetDividerSource>
1a0030be:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0030c0:	4620      	mov	r0, r4
1a0030c2:	f7ff ff17 	bl	1a002ef4 <Chip_Clock_GetDividerDivisor>
1a0030c6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0030c8:	4628      	mov	r0, r5
1a0030ca:	f7ff ff21 	bl	1a002f10 <Chip_Clock_GetClockInputHz>
1a0030ce:	3401      	adds	r4, #1
}
1a0030d0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0030d4:	bd38      	pop	{r3, r4, r5, pc}
1a0030d6:	Address 0x1a0030d6 is out of bounds.


1a0030d8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0030d8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0030da:	f100 0416 	add.w	r4, r0, #22
1a0030de:	00a4      	lsls	r4, r4, #2
1a0030e0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0030e4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0030e8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0030ea:	281b      	cmp	r0, #27
1a0030ec:	d813      	bhi.n	1a003116 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0030ee:	2911      	cmp	r1, #17
1a0030f0:	d01a      	beq.n	1a003128 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0030f2:	4d0e      	ldr	r5, [pc, #56]	; (1a00312c <Chip_Clock_SetBaseClock+0x54>)
1a0030f4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0030f6:	b10a      	cbz	r2, 1a0030fc <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0030f8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0030fc:	b10b      	cbz	r3, 1a003102 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0030fe:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003102:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003106:	3016      	adds	r0, #22
1a003108:	0080      	lsls	r0, r0, #2
1a00310a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00310e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003112:	6045      	str	r5, [r0, #4]
1a003114:	e008      	b.n	1a003128 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003116:	f044 0401 	orr.w	r4, r4, #1
1a00311a:	3016      	adds	r0, #22
1a00311c:	0080      	lsls	r0, r0, #2
1a00311e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003122:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003126:	6044      	str	r4, [r0, #4]
	}
}
1a003128:	bc30      	pop	{r4, r5}
1a00312a:	4770      	bx	lr
1a00312c:	e0fff7fe 	.word	0xe0fff7fe

1a003130 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003130:	281b      	cmp	r0, #27
1a003132:	d80c      	bhi.n	1a00314e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003134:	3016      	adds	r0, #22
1a003136:	0080      	lsls	r0, r0, #2
1a003138:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00313c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003140:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003142:	f010 0f01 	tst.w	r0, #1
1a003146:	d104      	bne.n	1a003152 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003148:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00314c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00314e:	2011      	movs	r0, #17
1a003150:	4770      	bx	lr
		return CLKINPUT_PD;
1a003152:	2011      	movs	r0, #17
}
1a003154:	4770      	bx	lr

1a003156 <Chip_Clock_GetBaseClocktHz>:
{
1a003156:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003158:	f7ff ffea 	bl	1a003130 <Chip_Clock_GetBaseClock>
1a00315c:	f7ff fed8 	bl	1a002f10 <Chip_Clock_GetClockInputHz>
}
1a003160:	bd08      	pop	{r3, pc}
1a003162:	Address 0x1a003162 is out of bounds.


1a003164 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003164:	b971      	cbnz	r1, 1a003184 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a003166:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003168:	b10a      	cbz	r2, 1a00316e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00316a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00316e:	2b02      	cmp	r3, #2
1a003170:	d00a      	beq.n	1a003188 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003172:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003176:	d30a      	bcc.n	1a00318e <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003178:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00317c:	4b06      	ldr	r3, [pc, #24]	; (1a003198 <Chip_Clock_EnableOpts+0x34>)
1a00317e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003182:	4770      	bx	lr
		reg |= (1 << 1);
1a003184:	2103      	movs	r1, #3
1a003186:	e7ef      	b.n	1a003168 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003188:	f041 0120 	orr.w	r1, r1, #32
1a00318c:	e7f1      	b.n	1a003172 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00318e:	3020      	adds	r0, #32
1a003190:	4b02      	ldr	r3, [pc, #8]	; (1a00319c <Chip_Clock_EnableOpts+0x38>)
1a003192:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003196:	4770      	bx	lr
1a003198:	40052000 	.word	0x40052000
1a00319c:	40051000 	.word	0x40051000

1a0031a0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0031a0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0031a4:	d309      	bcc.n	1a0031ba <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0031a6:	4a09      	ldr	r2, [pc, #36]	; (1a0031cc <Chip_Clock_Enable+0x2c>)
1a0031a8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0031ac:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0031b0:	f043 0301 	orr.w	r3, r3, #1
1a0031b4:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0031b8:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0031ba:	4a05      	ldr	r2, [pc, #20]	; (1a0031d0 <Chip_Clock_Enable+0x30>)
1a0031bc:	3020      	adds	r0, #32
1a0031be:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0031c2:	f043 0301 	orr.w	r3, r3, #1
1a0031c6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0031ca:	4770      	bx	lr
1a0031cc:	40052000 	.word	0x40052000
1a0031d0:	40051000 	.word	0x40051000

1a0031d4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0031d4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0031d6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0031da:	d309      	bcc.n	1a0031f0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0031dc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0031e0:	4a0d      	ldr	r2, [pc, #52]	; (1a003218 <Chip_Clock_GetRate+0x44>)
1a0031e2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0031e6:	f014 0f01 	tst.w	r4, #1
1a0031ea:	d107      	bne.n	1a0031fc <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0031ec:	2000      	movs	r0, #0
	}

	return rate;
}
1a0031ee:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0031f0:	f100 0320 	add.w	r3, r0, #32
1a0031f4:	4a09      	ldr	r2, [pc, #36]	; (1a00321c <Chip_Clock_GetRate+0x48>)
1a0031f6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0031fa:	e7f4      	b.n	1a0031e6 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0031fc:	f7ff fe20 	bl	1a002e40 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003200:	f7ff ffa9 	bl	1a003156 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003204:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003208:	d103      	bne.n	1a003212 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00320a:	2301      	movs	r3, #1
		rate = rate / div;
1a00320c:	fbb0 f0f3 	udiv	r0, r0, r3
1a003210:	e7ed      	b.n	1a0031ee <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003212:	2302      	movs	r3, #2
1a003214:	e7fa      	b.n	1a00320c <Chip_Clock_GetRate+0x38>
1a003216:	bf00      	nop
1a003218:	40052000 	.word	0x40052000
1a00321c:	40051000 	.word	0x40051000

1a003220 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003220:	4b09      	ldr	r3, [pc, #36]	; (1a003248 <Chip_UART_GetIndex+0x28>)
1a003222:	4298      	cmp	r0, r3
1a003224:	d009      	beq.n	1a00323a <Chip_UART_GetIndex+0x1a>
1a003226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00322a:	4298      	cmp	r0, r3
1a00322c:	d007      	beq.n	1a00323e <Chip_UART_GetIndex+0x1e>
1a00322e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003232:	4298      	cmp	r0, r3
1a003234:	d005      	beq.n	1a003242 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003236:	2000      	movs	r0, #0
1a003238:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00323a:	2002      	movs	r0, #2
1a00323c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00323e:	2003      	movs	r0, #3
1a003240:	4770      	bx	lr
			return 1;
1a003242:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003244:	4770      	bx	lr
1a003246:	bf00      	nop
1a003248:	400c1000 	.word	0x400c1000

1a00324c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00324c:	b530      	push	{r4, r5, lr}
1a00324e:	b083      	sub	sp, #12
1a003250:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003252:	f7ff ffe5 	bl	1a003220 <Chip_UART_GetIndex>
1a003256:	2301      	movs	r3, #1
1a003258:	461a      	mov	r2, r3
1a00325a:	4619      	mov	r1, r3
1a00325c:	4d0e      	ldr	r5, [pc, #56]	; (1a003298 <Chip_UART_Init+0x4c>)
1a00325e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003262:	f7ff ff7f 	bl	1a003164 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003266:	2307      	movs	r3, #7
1a003268:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00326a:	2300      	movs	r3, #0
1a00326c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00326e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003270:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003272:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003274:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003276:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003278:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00327a:	4b08      	ldr	r3, [pc, #32]	; (1a00329c <Chip_UART_Init+0x50>)
1a00327c:	429c      	cmp	r4, r3
1a00327e:	d006      	beq.n	1a00328e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003280:	2303      	movs	r3, #3
1a003282:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003284:	2310      	movs	r3, #16
1a003286:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003288:	9b01      	ldr	r3, [sp, #4]
}
1a00328a:	b003      	add	sp, #12
1a00328c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00328e:	2300      	movs	r3, #0
1a003290:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003292:	69a3      	ldr	r3, [r4, #24]
1a003294:	9301      	str	r3, [sp, #4]
1a003296:	e7f3      	b.n	1a003280 <Chip_UART_Init+0x34>
1a003298:	1a0047d8 	.word	0x1a0047d8
1a00329c:	40082000 	.word	0x40082000

1a0032a0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0032a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0032a4:	b083      	sub	sp, #12
1a0032a6:	9001      	str	r0, [sp, #4]
1a0032a8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0032aa:	f7ff ffb9 	bl	1a003220 <Chip_UART_GetIndex>
1a0032ae:	4b32      	ldr	r3, [pc, #200]	; (1a003378 <Chip_UART_SetBaudFDR+0xd8>)
1a0032b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0032b4:	f7ff ff8e 	bl	1a0031d4 <Chip_Clock_GetRate>
1a0032b8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0032ba:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0032be:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0032c0:	f04f 0b00 	mov.w	fp, #0
1a0032c4:	46a2      	mov	sl, r4
1a0032c6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0032c8:	e02a      	b.n	1a003320 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0032ca:	4242      	negs	r2, r0
				div ++;
1a0032cc:	1c4b      	adds	r3, r1, #1
1a0032ce:	e017      	b.n	1a003300 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0032d0:	b30a      	cbz	r2, 1a003316 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0032d2:	4617      	mov	r7, r2
			sd = d;
1a0032d4:	46ab      	mov	fp, r5
			sm = m;
1a0032d6:	46a2      	mov	sl, r4
			sdiv = div;
1a0032d8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0032da:	3501      	adds	r5, #1
1a0032dc:	42ac      	cmp	r4, r5
1a0032de:	d91e      	bls.n	1a00331e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0032e0:	0933      	lsrs	r3, r6, #4
1a0032e2:	0730      	lsls	r0, r6, #28
1a0032e4:	fba4 0100 	umull	r0, r1, r4, r0
1a0032e8:	fb04 1103 	mla	r1, r4, r3, r1
1a0032ec:	1962      	adds	r2, r4, r5
1a0032ee:	fb08 f202 	mul.w	r2, r8, r2
1a0032f2:	2300      	movs	r3, #0
1a0032f4:	f000 ffc2 	bl	1a00427c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0032f8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0032fa:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0032fc:	2800      	cmp	r0, #0
1a0032fe:	dbe4      	blt.n	1a0032ca <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003300:	4297      	cmp	r7, r2
1a003302:	d3ea      	bcc.n	1a0032da <Chip_UART_SetBaudFDR+0x3a>
1a003304:	2b00      	cmp	r3, #0
1a003306:	d0e8      	beq.n	1a0032da <Chip_UART_SetBaudFDR+0x3a>
1a003308:	0c19      	lsrs	r1, r3, #16
1a00330a:	d1e6      	bne.n	1a0032da <Chip_UART_SetBaudFDR+0x3a>
1a00330c:	2b02      	cmp	r3, #2
1a00330e:	d8df      	bhi.n	1a0032d0 <Chip_UART_SetBaudFDR+0x30>
1a003310:	2d00      	cmp	r5, #0
1a003312:	d0dd      	beq.n	1a0032d0 <Chip_UART_SetBaudFDR+0x30>
1a003314:	e7e1      	b.n	1a0032da <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003316:	4617      	mov	r7, r2
			sd = d;
1a003318:	46ab      	mov	fp, r5
			sm = m;
1a00331a:	46a2      	mov	sl, r4
			sdiv = div;
1a00331c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00331e:	3401      	adds	r4, #1
1a003320:	b11f      	cbz	r7, 1a00332a <Chip_UART_SetBaudFDR+0x8a>
1a003322:	2c0f      	cmp	r4, #15
1a003324:	d801      	bhi.n	1a00332a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003326:	2500      	movs	r5, #0
1a003328:	e7d8      	b.n	1a0032dc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00332a:	f1b9 0f00 	cmp.w	r9, #0
1a00332e:	d01e      	beq.n	1a00336e <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003330:	9a01      	ldr	r2, [sp, #4]
1a003332:	4611      	mov	r1, r2
1a003334:	68d3      	ldr	r3, [r2, #12]
1a003336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00333a:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00333c:	fa5f f389 	uxtb.w	r3, r9
1a003340:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a003342:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a003346:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003348:	68d3      	ldr	r3, [r2, #12]
1a00334a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00334e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003350:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a003354:	b2db      	uxtb	r3, r3
1a003356:	f00b 020f 	and.w	r2, fp, #15
1a00335a:	4313      	orrs	r3, r2
1a00335c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00335e:	0933      	lsrs	r3, r6, #4
1a003360:	fb0a f303 	mul.w	r3, sl, r3
1a003364:	44da      	add	sl, fp
1a003366:	fb09 f90a 	mul.w	r9, r9, sl
1a00336a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00336e:	4648      	mov	r0, r9
1a003370:	b003      	add	sp, #12
1a003372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003376:	bf00      	nop
1a003378:	1a0047d0 	.word	0x1a0047d0

1a00337c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00337c:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00337e:	4a0b      	ldr	r2, [pc, #44]	; (1a0033ac <SystemInit+0x30>)
1a003380:	4b0b      	ldr	r3, [pc, #44]	; (1a0033b0 <SystemInit+0x34>)
1a003382:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003384:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003388:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00338a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00338e:	2b20      	cmp	r3, #32
1a003390:	d004      	beq.n	1a00339c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a003392:	f7ff f86f 	bl	1a002474 <Board_SystemInit>
   Board_Init();
1a003396:	f7ff f92d 	bl	1a0025f4 <Board_Init>
#endif
}
1a00339a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00339c:	4a04      	ldr	r2, [pc, #16]	; (1a0033b0 <SystemInit+0x34>)
1a00339e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0033a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0033a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0033aa:	e7f2      	b.n	1a003392 <SystemInit+0x16>
1a0033ac:	1a000000 	.word	0x1a000000
1a0033b0:	e000ed00 	.word	0xe000ed00

1a0033b4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0033b4:	4b04      	ldr	r3, [pc, #16]	; (1a0033c8 <cyclesCounterInit+0x14>)
1a0033b6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0033b8:	4a04      	ldr	r2, [pc, #16]	; (1a0033cc <cyclesCounterInit+0x18>)
1a0033ba:	6813      	ldr	r3, [r2, #0]
1a0033bc:	f043 0301 	orr.w	r3, r3, #1
1a0033c0:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0033c2:	2001      	movs	r0, #1
1a0033c4:	4770      	bx	lr
1a0033c6:	bf00      	nop
1a0033c8:	10000038 	.word	0x10000038
1a0033cc:	e0001000 	.word	0xe0001000

1a0033d0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0033d0:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0033d2:	4d0b      	ldr	r5, [pc, #44]	; (1a003400 <gpioObtainPinInit+0x30>)
1a0033d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0033d8:	182c      	adds	r4, r5, r0
1a0033da:	5628      	ldrsb	r0, [r5, r0]
1a0033dc:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0033de:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0033e2:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0033e4:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0033e8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0033ea:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0033ee:	9b02      	ldr	r3, [sp, #8]
1a0033f0:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0033f2:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0033f6:	9b03      	ldr	r3, [sp, #12]
1a0033f8:	701a      	strb	r2, [r3, #0]
}
1a0033fa:	bc30      	pop	{r4, r5}
1a0033fc:	4770      	bx	lr
1a0033fe:	bf00      	nop
1a003400:	1a0047e0 	.word	0x1a0047e0

1a003404 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003404:	f110 0f02 	cmn.w	r0, #2
1a003408:	f000 80c7 	beq.w	1a00359a <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00340c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a003410:	f000 80c5 	beq.w	1a00359e <gpioInit+0x19a>
{
1a003414:	b570      	push	{r4, r5, r6, lr}
1a003416:	b084      	sub	sp, #16
1a003418:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00341a:	2300      	movs	r3, #0
1a00341c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003420:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003424:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003428:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00342c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003430:	f10d 030b 	add.w	r3, sp, #11
1a003434:	9301      	str	r3, [sp, #4]
1a003436:	ab03      	add	r3, sp, #12
1a003438:	9300      	str	r3, [sp, #0]
1a00343a:	f10d 030d 	add.w	r3, sp, #13
1a00343e:	f10d 020e 	add.w	r2, sp, #14
1a003442:	f10d 010f 	add.w	r1, sp, #15
1a003446:	f7ff ffc3 	bl	1a0033d0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00344a:	2c05      	cmp	r4, #5
1a00344c:	f200 80a9 	bhi.w	1a0035a2 <gpioInit+0x19e>
1a003450:	e8df f004 	tbb	[pc, r4]
1a003454:	45278109 	.word	0x45278109
1a003458:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00345a:	4853      	ldr	r0, [pc, #332]	; (1a0035a8 <gpioInit+0x1a4>)
1a00345c:	f7ff fa66 	bl	1a00292c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003460:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003462:	b004      	add	sp, #16
1a003464:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003466:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00346a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00346e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003472:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003476:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00347a:	494c      	ldr	r1, [pc, #304]	; (1a0035ac <gpioInit+0x1a8>)
1a00347c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003480:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003484:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003488:	2001      	movs	r0, #1
1a00348a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00348e:	4c46      	ldr	r4, [pc, #280]	; (1a0035a8 <gpioInit+0x1a4>)
1a003490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003494:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003498:	ea22 0201 	bic.w	r2, r2, r1
1a00349c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0034a0:	e7df      	b.n	1a003462 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0034a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0034a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0034aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0034ae:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0034b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0034b6:	493d      	ldr	r1, [pc, #244]	; (1a0035ac <gpioInit+0x1a8>)
1a0034b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0034bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0034c0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0034c4:	2001      	movs	r0, #1
1a0034c6:	fa00 f102 	lsl.w	r1, r0, r2
1a0034ca:	4c37      	ldr	r4, [pc, #220]	; (1a0035a8 <gpioInit+0x1a4>)
1a0034cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0034d0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0034d4:	ea22 0201 	bic.w	r2, r2, r1
1a0034d8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0034dc:	e7c1      	b.n	1a003462 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0034de:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0034e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0034e6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0034ea:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0034ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0034f2:	492e      	ldr	r1, [pc, #184]	; (1a0035ac <gpioInit+0x1a8>)
1a0034f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0034f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0034fc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003500:	2001      	movs	r0, #1
1a003502:	fa00 f102 	lsl.w	r1, r0, r2
1a003506:	4c28      	ldr	r4, [pc, #160]	; (1a0035a8 <gpioInit+0x1a4>)
1a003508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00350c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003510:	ea22 0201 	bic.w	r2, r2, r1
1a003514:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003518:	e7a3      	b.n	1a003462 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00351a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00351e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003522:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003526:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00352a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00352e:	491f      	ldr	r1, [pc, #124]	; (1a0035ac <gpioInit+0x1a8>)
1a003530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003534:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003538:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00353c:	2001      	movs	r0, #1
1a00353e:	fa00 f102 	lsl.w	r1, r0, r2
1a003542:	4c19      	ldr	r4, [pc, #100]	; (1a0035a8 <gpioInit+0x1a4>)
1a003544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003548:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00354c:	ea22 0201 	bic.w	r2, r2, r1
1a003550:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003554:	e785      	b.n	1a003462 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003556:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00355a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00355e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003562:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003566:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00356a:	4910      	ldr	r1, [pc, #64]	; (1a0035ac <gpioInit+0x1a8>)
1a00356c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003570:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003574:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003578:	2001      	movs	r0, #1
1a00357a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00357e:	4b0a      	ldr	r3, [pc, #40]	; (1a0035a8 <gpioInit+0x1a4>)
1a003580:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003584:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003588:	4331      	orrs	r1, r6
1a00358a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00358e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003590:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003594:	2100      	movs	r1, #0
1a003596:	5499      	strb	r1, [r3, r2]
1a003598:	e763      	b.n	1a003462 <gpioInit+0x5e>
	  return FALSE;
1a00359a:	2000      	movs	r0, #0
1a00359c:	4770      	bx	lr
	  return FALSE;
1a00359e:	2000      	movs	r0, #0
}
1a0035a0:	4770      	bx	lr
      ret_val = 0;
1a0035a2:	2000      	movs	r0, #0
1a0035a4:	e75d      	b.n	1a003462 <gpioInit+0x5e>
1a0035a6:	bf00      	nop
1a0035a8:	400f4000 	.word	0x400f4000
1a0035ac:	40086000 	.word	0x40086000

1a0035b0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0035b0:	f110 0f02 	cmn.w	r0, #2
1a0035b4:	d02d      	beq.n	1a003612 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0035b6:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0035ba:	d02c      	beq.n	1a003616 <gpioWrite+0x66>
{
1a0035bc:	b510      	push	{r4, lr}
1a0035be:	b084      	sub	sp, #16
1a0035c0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0035c2:	2300      	movs	r3, #0
1a0035c4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0035c8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0035cc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0035d0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0035d4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0035d8:	f10d 030b 	add.w	r3, sp, #11
1a0035dc:	9301      	str	r3, [sp, #4]
1a0035de:	ab03      	add	r3, sp, #12
1a0035e0:	9300      	str	r3, [sp, #0]
1a0035e2:	f10d 030d 	add.w	r3, sp, #13
1a0035e6:	f10d 020e 	add.w	r2, sp, #14
1a0035ea:	f10d 010f 	add.w	r1, sp, #15
1a0035ee:	f7ff feef 	bl	1a0033d0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0035f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0035f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0035fa:	1c21      	adds	r1, r4, #0
1a0035fc:	bf18      	it	ne
1a0035fe:	2101      	movne	r1, #1
1a003600:	015b      	lsls	r3, r3, #5
1a003602:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003606:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00360a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00360c:	2001      	movs	r0, #1
}
1a00360e:	b004      	add	sp, #16
1a003610:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003612:	2000      	movs	r0, #0
1a003614:	4770      	bx	lr
	  return FALSE;
1a003616:	2000      	movs	r0, #0
}
1a003618:	4770      	bx	lr

1a00361a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00361a:	f110 0f02 	cmn.w	r0, #2
1a00361e:	d02c      	beq.n	1a00367a <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003620:	f1b0 3fff 	cmp.w	r0, #4294967295
1a003624:	d02b      	beq.n	1a00367e <gpioRead+0x64>
{
1a003626:	b500      	push	{lr}
1a003628:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00362a:	2300      	movs	r3, #0
1a00362c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003630:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003634:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003638:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00363c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003640:	f10d 030b 	add.w	r3, sp, #11
1a003644:	9301      	str	r3, [sp, #4]
1a003646:	ab03      	add	r3, sp, #12
1a003648:	9300      	str	r3, [sp, #0]
1a00364a:	f10d 030d 	add.w	r3, sp, #13
1a00364e:	f10d 020e 	add.w	r2, sp, #14
1a003652:	f10d 010f 	add.w	r1, sp, #15
1a003656:	f7ff febb 	bl	1a0033d0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00365a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00365e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003662:	015b      	lsls	r3, r3, #5
1a003664:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003668:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00366c:	5c98      	ldrb	r0, [r3, r2]
1a00366e:	3000      	adds	r0, #0
1a003670:	bf18      	it	ne
1a003672:	2001      	movne	r0, #1

   return ret_val;
}
1a003674:	b005      	add	sp, #20
1a003676:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00367a:	2001      	movs	r0, #1
1a00367c:	4770      	bx	lr
      return FALSE;
1a00367e:	2000      	movs	r0, #0
}
1a003680:	4770      	bx	lr
1a003682:	Address 0x1a003682 is out of bounds.


1a003684 <i2cInit>:

/*==================[external functions definition]==========================*/

bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
   if( i2cNumber != I2C0 ) {
1a003684:	b108      	cbz	r0, 1a00368a <i2cInit+0x6>
      return FALSE;
1a003686:	2000      	movs	r0, #0
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );

   return TRUE;
}
1a003688:	4770      	bx	lr
{
1a00368a:	b538      	push	{r3, r4, r5, lr}
1a00368c:	4604      	mov	r4, r0
1a00368e:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003690:	4b08      	ldr	r3, [pc, #32]	; (1a0036b4 <i2cInit+0x30>)
1a003692:	f640 0208 	movw	r2, #2056	; 0x808
1a003696:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_Init( i2cNumber );
1a00369a:	f7ff f8c1 	bl	1a002820 <Chip_I2C_Init>
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a00369e:	4629      	mov	r1, r5
1a0036a0:	4620      	mov	r0, r4
1a0036a2:	f7ff f8cf 	bl	1a002844 <Chip_I2C_SetClockRate>
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0036a6:	4904      	ldr	r1, [pc, #16]	; (1a0036b8 <i2cInit+0x34>)
1a0036a8:	4620      	mov	r0, r4
1a0036aa:	f7ff f8e7 	bl	1a00287c <Chip_I2C_SetMasterEventHandler>
   return TRUE;
1a0036ae:	2001      	movs	r0, #1
}
1a0036b0:	bd38      	pop	{r3, r4, r5, pc}
1a0036b2:	bf00      	nop
1a0036b4:	40086000 	.word	0x40086000
1a0036b8:	1a0028f5 	.word	0x1a0028f5

1a0036bc <i2cWrite>:
                 uint8_t  i2cSlaveAddress,
                 uint8_t* transmitDataBuffer,
                 uint16_t transmitDataBufferSize,
                 bool_t   sendWriteStop )
{
   if( i2cNumber != I2C0 ) {
1a0036bc:	b108      	cbz	r0, 1a0036c2 <i2cWrite+0x6>
      return FALSE;
1a0036be:	2000      	movs	r0, #0
   //    }
   // }
   // END - TEST I2C Response -----------------------

   return TRUE;
}
1a0036c0:	4770      	bx	lr
{
1a0036c2:	b500      	push	{lr}
1a0036c4:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a0036c6:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0036ca:	2100      	movs	r1, #0
1a0036cc:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0036d0:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0036d4:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0036d6:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a0036da:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a0036dc:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0036e0:	4669      	mov	r1, sp
1a0036e2:	4805      	ldr	r0, [pc, #20]	; (1a0036f8 <i2cWrite+0x3c>)
1a0036e4:	f7ff fa0e 	bl	1a002b04 <Chip_I2CM_XferBlocking>
1a0036e8:	b118      	cbz	r0, 1a0036f2 <i2cWrite+0x36>
   return TRUE;
1a0036ea:	2001      	movs	r0, #1
}
1a0036ec:	b005      	add	sp, #20
1a0036ee:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a0036f2:	2000      	movs	r0, #0
1a0036f4:	e7fa      	b.n	1a0036ec <i2cWrite+0x30>
1a0036f6:	bf00      	nop
1a0036f8:	400a1000 	.word	0x400a1000

1a0036fc <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0036fc:	4b01      	ldr	r3, [pc, #4]	; (1a003704 <tickRead+0x8>)
1a0036fe:	e9d3 0100 	ldrd	r0, r1, [r3]
1a003702:	4770      	bx	lr
1a003704:	10000230 	.word	0x10000230

1a003708 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a003708:	b130      	cbz	r0, 1a003718 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a00370a:	4a05      	ldr	r2, [pc, #20]	; (1a003720 <tickCallbackSet+0x18>)
1a00370c:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a00370e:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a003710:	b121      	cbz	r1, 1a00371c <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a003712:	4b04      	ldr	r3, [pc, #16]	; (1a003724 <tickCallbackSet+0x1c>)
1a003714:	6019      	str	r1, [r3, #0]
1a003716:	4770      	bx	lr
         retVal = FALSE;
1a003718:	2000      	movs	r0, #0
1a00371a:	e7f9      	b.n	1a003710 <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a00371c:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a00371e:	4770      	bx	lr
1a003720:	10000238 	.word	0x10000238
1a003724:	10000228 	.word	0x10000228

1a003728 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a003728:	b118      	cbz	r0, 1a003732 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00372a:	4b04      	ldr	r3, [pc, #16]	; (1a00373c <tickPowerSet+0x14>)
1a00372c:	2207      	movs	r2, #7
1a00372e:	601a      	str	r2, [r3, #0]
1a003730:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a003732:	4b02      	ldr	r3, [pc, #8]	; (1a00373c <tickPowerSet+0x14>)
1a003734:	2200      	movs	r2, #0
1a003736:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a003738:	4770      	bx	lr
1a00373a:	bf00      	nop
1a00373c:	e000e010 	.word	0xe000e010

1a003740 <tickInit>:
{
1a003740:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a003742:	ea50 0401 	orrs.w	r4, r0, r1
1a003746:	d02a      	beq.n	1a00379e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a003748:	f110 32ff 	adds.w	r2, r0, #4294967295
1a00374c:	f141 33ff 	adc.w	r3, r1, #4294967295
1a003750:	2b00      	cmp	r3, #0
1a003752:	bf08      	it	eq
1a003754:	2a32      	cmpeq	r2, #50	; 0x32
1a003756:	d227      	bcs.n	1a0037a8 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a003758:	4b14      	ldr	r3, [pc, #80]	; (1a0037ac <tickInit+0x6c>)
1a00375a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00375e:	4b14      	ldr	r3, [pc, #80]	; (1a0037b0 <tickInit+0x70>)
1a003760:	681b      	ldr	r3, [r3, #0]
1a003762:	fba3 4500 	umull	r4, r5, r3, r0
1a003766:	fb03 5501 	mla	r5, r3, r1, r5
1a00376a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00376e:	2300      	movs	r3, #0
1a003770:	4620      	mov	r0, r4
1a003772:	4629      	mov	r1, r5
1a003774:	f000 fd82 	bl	1a00427c <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a003778:	3801      	subs	r0, #1
1a00377a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00377e:	d209      	bcs.n	1a003794 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a003780:	4b0c      	ldr	r3, [pc, #48]	; (1a0037b4 <tickInit+0x74>)
1a003782:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003784:	4a0c      	ldr	r2, [pc, #48]	; (1a0037b8 <tickInit+0x78>)
1a003786:	21e0      	movs	r1, #224	; 0xe0
1a003788:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00378c:	2200      	movs	r2, #0
1a00378e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a003790:	2207      	movs	r2, #7
1a003792:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a003794:	2001      	movs	r0, #1
1a003796:	f7ff ffc7 	bl	1a003728 <tickPowerSet>
      bool_t ret_val = 1;
1a00379a:	2001      	movs	r0, #1
}
1a00379c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00379e:	2000      	movs	r0, #0
1a0037a0:	f7ff ffc2 	bl	1a003728 <tickPowerSet>
         ret_val = 0;
1a0037a4:	2000      	movs	r0, #0
1a0037a6:	e7f9      	b.n	1a00379c <tickInit+0x5c>
            ret_val = 0;
1a0037a8:	2000      	movs	r0, #0
1a0037aa:	e7f7      	b.n	1a00379c <tickInit+0x5c>
1a0037ac:	10000040 	.word	0x10000040
1a0037b0:	1000024c 	.word	0x1000024c
1a0037b4:	e000e010 	.word	0xe000e010
1a0037b8:	e000ed00 	.word	0xe000ed00

1a0037bc <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0037bc:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0037be:	4a07      	ldr	r2, [pc, #28]	; (1a0037dc <SysTick_Handler+0x20>)
1a0037c0:	6813      	ldr	r3, [r2, #0]
1a0037c2:	6851      	ldr	r1, [r2, #4]
1a0037c4:	3301      	adds	r3, #1
1a0037c6:	f141 0100 	adc.w	r1, r1, #0
1a0037ca:	6013      	str	r3, [r2, #0]
1a0037cc:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0037ce:	4b04      	ldr	r3, [pc, #16]	; (1a0037e0 <SysTick_Handler+0x24>)
1a0037d0:	681b      	ldr	r3, [r3, #0]
1a0037d2:	b113      	cbz	r3, 1a0037da <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0037d4:	4a03      	ldr	r2, [pc, #12]	; (1a0037e4 <SysTick_Handler+0x28>)
1a0037d6:	6810      	ldr	r0, [r2, #0]
1a0037d8:	4798      	blx	r3
   }
}
1a0037da:	bd08      	pop	{r3, pc}
1a0037dc:	10000230 	.word	0x10000230
1a0037e0:	10000238 	.word	0x10000238
1a0037e4:	10000228 	.word	0x10000228

1a0037e8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0037e8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0037ea:	4b04      	ldr	r3, [pc, #16]	; (1a0037fc <USB0_IRQHandler+0x14>)
1a0037ec:	681b      	ldr	r3, [r3, #0]
1a0037ee:	681b      	ldr	r3, [r3, #0]
1a0037f0:	68db      	ldr	r3, [r3, #12]
1a0037f2:	4a03      	ldr	r2, [pc, #12]	; (1a003800 <USB0_IRQHandler+0x18>)
1a0037f4:	6810      	ldr	r0, [r2, #0]
1a0037f6:	4798      	blx	r3
}
1a0037f8:	bd08      	pop	{r3, pc}
1a0037fa:	bf00      	nop
1a0037fc:	10000250 	.word	0x10000250
1a003800:	1000023c 	.word	0x1000023c

1a003804 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003804:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003806:	f7ff fa3b 	bl	1a002c80 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00380a:	4b1a      	ldr	r3, [pc, #104]	; (1a003874 <boardInit+0x70>)
1a00380c:	6818      	ldr	r0, [r3, #0]
1a00380e:	f7ff fdd1 	bl	1a0033b4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a003812:	2001      	movs	r0, #1
1a003814:	2100      	movs	r1, #0
1a003816:	f7ff ff93 	bl	1a003740 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00381a:	2105      	movs	r1, #5
1a00381c:	2000      	movs	r0, #0
1a00381e:	f7ff fdf1 	bl	1a003404 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a003822:	2100      	movs	r1, #0
1a003824:	2024      	movs	r0, #36	; 0x24
1a003826:	f7ff fded 	bl	1a003404 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00382a:	2100      	movs	r1, #0
1a00382c:	2025      	movs	r0, #37	; 0x25
1a00382e:	f7ff fde9 	bl	1a003404 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a003832:	2100      	movs	r1, #0
1a003834:	2026      	movs	r0, #38	; 0x26
1a003836:	f7ff fde5 	bl	1a003404 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a00383a:	2100      	movs	r1, #0
1a00383c:	2027      	movs	r0, #39	; 0x27
1a00383e:	f7ff fde1 	bl	1a003404 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a003842:	2101      	movs	r1, #1
1a003844:	2028      	movs	r0, #40	; 0x28
1a003846:	f7ff fddd 	bl	1a003404 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a00384a:	2101      	movs	r1, #1
1a00384c:	2029      	movs	r0, #41	; 0x29
1a00384e:	f7ff fdd9 	bl	1a003404 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a003852:	2101      	movs	r1, #1
1a003854:	202a      	movs	r0, #42	; 0x2a
1a003856:	f7ff fdd5 	bl	1a003404 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a00385a:	2101      	movs	r1, #1
1a00385c:	202b      	movs	r0, #43	; 0x2b
1a00385e:	f7ff fdd1 	bl	1a003404 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a003862:	2101      	movs	r1, #1
1a003864:	202c      	movs	r0, #44	; 0x2c
1a003866:	f7ff fdcd 	bl	1a003404 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a00386a:	2101      	movs	r1, #1
1a00386c:	202d      	movs	r0, #45	; 0x2d
1a00386e:	f7ff fdc9 	bl	1a003404 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a003872:	bd08      	pop	{r3, pc}
1a003874:	1000024c 	.word	0x1000024c

1a003878 <floatToString>:
};

// Ftoa implementation from:
// https://github.com/antongus/stm32tpl/blob/master/ftoa.c
char* floatToString( float value, char* result, int32_t precision )
{
1a003878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00387c:	b083      	sub	sp, #12
1a00387e:	4605      	mov	r5, r0
1a003880:	460e      	mov	r6, r1
   char * p1;
   char c;
   long intPart;

   // check precision bounds
   if (precision > MAX_PRECISION)
1a003882:	290a      	cmp	r1, #10
1a003884:	dd00      	ble.n	1a003888 <floatToString+0x10>
      precision = MAX_PRECISION;
1a003886:	260a      	movs	r6, #10

   // sign stuff
   if (value < 0) {
1a003888:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
1a00388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a003890:	d440      	bmi.n	1a003914 <floatToString+0x9c>
   char * ptr = result;
1a003892:	462c      	mov	r4, r5
      value = -value;
      *ptr++ = '-';
   }

   if (precision < 0) { // negative precision == automatic precision guess
1a003894:	2e00      	cmp	r6, #0
1a003896:	db44      	blt.n	1a003922 <floatToString+0xaa>
      else if (value < 100000.0) precision = 1;
      else precision = 0;
   }

   // round value according the precision
   if (precision)
1a003898:	b186      	cbz	r6, 1a0038bc <floatToString+0x44>
      value += rounders[precision];
1a00389a:	4b4f      	ldr	r3, [pc, #316]	; (1a0039d8 <floatToString+0x160>)
1a00389c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a0038a0:	e9d3 8900 	ldrd	r8, r9, [r3]
1a0038a4:	ee10 0a10 	vmov	r0, s0
1a0038a8:	f000 fc40 	bl	1a00412c <__aeabi_f2d>
1a0038ac:	4642      	mov	r2, r8
1a0038ae:	464b      	mov	r3, r9
1a0038b0:	f000 fade 	bl	1a003e70 <__adddf3>
1a0038b4:	f000 fc92 	bl	1a0041dc <__aeabi_d2f>
1a0038b8:	ee00 0a10 	vmov	s0, r0

   // integer part...
   intPart = value;
1a0038bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
1a0038c0:	ee17 1a90 	vmov	r1, s15
   value -= intPart;
1a0038c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0038c8:	ee70 7a67 	vsub.f32	s15, s0, s15

   if (!intPart)
1a0038cc:	2900      	cmp	r1, #0
1a0038ce:	d160      	bne.n	1a003992 <floatToString+0x11a>
      *ptr++ = '0';
1a0038d0:	4623      	mov	r3, r4
1a0038d2:	2230      	movs	r2, #48	; 0x30
1a0038d4:	f803 2b01 	strb.w	r2, [r3], #1
      // restore end pos
      ptr = p1;
   }

   // decimal part
   if (precision) {
1a0038d8:	2e00      	cmp	r6, #0
1a0038da:	d076      	beq.n	1a0039ca <floatToString+0x152>
      // place decimal point
      *ptr++ = '.';
1a0038dc:	222e      	movs	r2, #46	; 0x2e
1a0038de:	f803 2b01 	strb.w	r2, [r3], #1

      // convert
      while (precision--) {
1a0038e2:	1e71      	subs	r1, r6, #1
1a0038e4:	2e00      	cmp	r6, #0
1a0038e6:	d070      	beq.n	1a0039ca <floatToString+0x152>
         value *= 10.0;
1a0038e8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
1a0038ec:	ee67 7a80 	vmul.f32	s15, s15, s0
         c = value;
1a0038f0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
1a0038f4:	ed8d 7a01 	vstr	s14, [sp, #4]
1a0038f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
         *ptr++ = '0' + c;
1a0038fc:	f102 0030 	add.w	r0, r2, #48	; 0x30
1a003900:	f803 0b01 	strb.w	r0, [r3], #1
         value -= c;
1a003904:	ee07 2a10 	vmov	s14, r2
1a003908:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
1a00390c:	ee77 7ac0 	vsub.f32	s15, s15, s0
      while (precision--) {
1a003910:	460e      	mov	r6, r1
1a003912:	e7e6      	b.n	1a0038e2 <floatToString+0x6a>
      value = -value;
1a003914:	eeb1 0a40 	vneg.f32	s0, s0
      *ptr++ = '-';
1a003918:	462c      	mov	r4, r5
1a00391a:	232d      	movs	r3, #45	; 0x2d
1a00391c:	f804 3b01 	strb.w	r3, [r4], #1
1a003920:	e7b8      	b.n	1a003894 <floatToString+0x1c>
      if (value < 1.0) precision = 6;
1a003922:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a003926:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a00392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00392e:	d424      	bmi.n	1a00397a <floatToString+0x102>
      else if (value < 10.0) precision = 5;
1a003930:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
1a003934:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00393c:	d41f      	bmi.n	1a00397e <floatToString+0x106>
      else if (value < 100.0) precision = 4;
1a00393e:	eddf 7a27 	vldr	s15, [pc, #156]	; 1a0039dc <floatToString+0x164>
1a003942:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00394a:	d41a      	bmi.n	1a003982 <floatToString+0x10a>
      else if (value < 1000.0) precision = 3;
1a00394c:	eddf 7a24 	vldr	s15, [pc, #144]	; 1a0039e0 <floatToString+0x168>
1a003950:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a003958:	d415      	bmi.n	1a003986 <floatToString+0x10e>
      else if (value < 10000.0) precision = 2;
1a00395a:	eddf 7a22 	vldr	s15, [pc, #136]	; 1a0039e4 <floatToString+0x16c>
1a00395e:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a003962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a003966:	d410      	bmi.n	1a00398a <floatToString+0x112>
      else if (value < 100000.0) precision = 1;
1a003968:	eddf 7a1f 	vldr	s15, [pc, #124]	; 1a0039e8 <floatToString+0x170>
1a00396c:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a003974:	d40b      	bmi.n	1a00398e <floatToString+0x116>
      else precision = 0;
1a003976:	2600      	movs	r6, #0
1a003978:	e7a0      	b.n	1a0038bc <floatToString+0x44>
      if (value < 1.0) precision = 6;
1a00397a:	2606      	movs	r6, #6
1a00397c:	e78d      	b.n	1a00389a <floatToString+0x22>
      else if (value < 10.0) precision = 5;
1a00397e:	2605      	movs	r6, #5
1a003980:	e78b      	b.n	1a00389a <floatToString+0x22>
      else if (value < 100.0) precision = 4;
1a003982:	2604      	movs	r6, #4
1a003984:	e789      	b.n	1a00389a <floatToString+0x22>
      else if (value < 1000.0) precision = 3;
1a003986:	2603      	movs	r6, #3
1a003988:	e787      	b.n	1a00389a <floatToString+0x22>
      else if (value < 10000.0) precision = 2;
1a00398a:	2602      	movs	r6, #2
1a00398c:	e785      	b.n	1a00389a <floatToString+0x22>
      else if (value < 100000.0) precision = 1;
1a00398e:	2601      	movs	r6, #1
1a003990:	e783      	b.n	1a00389a <floatToString+0x22>
      p = ptr;
1a003992:	4623      	mov	r3, r4
      while (intPart) {
1a003994:	b179      	cbz	r1, 1a0039b6 <floatToString+0x13e>
         *p++ = '0' + intPart % 10;
1a003996:	4815      	ldr	r0, [pc, #84]	; (1a0039ec <floatToString+0x174>)
1a003998:	fb80 2001 	smull	r2, r0, r0, r1
1a00399c:	17ca      	asrs	r2, r1, #31
1a00399e:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
1a0039a2:	4617      	mov	r7, r2
1a0039a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0039a8:	0050      	lsls	r0, r2, #1
1a0039aa:	1a0a      	subs	r2, r1, r0
1a0039ac:	3230      	adds	r2, #48	; 0x30
1a0039ae:	f803 2b01 	strb.w	r2, [r3], #1
         intPart /= 10;
1a0039b2:	4639      	mov	r1, r7
1a0039b4:	e7ee      	b.n	1a003994 <floatToString+0x11c>
1a0039b6:	461a      	mov	r2, r3
      while (p > ptr) {
1a0039b8:	4294      	cmp	r4, r2
1a0039ba:	d28d      	bcs.n	1a0038d8 <floatToString+0x60>
         c = *--p;
1a0039bc:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
         *p = *ptr;
1a0039c0:	7820      	ldrb	r0, [r4, #0]
1a0039c2:	7010      	strb	r0, [r2, #0]
         *ptr++ = c;
1a0039c4:	f804 1b01 	strb.w	r1, [r4], #1
1a0039c8:	e7f6      	b.n	1a0039b8 <floatToString+0x140>
      }
   }

   // terminating zero
   *ptr = 0;
1a0039ca:	2200      	movs	r2, #0
1a0039cc:	701a      	strb	r2, [r3, #0]

   return result;
}
1a0039ce:	4628      	mov	r0, r5
1a0039d0:	b003      	add	sp, #12
1a0039d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0039d6:	bf00      	nop
1a0039d8:	1a0048c8 	.word	0x1a0048c8
1a0039dc:	42c80000 	.word	0x42c80000
1a0039e0:	447a0000 	.word	0x447a0000
1a0039e4:	461c4000 	.word	0x461c4000
1a0039e8:	47c35000 	.word	0x47c35000
1a0039ec:	66666667 	.word	0x66666667

1a0039f0 <floatToStringGlobal>:
   return globalStrConvertBuff;
}

// Funcion no reentrante. Cuidado con el RTOS!!!
char* floatToStringGlobal( double value, uint32_t decDigits )
{
1a0039f0:	b538      	push	{r3, r4, r5, lr}
1a0039f2:	4605      	mov	r5, r0
   globalStrConvertBuff[0] = 0;
1a0039f4:	4c07      	ldr	r4, [pc, #28]	; (1a003a14 <floatToStringGlobal+0x24>)
1a0039f6:	2300      	movs	r3, #0
1a0039f8:	7023      	strb	r3, [r4, #0]
   floatToString( value, globalStrConvertBuff, decDigits );
1a0039fa:	ec51 0b10 	vmov	r0, r1, d0
1a0039fe:	f000 fbed 	bl	1a0041dc <__aeabi_d2f>
1a003a02:	ee00 0a10 	vmov	s0, r0
1a003a06:	4629      	mov	r1, r5
1a003a08:	4620      	mov	r0, r4
1a003a0a:	f7ff ff35 	bl	1a003878 <floatToString>
   return globalStrConvertBuff;
}
1a003a0e:	4620      	mov	r0, r4
1a003a10:	bd38      	pop	{r3, r4, r5, pc}
1a003a12:	bf00      	nop
1a003a14:	10000254 	.word	0x10000254

1a003a18 <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a003a18:	b4f0      	push	{r4, r5, r6, r7}
1a003a1a:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a003a1c:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a003a20:	0083      	lsls	r3, r0, #2
1a003a22:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a003a26:	181b      	adds	r3, r3, r0
1a003a28:	eb41 0202 	adc.w	r2, r1, r2
1a003a2c:	0211      	lsls	r1, r2, #8
1a003a2e:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a003a32:	0218      	lsls	r0, r3, #8
1a003a34:	1ac6      	subs	r6, r0, r3
1a003a36:	eb61 0702 	sbc.w	r7, r1, r2
1a003a3a:	013b      	lsls	r3, r7, #4
1a003a3c:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a003a40:	0132      	lsls	r2, r6, #4
1a003a42:	4616      	mov	r6, r2
1a003a44:	461f      	mov	r7, r3
1a003a46:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a003a4a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003a4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a003a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003a56:	4313      	orrs	r3, r2
1a003a58:	d008      	beq.n	1a003a6c <delayInaccurateMs+0x54>
1a003a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003a5e:	f112 34ff 	adds.w	r4, r2, #4294967295
1a003a62:	f143 35ff 	adc.w	r5, r3, #4294967295
1a003a66:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a003a6a:	e7f2      	b.n	1a003a52 <delayInaccurateMs+0x3a>
}
1a003a6c:	b004      	add	sp, #16
1a003a6e:	bcf0      	pop	{r4, r5, r6, r7}
1a003a70:	4770      	bx	lr

1a003a72 <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a003a72:	b530      	push	{r4, r5, lr}
1a003a74:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a003a76:	1803      	adds	r3, r0, r0
1a003a78:	eb41 0201 	adc.w	r2, r1, r1
1a003a7c:	1818      	adds	r0, r3, r0
1a003a7e:	eb42 0101 	adc.w	r1, r2, r1
1a003a82:	010b      	lsls	r3, r1, #4
1a003a84:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a003a88:	0102      	lsls	r2, r0, #4
1a003a8a:	1880      	adds	r0, r0, r2
1a003a8c:	eb43 0101 	adc.w	r1, r3, r1
1a003a90:	008b      	lsls	r3, r1, #2
1a003a92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a003a96:	0082      	lsls	r2, r0, #2
1a003a98:	4610      	mov	r0, r2
1a003a9a:	4619      	mov	r1, r3
1a003a9c:	220a      	movs	r2, #10
1a003a9e:	2300      	movs	r3, #0
1a003aa0:	f000 fbec 	bl	1a00427c <__aeabi_uldivmod>
1a003aa4:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a003aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a003ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003ab4:	4313      	orrs	r3, r2
1a003ab6:	d008      	beq.n	1a003aca <delayInaccurateUs+0x58>
1a003ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003abc:	f112 34ff 	adds.w	r4, r2, #4294967295
1a003ac0:	f143 35ff 	adc.w	r5, r3, #4294967295
1a003ac4:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a003ac8:	e7f2      	b.n	1a003ab0 <delayInaccurateUs+0x3e>
}
1a003aca:	b005      	add	sp, #20
1a003acc:	bd30      	pop	{r4, r5, pc}
1a003ace:	Address 0x1a003ace is out of bounds.


1a003ad0 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a003ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003ad4:	4680      	mov	r8, r0
1a003ad6:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a003ad8:	f7ff fe10 	bl	1a0036fc <tickRead>
1a003adc:	4606      	mov	r6, r0
1a003ade:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a003ae0:	f7ff fe0c 	bl	1a0036fc <tickRead>
1a003ae4:	1b84      	subs	r4, r0, r6
1a003ae6:	eb61 0507 	sbc.w	r5, r1, r7
1a003aea:	4b06      	ldr	r3, [pc, #24]	; (1a003b04 <delay+0x34>)
1a003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003af0:	4640      	mov	r0, r8
1a003af2:	4649      	mov	r1, r9
1a003af4:	f000 fbc2 	bl	1a00427c <__aeabi_uldivmod>
1a003af8:	428d      	cmp	r5, r1
1a003afa:	bf08      	it	eq
1a003afc:	4284      	cmpeq	r4, r0
1a003afe:	d3ef      	bcc.n	1a003ae0 <delay+0x10>
}
1a003b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003b04:	10000040 	.word	0x10000040

1a003b08 <pcf8574TGpioPortWrite>:
   pcf8574TGpioPortDirections = directions;
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
}

static void pcf8574TGpioPortWrite( uint8_t portValue )
{
1a003b08:	b500      	push	{lr}
1a003b0a:	b085      	sub	sp, #20
   pcf8574TGpioPortValue = portValue;
1a003b0c:	4b09      	ldr	r3, [pc, #36]	; (1a003b34 <pcf8574TGpioPortWrite+0x2c>)
1a003b0e:	7018      	strb	r0, [r3, #0]
   // Or with pcf8574TGpioPortDirections to keep pins initialized as inputs
   uint8_t transmitDataBuffer = portValue | pcf8574TGpioPortDirections;
1a003b10:	4b09      	ldr	r3, [pc, #36]	; (1a003b38 <pcf8574TGpioPortWrite+0x30>)
1a003b12:	781b      	ldrb	r3, [r3, #0]
1a003b14:	4318      	orrs	r0, r3
1a003b16:	f88d 000f 	strb.w	r0, [sp, #15]
   i2cWrite( I2C0, pcf8574TI2cAddress, &transmitDataBuffer, 1, TRUE );
1a003b1a:	2301      	movs	r3, #1
1a003b1c:	9300      	str	r3, [sp, #0]
1a003b1e:	f10d 020f 	add.w	r2, sp, #15
1a003b22:	4906      	ldr	r1, [pc, #24]	; (1a003b3c <pcf8574TGpioPortWrite+0x34>)
1a003b24:	7809      	ldrb	r1, [r1, #0]
1a003b26:	2000      	movs	r0, #0
1a003b28:	f7ff fdc8 	bl	1a0036bc <i2cWrite>
}
1a003b2c:	b005      	add	sp, #20
1a003b2e:	f85d fb04 	ldr.w	pc, [sp], #4
1a003b32:	bf00      	nop
1a003b34:	1000024b 	.word	0x1000024b
1a003b38:	1000024a 	.word	0x1000024a
1a003b3c:	10000048 	.word	0x10000048

1a003b40 <pcf8574TGpioWrite>:
{
   return pcf8574TGpioPortRead() & (1<<pin);
}

static void pcf8574TGpioWrite( pcf8574T_gpio_t pin, bool_t value )
{
1a003b40:	b508      	push	{r3, lr}
   uint8_t portValue = pcf8574TGpioPortValue;
1a003b42:	4b08      	ldr	r3, [pc, #32]	; (1a003b64 <pcf8574TGpioWrite+0x24>)
1a003b44:	781b      	ldrb	r3, [r3, #0]
   if( value ) {
1a003b46:	b139      	cbz	r1, 1a003b58 <pcf8574TGpioWrite+0x18>
      portValue |= (1<<pin);
1a003b48:	2201      	movs	r2, #1
1a003b4a:	fa02 f000 	lsl.w	r0, r2, r0
1a003b4e:	4303      	orrs	r3, r0
1a003b50:	b2d8      	uxtb	r0, r3
   } else {
      portValue &= ~(1<<pin);
   }
   pcf8574TGpioPortWrite( portValue );
1a003b52:	f7ff ffd9 	bl	1a003b08 <pcf8574TGpioPortWrite>
}
1a003b56:	bd08      	pop	{r3, pc}
      portValue &= ~(1<<pin);
1a003b58:	2101      	movs	r1, #1
1a003b5a:	fa01 f000 	lsl.w	r0, r1, r0
1a003b5e:	ea23 0000 	bic.w	r0, r3, r0
1a003b62:	e7f6      	b.n	1a003b52 <pcf8574TGpioWrite+0x12>
1a003b64:	1000024b 	.word	0x1000024b

1a003b68 <lcdPinSet>:



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a003b68:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
1a003b6a:	f7ff ffe9 	bl	1a003b40 <pcf8574TGpioWrite>
#else
   gpioWrite( pin, status );
#endif
}
1a003b6e:	bd08      	pop	{r3, pc}

1a003b70 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a003b70:	b510      	push	{r4, lr}
1a003b72:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a003b74:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a003b78:	2007      	movs	r0, #7
1a003b7a:	f7ff fff5 	bl	1a003b68 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a003b7e:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a003b82:	2006      	movs	r0, #6
1a003b84:	f7ff fff0 	bl	1a003b68 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a003b88:	f004 0120 	and.w	r1, r4, #32
1a003b8c:	2005      	movs	r0, #5
1a003b8e:	f7ff ffeb 	bl	1a003b68 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a003b92:	f004 0110 	and.w	r1, r4, #16
1a003b96:	2004      	movs	r0, #4
1a003b98:	f7ff ffe6 	bl	1a003b68 <lcdPinSet>
}
1a003b9c:	bd10      	pop	{r4, pc}

1a003b9e <lcdEnablePulse>:
{
1a003b9e:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a003ba0:	2101      	movs	r1, #1
1a003ba2:	2002      	movs	r0, #2
1a003ba4:	f7ff ffe0 	bl	1a003b68 <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a003ba8:	2019      	movs	r0, #25
1a003baa:	2100      	movs	r1, #0
1a003bac:	f7ff ff61 	bl	1a003a72 <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a003bb0:	2100      	movs	r1, #0
1a003bb2:	2002      	movs	r0, #2
1a003bb4:	f7ff ffd8 	bl	1a003b68 <lcdPinSet>
}
1a003bb8:	bd08      	pop	{r3, pc}
1a003bba:	Address 0x1a003bba is out of bounds.


1a003bbc <pcf8574TGpioPortInit>:
{
1a003bbc:	b500      	push	{lr}
1a003bbe:	b085      	sub	sp, #20
1a003bc0:	f88d 000f 	strb.w	r0, [sp, #15]
   pcf8574TGpioPortDirections = directions;
1a003bc4:	4b06      	ldr	r3, [pc, #24]	; (1a003be0 <pcf8574TGpioPortInit+0x24>)
1a003bc6:	7018      	strb	r0, [r3, #0]
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
1a003bc8:	2301      	movs	r3, #1
1a003bca:	9300      	str	r3, [sp, #0]
1a003bcc:	f10d 020f 	add.w	r2, sp, #15
1a003bd0:	4904      	ldr	r1, [pc, #16]	; (1a003be4 <pcf8574TGpioPortInit+0x28>)
1a003bd2:	7809      	ldrb	r1, [r1, #0]
1a003bd4:	2000      	movs	r0, #0
1a003bd6:	f7ff fd71 	bl	1a0036bc <i2cWrite>
}
1a003bda:	b005      	add	sp, #20
1a003bdc:	f85d fb04 	ldr.w	pc, [sp], #4
1a003be0:	1000024a 	.word	0x1000024a
1a003be4:	10000048 	.word	0x10000048

1a003be8 <pcf8574TInit>:
{
1a003be8:	b508      	push	{r3, lr}
   pcf8574TI2cAddress = i2cAddress;
1a003bea:	4b04      	ldr	r3, [pc, #16]	; (1a003bfc <pcf8574TInit+0x14>)
1a003bec:	7019      	strb	r1, [r3, #0]
   pcf8574TGpioPortInit( 0x00 ); // Init all GPIOs as outputs
1a003bee:	2000      	movs	r0, #0
1a003bf0:	f7ff ffe4 	bl	1a003bbc <pcf8574TGpioPortInit>
   pcf8574TGpioPortWrite( 0x00 ); // Init all as zeros
1a003bf4:	2000      	movs	r0, #0
1a003bf6:	f7ff ff87 	bl	1a003b08 <pcf8574TGpioPortWrite>
}
1a003bfa:	bd08      	pop	{r3, pc}
1a003bfc:	10000048 	.word	0x10000048

1a003c00 <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a003c00:	b510      	push	{r4, lr}
1a003c02:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a003c04:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a003c08:	f7ff ffb2 	bl	1a003b70 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a003c0c:	2100      	movs	r1, #0
1a003c0e:	4608      	mov	r0, r1
1a003c10:	f7ff ffaa 	bl	1a003b68 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a003c14:	2100      	movs	r1, #0
1a003c16:	2001      	movs	r0, #1
1a003c18:	f7ff ffa6 	bl	1a003b68 <lcdPinSet>

   lcdEnablePulse();
1a003c1c:	f7ff ffbf 	bl	1a003b9e <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a003c20:	2019      	movs	r0, #25
1a003c22:	2100      	movs	r1, #0
1a003c24:	f7ff ff25 	bl	1a003a72 <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a003c28:	0120      	lsls	r0, r4, #4
1a003c2a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a003c2e:	f7ff ff9f 	bl	1a003b70 <lcdSendNibble>
   lcdEnablePulse();
1a003c32:	f7ff ffb4 	bl	1a003b9e <lcdEnablePulse>
}
1a003c36:	bd10      	pop	{r4, pc}

1a003c38 <lcdData>:

void lcdData( uint8_t data )
{
1a003c38:	b510      	push	{r4, lr}
1a003c3a:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a003c3c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a003c40:	f7ff ff96 	bl	1a003b70 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a003c44:	2101      	movs	r1, #1
1a003c46:	2000      	movs	r0, #0
1a003c48:	f7ff ff8e 	bl	1a003b68 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a003c4c:	2100      	movs	r1, #0
1a003c4e:	2001      	movs	r0, #1
1a003c50:	f7ff ff8a 	bl	1a003b68 <lcdPinSet>

   lcdEnablePulse();
1a003c54:	f7ff ffa3 	bl	1a003b9e <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a003c58:	0120      	lsls	r0, r4, #4
1a003c5a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a003c5e:	f7ff ff87 	bl	1a003b70 <lcdSendNibble>
   lcdEnablePulse();
1a003c62:	f7ff ff9c 	bl	1a003b9e <lcdEnablePulse>
}
1a003c66:	bd10      	pop	{r4, pc}

1a003c68 <lcdInit>:

void lcdInit( uint16_t lineWidth, uint16_t amountOfLines,
              uint16_t charWidth, uint16_t charHeight )
{
1a003c68:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a003c6a:	4d27      	ldr	r5, [pc, #156]	; (1a003d08 <lcdInit+0xa0>)
1a003c6c:	8028      	strh	r0, [r5, #0]
   lcd.amountOfLines = amountOfLines;
1a003c6e:	8069      	strh	r1, [r5, #2]
   lcd.charWidth = charWidth;
1a003c70:	80aa      	strh	r2, [r5, #4]
   lcd.charHeight = charHeight;
1a003c72:	80eb      	strh	r3, [r5, #6]
   lcd.x = 0;
1a003c74:	2400      	movs	r4, #0
1a003c76:	722c      	strb	r4, [r5, #8]
   lcd.y = 0;
1a003c78:	726c      	strb	r4, [r5, #9]

#ifdef LCD_HD44780_I2C_PCF8574T
   // Init I2C
   pcf8574TInit( I2C0, PCF8574T_I2C_ADDRESS );
1a003c7a:	2127      	movs	r1, #39	; 0x27
1a003c7c:	4620      	mov	r0, r4
1a003c7e:	f7ff ffb3 	bl	1a003be8 <pcf8574TInit>
   lcdPinSet( LCD_HD44780_BACKLIGHT, ON);
1a003c82:	2101      	movs	r1, #1
1a003c84:	2003      	movs	r0, #3
1a003c86:	f7ff ff6f 	bl	1a003b68 <lcdPinSet>
   lcdInitPinAsOutput( LCD_HD44780_D6 );
   lcdInitPinAsOutput( LCD_HD44780_D7 );
#endif

   // Configure LCD for 4-bit mode
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a003c8a:	4621      	mov	r1, r4
1a003c8c:	2001      	movs	r0, #1
1a003c8e:	f7ff ff6b 	bl	1a003b68 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a003c92:	4621      	mov	r1, r4
1a003c94:	4620      	mov	r0, r4
1a003c96:	f7ff ff67 	bl	1a003b68 <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a003c9a:	4621      	mov	r1, r4
1a003c9c:	2002      	movs	r0, #2
1a003c9e:	f7ff ff63 	bl	1a003b68 <lcdPinSet>

        //lcdCommand( 0x20 );                   // Command 0x20 for 4-bit mode
        lcdCommand( 0x30 );                   // Command 0x20 for 4-bit mode
1a003ca2:	2030      	movs	r0, #48	; 0x30
1a003ca4:	f7ff ffac 	bl	1a003c00 <lcdCommand>
        lcdCommandDelay();                    // Wait
1a003ca8:	206e      	movs	r0, #110	; 0x6e
1a003caa:	2100      	movs	r1, #0
1a003cac:	f7ff fee1 	bl	1a003a72 <delayInaccurateUs>

        //lcdCommand( 0x20 );                   // Command 0x20 for 4-bit mode
        //lcdCommand( 0x00 );                   // Command 0x20 for 4-bit mode
        //lcdCommandDelay();                    // Wait
        lcdCommand( 0x30 );                   // Command 0x20 for 4-bit mode
1a003cb0:	2030      	movs	r0, #48	; 0x30
1a003cb2:	f7ff ffa5 	bl	1a003c00 <lcdCommand>
        lcdDelay_us(40);
1a003cb6:	2028      	movs	r0, #40	; 0x28
1a003cb8:	2100      	movs	r1, #0
1a003cba:	f7ff feda 	bl	1a003a72 <delayInaccurateUs>
        
        //lcdCommand( 0x00 );                   // Command 0x20 for 4-bit mode
        //lcdCommand( 0xF0 );                   // Command 0x20 for 4-bit mode
        lcdCommand( 0x08 );                   // Command 0x20 for 4-bit mode
1a003cbe:	2008      	movs	r0, #8
1a003cc0:	f7ff ff9e 	bl	1a003c00 <lcdCommand>
        lcdCommandDelay();                    // Wait
1a003cc4:	206e      	movs	r0, #110	; 0x6e
1a003cc6:	2100      	movs	r1, #0
1a003cc8:	f7ff fed3 	bl	1a003a72 <delayInaccurateUs>
 
        //lcdCommand( 0x00 );                   // Command 0x20 for 4-bit mode
        //lcdCommand( 0x10 );                   // Command 0x20 for 4-bit mode
        lcdCommand( 0x01 );                   // Command 0x20 for 4-bit mode
1a003ccc:	2001      	movs	r0, #1
1a003cce:	f7ff ff97 	bl	1a003c00 <lcdCommand>
        lcdDelay_ms(12);
1a003cd2:	200c      	movs	r0, #12
1a003cd4:	2100      	movs	r1, #0
1a003cd6:	f7ff fe9f 	bl	1a003a18 <delayInaccurateMs>
 
        //lcdCommand( 0x00 );                   // Command 0x20 for 4-bit mode
        //lcdCommand( 0x70 );                   // Command 0x20 for 4-bit mode
        //lcdCommandDelay();                    // Wait
        
        lcdCommand( 0x06 );                   // Command 0x20 for 4-bit mode
1a003cda:	2006      	movs	r0, #6
1a003cdc:	f7ff ff90 	bl	1a003c00 <lcdCommand>
        lcdDelay_ms( 1 );                     // Wait
1a003ce0:	2001      	movs	r0, #1
1a003ce2:	2100      	movs	r1, #0
1a003ce4:	f7ff fe98 	bl	1a003a18 <delayInaccurateMs>
        
        lcdCommand( 0x0C );                   // Command 0x20 for 4-bit mode
1a003ce8:	200c      	movs	r0, #12
1a003cea:	f7ff ff89 	bl	1a003c00 <lcdCommand>
        lcdDelay_ms( 3 );                     // Wait
1a003cee:	2003      	movs	r0, #3
1a003cf0:	2100      	movs	r1, #0
1a003cf2:	f7ff fe91 	bl	1a003a18 <delayInaccurateMs>
        
        lcdCommand( 0x02 );                   // Command 0x20 for 4-bit mode
1a003cf6:	2002      	movs	r0, #2
1a003cf8:	f7ff ff82 	bl	1a003c00 <lcdCommand>
        lcdDelay_ms( 3 );                     // Wait
1a003cfc:	2003      	movs	r0, #3
1a003cfe:	2100      	movs	r1, #0
1a003d00:	f7ff fe8a 	bl	1a003a18 <delayInaccurateMs>
   lcdCursorSet( LCD_CURSOR_OFF );
   //lcdGoToXY( 0, 0 );
   lcdClearAndHome();
   
*/
}
1a003d04:	bd38      	pop	{r3, r4, r5, pc}
1a003d06:	bf00      	nop
1a003d08:	10000240 	.word	0x10000240

1a003d0c <lcdGoToXY>:

void lcdGoToXY( uint8_t x, uint8_t y )
{
   if( x >= lcd.lineWidth || y >= lcd.amountOfLines ) {
1a003d0c:	b282      	uxth	r2, r0
1a003d0e:	4b11      	ldr	r3, [pc, #68]	; (1a003d54 <lcdGoToXY+0x48>)
1a003d10:	881b      	ldrh	r3, [r3, #0]
1a003d12:	429a      	cmp	r2, r3
1a003d14:	d204      	bcs.n	1a003d20 <lcdGoToXY+0x14>
1a003d16:	b28b      	uxth	r3, r1
1a003d18:	4a0e      	ldr	r2, [pc, #56]	; (1a003d54 <lcdGoToXY+0x48>)
1a003d1a:	8852      	ldrh	r2, [r2, #2]
1a003d1c:	4293      	cmp	r3, r2
1a003d1e:	d300      	bcc.n	1a003d22 <lcdGoToXY+0x16>
1a003d20:	4770      	bx	lr
{
1a003d22:	b530      	push	{r4, r5, lr}
1a003d24:	b083      	sub	sp, #12
1a003d26:	460d      	mov	r5, r1
1a003d28:	4604      	mov	r4, r0
      return;
   }
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a003d2a:	4b0b      	ldr	r3, [pc, #44]	; (1a003d58 <lcdGoToXY+0x4c>)
1a003d2c:	681b      	ldr	r3, [r3, #0]
1a003d2e:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a003d30:	ab02      	add	r3, sp, #8
1a003d32:	440b      	add	r3, r1
1a003d34:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a003d38:	4420      	add	r0, r4
1a003d3a:	b2c0      	uxtb	r0, r0
1a003d3c:	f7ff ff60 	bl	1a003c00 <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a003d40:	2064      	movs	r0, #100	; 0x64
1a003d42:	2100      	movs	r1, #0
1a003d44:	f7ff fe95 	bl	1a003a72 <delayInaccurateUs>
   lcd.x = x;
1a003d48:	4b02      	ldr	r3, [pc, #8]	; (1a003d54 <lcdGoToXY+0x48>)
1a003d4a:	721c      	strb	r4, [r3, #8]
   lcd.y = y;
1a003d4c:	725d      	strb	r5, [r3, #9]
}
1a003d4e:	b003      	add	sp, #12
1a003d50:	bd30      	pop	{r4, r5, pc}
1a003d52:	bf00      	nop
1a003d54:	10000240 	.word	0x10000240
1a003d58:	1a004920 	.word	0x1a004920

1a003d5c <lcdClear>:

void lcdClear( void )
{
1a003d5c:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a003d5e:	2001      	movs	r0, #1
1a003d60:	f7ff ff4e 	bl	1a003c00 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a003d64:	2003      	movs	r0, #3
1a003d66:	2100      	movs	r1, #0
1a003d68:	f7ff fe56 	bl	1a003a18 <delayInaccurateMs>
}
1a003d6c:	bd08      	pop	{r3, pc}

1a003d6e <lcdCursorSet>:

void lcdCursorSet( lcdCursorModes_t mode )
{
1a003d6e:	b508      	push	{r3, lr}
   lcdCommand( 0b00001100 | mode );
1a003d70:	f040 000c 	orr.w	r0, r0, #12
1a003d74:	f7ff ff44 	bl	1a003c00 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
1a003d78:	2003      	movs	r0, #3
1a003d7a:	2100      	movs	r1, #0
1a003d7c:	f7ff fe4c 	bl	1a003a18 <delayInaccurateMs>
}
1a003d80:	bd08      	pop	{r3, pc}

1a003d82 <lcdSendStringRaw>:

void lcdSendStringRaw( char* str )
{
1a003d82:	b538      	push	{r3, r4, r5, lr}
1a003d84:	4605      	mov	r5, r0
   uint8_t i = 0;
1a003d86:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a003d88:	5d28      	ldrb	r0, [r5, r4]
1a003d8a:	b120      	cbz	r0, 1a003d96 <lcdSendStringRaw+0x14>
      lcdData( str[i] );
1a003d8c:	f7ff ff54 	bl	1a003c38 <lcdData>
      i++;
1a003d90:	3401      	adds	r4, #1
1a003d92:	b2e4      	uxtb	r4, r4
1a003d94:	e7f8      	b.n	1a003d88 <lcdSendStringRaw+0x6>
   }
}
1a003d96:	bd38      	pop	{r3, r4, r5, pc}

1a003d98 <lcdCreateChar>:

void lcdCreateChar( uint8_t charnum, const char* chardata )
{
1a003d98:	b538      	push	{r3, r4, r5, lr}
1a003d9a:	460d      	mov	r5, r1
   uint8_t i;
   charnum &= 0x07;
1a003d9c:	f000 0007 	and.w	r0, r0, #7
   lcdCommand( E_SET_CGRAM_ADDR | (charnum << 3) );
1a003da0:	00c0      	lsls	r0, r0, #3
1a003da2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
1a003da6:	f7ff ff2b 	bl	1a003c00 <lcdCommand>
   for (i = 0; i < 8; i++) {
1a003daa:	2400      	movs	r4, #0
1a003dac:	e004      	b.n	1a003db8 <lcdCreateChar+0x20>
      lcdData( chardata[i] );
1a003dae:	5d28      	ldrb	r0, [r5, r4]
1a003db0:	f7ff ff42 	bl	1a003c38 <lcdData>
   for (i = 0; i < 8; i++) {
1a003db4:	3401      	adds	r4, #1
1a003db6:	b2e4      	uxtb	r4, r4
1a003db8:	2c07      	cmp	r4, #7
1a003dba:	d9f8      	bls.n	1a003dae <lcdCreateChar+0x16>
   }
   delay(1);
1a003dbc:	2001      	movs	r0, #1
1a003dbe:	2100      	movs	r1, #0
1a003dc0:	f7ff fe86 	bl	1a003ad0 <delay>
   lcdGoToXY( lcd.x, lcd.y );
1a003dc4:	4b02      	ldr	r3, [pc, #8]	; (1a003dd0 <lcdCreateChar+0x38>)
1a003dc6:	7a59      	ldrb	r1, [r3, #9]
1a003dc8:	7a18      	ldrb	r0, [r3, #8]
1a003dca:	f7ff ff9f 	bl	1a003d0c <lcdGoToXY>
}
1a003dce:	bd38      	pop	{r3, r4, r5, pc}
1a003dd0:	10000240 	.word	0x10000240

1a003dd4 <lcdSendEnter>:
   lcdData( charIndex );
   lcd.x++;
}

void lcdSendEnter( void )
{
1a003dd4:	b508      	push	{r3, lr}
   // Si llego abajo no hace nada
   if( lcd.y >= lcd.amountOfLines ) {
1a003dd6:	4b08      	ldr	r3, [pc, #32]	; (1a003df8 <lcdSendEnter+0x24>)
1a003dd8:	7a59      	ldrb	r1, [r3, #9]
1a003dda:	b28a      	uxth	r2, r1
1a003ddc:	885b      	ldrh	r3, [r3, #2]
1a003dde:	429a      	cmp	r2, r3
1a003de0:	d300      	bcc.n	1a003de4 <lcdSendEnter+0x10>
   } else {
      lcd.x = 0;
      lcd.y++;
      lcdGoToXY( lcd.x, lcd.y );
   }
}
1a003de2:	bd08      	pop	{r3, pc}
      lcd.x = 0;
1a003de4:	4b04      	ldr	r3, [pc, #16]	; (1a003df8 <lcdSendEnter+0x24>)
1a003de6:	2000      	movs	r0, #0
1a003de8:	7218      	strb	r0, [r3, #8]
      lcd.y++;
1a003dea:	3101      	adds	r1, #1
1a003dec:	b2c9      	uxtb	r1, r1
1a003dee:	7259      	strb	r1, [r3, #9]
      lcdGoToXY( lcd.x, lcd.y );
1a003df0:	f7ff ff8c 	bl	1a003d0c <lcdGoToXY>
1a003df4:	e7f5      	b.n	1a003de2 <lcdSendEnter+0xe>
1a003df6:	bf00      	nop
1a003df8:	10000240 	.word	0x10000240

1a003dfc <lcdSendChar>:
   if( character == '\r' ) {        // Ignore '\r'
1a003dfc:	280d      	cmp	r0, #13
1a003dfe:	d016      	beq.n	1a003e2e <lcdSendChar+0x32>
{
1a003e00:	b510      	push	{r4, lr}
1a003e02:	4604      	mov	r4, r0
   } else if( character == '\n' ) { // Mando enter
1a003e04:	280a      	cmp	r0, #10
1a003e06:	d00c      	beq.n	1a003e22 <lcdSendChar+0x26>
      if( lcd.x >= lcd.lineWidth ) {
1a003e08:	4b09      	ldr	r3, [pc, #36]	; (1a003e30 <lcdSendChar+0x34>)
1a003e0a:	7a1a      	ldrb	r2, [r3, #8]
1a003e0c:	881b      	ldrh	r3, [r3, #0]
1a003e0e:	429a      	cmp	r2, r3
1a003e10:	d20a      	bcs.n	1a003e28 <lcdSendChar+0x2c>
      lcdData( character );
1a003e12:	4620      	mov	r0, r4
1a003e14:	f7ff ff10 	bl	1a003c38 <lcdData>
      lcd.x++;
1a003e18:	4a05      	ldr	r2, [pc, #20]	; (1a003e30 <lcdSendChar+0x34>)
1a003e1a:	7a13      	ldrb	r3, [r2, #8]
1a003e1c:	3301      	adds	r3, #1
1a003e1e:	7213      	strb	r3, [r2, #8]
}
1a003e20:	bd10      	pop	{r4, pc}
      lcdSendEnter();
1a003e22:	f7ff ffd7 	bl	1a003dd4 <lcdSendEnter>
1a003e26:	e7fb      	b.n	1a003e20 <lcdSendChar+0x24>
         lcdSendEnter();
1a003e28:	f7ff ffd4 	bl	1a003dd4 <lcdSendEnter>
1a003e2c:	e7f1      	b.n	1a003e12 <lcdSendChar+0x16>
1a003e2e:	4770      	bx	lr
1a003e30:	10000240 	.word	0x10000240

1a003e34 <lcdSendString>:
   lcdSendString( str );
   lcdClearLineFrom( lcd.y, lcd.x );
}

void lcdSendString( char* str )
{
1a003e34:	b538      	push	{r3, r4, r5, lr}
1a003e36:	4605      	mov	r5, r0
   uint32_t i = 0;
1a003e38:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a003e3a:	5d28      	ldrb	r0, [r5, r4]
1a003e3c:	b118      	cbz	r0, 1a003e46 <lcdSendString+0x12>
      lcdSendChar( str[i] );
1a003e3e:	f7ff ffdd 	bl	1a003dfc <lcdSendChar>
      i++;
1a003e42:	3401      	adds	r4, #1
1a003e44:	e7f9      	b.n	1a003e3a <lcdSendString+0x6>
   }
}
1a003e46:	bd38      	pop	{r3, r4, r5, pc}

1a003e48 <lcdSendFloat>:
   lcdClearLineFrom( lcd.y, lcd.x );
}


void lcdSendFloat( float value, uint32_t decDigits )
{
1a003e48:	b510      	push	{r4, lr}
1a003e4a:	4604      	mov	r4, r0
   lcdSendString( floatToStringGlobal(value, decDigits) );
1a003e4c:	ee10 0a10 	vmov	r0, s0
1a003e50:	f000 f96c 	bl	1a00412c <__aeabi_f2d>
1a003e54:	ec41 0b10 	vmov	d0, r0, r1
1a003e58:	4620      	mov	r0, r4
1a003e5a:	f7ff fdc9 	bl	1a0039f0 <floatToStringGlobal>
1a003e5e:	f7ff ffe9 	bl	1a003e34 <lcdSendString>
}
1a003e62:	bd10      	pop	{r4, pc}

1a003e64 <__aeabi_drsub>:
1a003e64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a003e68:	e002      	b.n	1a003e70 <__adddf3>
1a003e6a:	bf00      	nop

1a003e6c <__aeabi_dsub>:
1a003e6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a003e70 <__adddf3>:
1a003e70:	b530      	push	{r4, r5, lr}
1a003e72:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a003e76:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a003e7a:	ea94 0f05 	teq	r4, r5
1a003e7e:	bf08      	it	eq
1a003e80:	ea90 0f02 	teqeq	r0, r2
1a003e84:	bf1f      	itttt	ne
1a003e86:	ea54 0c00 	orrsne.w	ip, r4, r0
1a003e8a:	ea55 0c02 	orrsne.w	ip, r5, r2
1a003e8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a003e92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003e96:	f000 80e2 	beq.w	1a00405e <__adddf3+0x1ee>
1a003e9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a003e9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a003ea2:	bfb8      	it	lt
1a003ea4:	426d      	neglt	r5, r5
1a003ea6:	dd0c      	ble.n	1a003ec2 <__adddf3+0x52>
1a003ea8:	442c      	add	r4, r5
1a003eaa:	ea80 0202 	eor.w	r2, r0, r2
1a003eae:	ea81 0303 	eor.w	r3, r1, r3
1a003eb2:	ea82 0000 	eor.w	r0, r2, r0
1a003eb6:	ea83 0101 	eor.w	r1, r3, r1
1a003eba:	ea80 0202 	eor.w	r2, r0, r2
1a003ebe:	ea81 0303 	eor.w	r3, r1, r3
1a003ec2:	2d36      	cmp	r5, #54	; 0x36
1a003ec4:	bf88      	it	hi
1a003ec6:	bd30      	pophi	{r4, r5, pc}
1a003ec8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a003ecc:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003ed0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a003ed4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a003ed8:	d002      	beq.n	1a003ee0 <__adddf3+0x70>
1a003eda:	4240      	negs	r0, r0
1a003edc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003ee0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a003ee4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003ee8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a003eec:	d002      	beq.n	1a003ef4 <__adddf3+0x84>
1a003eee:	4252      	negs	r2, r2
1a003ef0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003ef4:	ea94 0f05 	teq	r4, r5
1a003ef8:	f000 80a7 	beq.w	1a00404a <__adddf3+0x1da>
1a003efc:	f1a4 0401 	sub.w	r4, r4, #1
1a003f00:	f1d5 0e20 	rsbs	lr, r5, #32
1a003f04:	db0d      	blt.n	1a003f22 <__adddf3+0xb2>
1a003f06:	fa02 fc0e 	lsl.w	ip, r2, lr
1a003f0a:	fa22 f205 	lsr.w	r2, r2, r5
1a003f0e:	1880      	adds	r0, r0, r2
1a003f10:	f141 0100 	adc.w	r1, r1, #0
1a003f14:	fa03 f20e 	lsl.w	r2, r3, lr
1a003f18:	1880      	adds	r0, r0, r2
1a003f1a:	fa43 f305 	asr.w	r3, r3, r5
1a003f1e:	4159      	adcs	r1, r3
1a003f20:	e00e      	b.n	1a003f40 <__adddf3+0xd0>
1a003f22:	f1a5 0520 	sub.w	r5, r5, #32
1a003f26:	f10e 0e20 	add.w	lr, lr, #32
1a003f2a:	2a01      	cmp	r2, #1
1a003f2c:	fa03 fc0e 	lsl.w	ip, r3, lr
1a003f30:	bf28      	it	cs
1a003f32:	f04c 0c02 	orrcs.w	ip, ip, #2
1a003f36:	fa43 f305 	asr.w	r3, r3, r5
1a003f3a:	18c0      	adds	r0, r0, r3
1a003f3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a003f40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003f44:	d507      	bpl.n	1a003f56 <__adddf3+0xe6>
1a003f46:	f04f 0e00 	mov.w	lr, #0
1a003f4a:	f1dc 0c00 	rsbs	ip, ip, #0
1a003f4e:	eb7e 0000 	sbcs.w	r0, lr, r0
1a003f52:	eb6e 0101 	sbc.w	r1, lr, r1
1a003f56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a003f5a:	d31b      	bcc.n	1a003f94 <__adddf3+0x124>
1a003f5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a003f60:	d30c      	bcc.n	1a003f7c <__adddf3+0x10c>
1a003f62:	0849      	lsrs	r1, r1, #1
1a003f64:	ea5f 0030 	movs.w	r0, r0, rrx
1a003f68:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a003f6c:	f104 0401 	add.w	r4, r4, #1
1a003f70:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a003f74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a003f78:	f080 809a 	bcs.w	1a0040b0 <__adddf3+0x240>
1a003f7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a003f80:	bf08      	it	eq
1a003f82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003f86:	f150 0000 	adcs.w	r0, r0, #0
1a003f8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003f8e:	ea41 0105 	orr.w	r1, r1, r5
1a003f92:	bd30      	pop	{r4, r5, pc}
1a003f94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a003f98:	4140      	adcs	r0, r0
1a003f9a:	eb41 0101 	adc.w	r1, r1, r1
1a003f9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003fa2:	f1a4 0401 	sub.w	r4, r4, #1
1a003fa6:	d1e9      	bne.n	1a003f7c <__adddf3+0x10c>
1a003fa8:	f091 0f00 	teq	r1, #0
1a003fac:	bf04      	itt	eq
1a003fae:	4601      	moveq	r1, r0
1a003fb0:	2000      	moveq	r0, #0
1a003fb2:	fab1 f381 	clz	r3, r1
1a003fb6:	bf08      	it	eq
1a003fb8:	3320      	addeq	r3, #32
1a003fba:	f1a3 030b 	sub.w	r3, r3, #11
1a003fbe:	f1b3 0220 	subs.w	r2, r3, #32
1a003fc2:	da0c      	bge.n	1a003fde <__adddf3+0x16e>
1a003fc4:	320c      	adds	r2, #12
1a003fc6:	dd08      	ble.n	1a003fda <__adddf3+0x16a>
1a003fc8:	f102 0c14 	add.w	ip, r2, #20
1a003fcc:	f1c2 020c 	rsb	r2, r2, #12
1a003fd0:	fa01 f00c 	lsl.w	r0, r1, ip
1a003fd4:	fa21 f102 	lsr.w	r1, r1, r2
1a003fd8:	e00c      	b.n	1a003ff4 <__adddf3+0x184>
1a003fda:	f102 0214 	add.w	r2, r2, #20
1a003fde:	bfd8      	it	le
1a003fe0:	f1c2 0c20 	rsble	ip, r2, #32
1a003fe4:	fa01 f102 	lsl.w	r1, r1, r2
1a003fe8:	fa20 fc0c 	lsr.w	ip, r0, ip
1a003fec:	bfdc      	itt	le
1a003fee:	ea41 010c 	orrle.w	r1, r1, ip
1a003ff2:	4090      	lslle	r0, r2
1a003ff4:	1ae4      	subs	r4, r4, r3
1a003ff6:	bfa2      	ittt	ge
1a003ff8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a003ffc:	4329      	orrge	r1, r5
1a003ffe:	bd30      	popge	{r4, r5, pc}
1a004000:	ea6f 0404 	mvn.w	r4, r4
1a004004:	3c1f      	subs	r4, #31
1a004006:	da1c      	bge.n	1a004042 <__adddf3+0x1d2>
1a004008:	340c      	adds	r4, #12
1a00400a:	dc0e      	bgt.n	1a00402a <__adddf3+0x1ba>
1a00400c:	f104 0414 	add.w	r4, r4, #20
1a004010:	f1c4 0220 	rsb	r2, r4, #32
1a004014:	fa20 f004 	lsr.w	r0, r0, r4
1a004018:	fa01 f302 	lsl.w	r3, r1, r2
1a00401c:	ea40 0003 	orr.w	r0, r0, r3
1a004020:	fa21 f304 	lsr.w	r3, r1, r4
1a004024:	ea45 0103 	orr.w	r1, r5, r3
1a004028:	bd30      	pop	{r4, r5, pc}
1a00402a:	f1c4 040c 	rsb	r4, r4, #12
1a00402e:	f1c4 0220 	rsb	r2, r4, #32
1a004032:	fa20 f002 	lsr.w	r0, r0, r2
1a004036:	fa01 f304 	lsl.w	r3, r1, r4
1a00403a:	ea40 0003 	orr.w	r0, r0, r3
1a00403e:	4629      	mov	r1, r5
1a004040:	bd30      	pop	{r4, r5, pc}
1a004042:	fa21 f004 	lsr.w	r0, r1, r4
1a004046:	4629      	mov	r1, r5
1a004048:	bd30      	pop	{r4, r5, pc}
1a00404a:	f094 0f00 	teq	r4, #0
1a00404e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a004052:	bf06      	itte	eq
1a004054:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a004058:	3401      	addeq	r4, #1
1a00405a:	3d01      	subne	r5, #1
1a00405c:	e74e      	b.n	1a003efc <__adddf3+0x8c>
1a00405e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a004062:	bf18      	it	ne
1a004064:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004068:	d029      	beq.n	1a0040be <__adddf3+0x24e>
1a00406a:	ea94 0f05 	teq	r4, r5
1a00406e:	bf08      	it	eq
1a004070:	ea90 0f02 	teqeq	r0, r2
1a004074:	d005      	beq.n	1a004082 <__adddf3+0x212>
1a004076:	ea54 0c00 	orrs.w	ip, r4, r0
1a00407a:	bf04      	itt	eq
1a00407c:	4619      	moveq	r1, r3
1a00407e:	4610      	moveq	r0, r2
1a004080:	bd30      	pop	{r4, r5, pc}
1a004082:	ea91 0f03 	teq	r1, r3
1a004086:	bf1e      	ittt	ne
1a004088:	2100      	movne	r1, #0
1a00408a:	2000      	movne	r0, #0
1a00408c:	bd30      	popne	{r4, r5, pc}
1a00408e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a004092:	d105      	bne.n	1a0040a0 <__adddf3+0x230>
1a004094:	0040      	lsls	r0, r0, #1
1a004096:	4149      	adcs	r1, r1
1a004098:	bf28      	it	cs
1a00409a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00409e:	bd30      	pop	{r4, r5, pc}
1a0040a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0040a4:	bf3c      	itt	cc
1a0040a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0040aa:	bd30      	popcc	{r4, r5, pc}
1a0040ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0040b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0040b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0040b8:	f04f 0000 	mov.w	r0, #0
1a0040bc:	bd30      	pop	{r4, r5, pc}
1a0040be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0040c2:	bf1a      	itte	ne
1a0040c4:	4619      	movne	r1, r3
1a0040c6:	4610      	movne	r0, r2
1a0040c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0040cc:	bf1c      	itt	ne
1a0040ce:	460b      	movne	r3, r1
1a0040d0:	4602      	movne	r2, r0
1a0040d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0040d6:	bf06      	itte	eq
1a0040d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0040dc:	ea91 0f03 	teqeq	r1, r3
1a0040e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0040e4:	bd30      	pop	{r4, r5, pc}
1a0040e6:	bf00      	nop

1a0040e8 <__aeabi_ui2d>:
1a0040e8:	f090 0f00 	teq	r0, #0
1a0040ec:	bf04      	itt	eq
1a0040ee:	2100      	moveq	r1, #0
1a0040f0:	4770      	bxeq	lr
1a0040f2:	b530      	push	{r4, r5, lr}
1a0040f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0040f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0040fc:	f04f 0500 	mov.w	r5, #0
1a004100:	f04f 0100 	mov.w	r1, #0
1a004104:	e750      	b.n	1a003fa8 <__adddf3+0x138>
1a004106:	bf00      	nop

1a004108 <__aeabi_i2d>:
1a004108:	f090 0f00 	teq	r0, #0
1a00410c:	bf04      	itt	eq
1a00410e:	2100      	moveq	r1, #0
1a004110:	4770      	bxeq	lr
1a004112:	b530      	push	{r4, r5, lr}
1a004114:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004118:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00411c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a004120:	bf48      	it	mi
1a004122:	4240      	negmi	r0, r0
1a004124:	f04f 0100 	mov.w	r1, #0
1a004128:	e73e      	b.n	1a003fa8 <__adddf3+0x138>
1a00412a:	bf00      	nop

1a00412c <__aeabi_f2d>:
1a00412c:	0042      	lsls	r2, r0, #1
1a00412e:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a004132:	ea4f 0131 	mov.w	r1, r1, rrx
1a004136:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00413a:	bf1f      	itttt	ne
1a00413c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a004140:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a004144:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a004148:	4770      	bxne	lr
1a00414a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a00414e:	bf08      	it	eq
1a004150:	4770      	bxeq	lr
1a004152:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a004156:	bf04      	itt	eq
1a004158:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a00415c:	4770      	bxeq	lr
1a00415e:	b530      	push	{r4, r5, lr}
1a004160:	f44f 7460 	mov.w	r4, #896	; 0x380
1a004164:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004168:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00416c:	e71c      	b.n	1a003fa8 <__adddf3+0x138>
1a00416e:	bf00      	nop

1a004170 <__aeabi_ul2d>:
1a004170:	ea50 0201 	orrs.w	r2, r0, r1
1a004174:	bf08      	it	eq
1a004176:	4770      	bxeq	lr
1a004178:	b530      	push	{r4, r5, lr}
1a00417a:	f04f 0500 	mov.w	r5, #0
1a00417e:	e00a      	b.n	1a004196 <__aeabi_l2d+0x16>

1a004180 <__aeabi_l2d>:
1a004180:	ea50 0201 	orrs.w	r2, r0, r1
1a004184:	bf08      	it	eq
1a004186:	4770      	bxeq	lr
1a004188:	b530      	push	{r4, r5, lr}
1a00418a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a00418e:	d502      	bpl.n	1a004196 <__aeabi_l2d+0x16>
1a004190:	4240      	negs	r0, r0
1a004192:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004196:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00419a:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00419e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0041a2:	f43f aed8 	beq.w	1a003f56 <__adddf3+0xe6>
1a0041a6:	f04f 0203 	mov.w	r2, #3
1a0041aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0041ae:	bf18      	it	ne
1a0041b0:	3203      	addne	r2, #3
1a0041b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0041b6:	bf18      	it	ne
1a0041b8:	3203      	addne	r2, #3
1a0041ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0041be:	f1c2 0320 	rsb	r3, r2, #32
1a0041c2:	fa00 fc03 	lsl.w	ip, r0, r3
1a0041c6:	fa20 f002 	lsr.w	r0, r0, r2
1a0041ca:	fa01 fe03 	lsl.w	lr, r1, r3
1a0041ce:	ea40 000e 	orr.w	r0, r0, lr
1a0041d2:	fa21 f102 	lsr.w	r1, r1, r2
1a0041d6:	4414      	add	r4, r2
1a0041d8:	e6bd      	b.n	1a003f56 <__adddf3+0xe6>
1a0041da:	bf00      	nop

1a0041dc <__aeabi_d2f>:
1a0041dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0041e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a0041e4:	bf24      	itt	cs
1a0041e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a0041ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0041ee:	d90d      	bls.n	1a00420c <__aeabi_d2f+0x30>
1a0041f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0041f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0041f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0041fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a004200:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a004204:	bf08      	it	eq
1a004206:	f020 0001 	biceq.w	r0, r0, #1
1a00420a:	4770      	bx	lr
1a00420c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a004210:	d121      	bne.n	1a004256 <__aeabi_d2f+0x7a>
1a004212:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a004216:	bfbc      	itt	lt
1a004218:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a00421c:	4770      	bxlt	lr
1a00421e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004222:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a004226:	f1c2 0218 	rsb	r2, r2, #24
1a00422a:	f1c2 0c20 	rsb	ip, r2, #32
1a00422e:	fa10 f30c 	lsls.w	r3, r0, ip
1a004232:	fa20 f002 	lsr.w	r0, r0, r2
1a004236:	bf18      	it	ne
1a004238:	f040 0001 	orrne.w	r0, r0, #1
1a00423c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a004240:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a004244:	fa03 fc0c 	lsl.w	ip, r3, ip
1a004248:	ea40 000c 	orr.w	r0, r0, ip
1a00424c:	fa23 f302 	lsr.w	r3, r3, r2
1a004250:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a004254:	e7cc      	b.n	1a0041f0 <__aeabi_d2f+0x14>
1a004256:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a00425a:	d107      	bne.n	1a00426c <__aeabi_d2f+0x90>
1a00425c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a004260:	bf1e      	ittt	ne
1a004262:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a004266:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a00426a:	4770      	bxne	lr
1a00426c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a004270:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a004274:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a004278:	4770      	bx	lr
1a00427a:	bf00      	nop

1a00427c <__aeabi_uldivmod>:
1a00427c:	b953      	cbnz	r3, 1a004294 <__aeabi_uldivmod+0x18>
1a00427e:	b94a      	cbnz	r2, 1a004294 <__aeabi_uldivmod+0x18>
1a004280:	2900      	cmp	r1, #0
1a004282:	bf08      	it	eq
1a004284:	2800      	cmpeq	r0, #0
1a004286:	bf1c      	itt	ne
1a004288:	f04f 31ff 	movne.w	r1, #4294967295
1a00428c:	f04f 30ff 	movne.w	r0, #4294967295
1a004290:	f000 b974 	b.w	1a00457c <__aeabi_idiv0>
1a004294:	f1ad 0c08 	sub.w	ip, sp, #8
1a004298:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00429c:	f000 f806 	bl	1a0042ac <__udivmoddi4>
1a0042a0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0042a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0042a8:	b004      	add	sp, #16
1a0042aa:	4770      	bx	lr

1a0042ac <__udivmoddi4>:
1a0042ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0042b0:	9e08      	ldr	r6, [sp, #32]
1a0042b2:	4604      	mov	r4, r0
1a0042b4:	4688      	mov	r8, r1
1a0042b6:	2b00      	cmp	r3, #0
1a0042b8:	f040 8085 	bne.w	1a0043c6 <__udivmoddi4+0x11a>
1a0042bc:	428a      	cmp	r2, r1
1a0042be:	4615      	mov	r5, r2
1a0042c0:	d948      	bls.n	1a004354 <__udivmoddi4+0xa8>
1a0042c2:	fab2 f282 	clz	r2, r2
1a0042c6:	b14a      	cbz	r2, 1a0042dc <__udivmoddi4+0x30>
1a0042c8:	f1c2 0720 	rsb	r7, r2, #32
1a0042cc:	fa01 f302 	lsl.w	r3, r1, r2
1a0042d0:	fa20 f707 	lsr.w	r7, r0, r7
1a0042d4:	4095      	lsls	r5, r2
1a0042d6:	ea47 0803 	orr.w	r8, r7, r3
1a0042da:	4094      	lsls	r4, r2
1a0042dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0042e0:	0c23      	lsrs	r3, r4, #16
1a0042e2:	fbb8 f7fe 	udiv	r7, r8, lr
1a0042e6:	fa1f fc85 	uxth.w	ip, r5
1a0042ea:	fb0e 8817 	mls	r8, lr, r7, r8
1a0042ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0042f2:	fb07 f10c 	mul.w	r1, r7, ip
1a0042f6:	4299      	cmp	r1, r3
1a0042f8:	d909      	bls.n	1a00430e <__udivmoddi4+0x62>
1a0042fa:	18eb      	adds	r3, r5, r3
1a0042fc:	f107 30ff 	add.w	r0, r7, #4294967295
1a004300:	f080 80e3 	bcs.w	1a0044ca <__udivmoddi4+0x21e>
1a004304:	4299      	cmp	r1, r3
1a004306:	f240 80e0 	bls.w	1a0044ca <__udivmoddi4+0x21e>
1a00430a:	3f02      	subs	r7, #2
1a00430c:	442b      	add	r3, r5
1a00430e:	1a5b      	subs	r3, r3, r1
1a004310:	b2a4      	uxth	r4, r4
1a004312:	fbb3 f0fe 	udiv	r0, r3, lr
1a004316:	fb0e 3310 	mls	r3, lr, r0, r3
1a00431a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00431e:	fb00 fc0c 	mul.w	ip, r0, ip
1a004322:	45a4      	cmp	ip, r4
1a004324:	d909      	bls.n	1a00433a <__udivmoddi4+0x8e>
1a004326:	192c      	adds	r4, r5, r4
1a004328:	f100 33ff 	add.w	r3, r0, #4294967295
1a00432c:	f080 80cb 	bcs.w	1a0044c6 <__udivmoddi4+0x21a>
1a004330:	45a4      	cmp	ip, r4
1a004332:	f240 80c8 	bls.w	1a0044c6 <__udivmoddi4+0x21a>
1a004336:	3802      	subs	r0, #2
1a004338:	442c      	add	r4, r5
1a00433a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00433e:	eba4 040c 	sub.w	r4, r4, ip
1a004342:	2700      	movs	r7, #0
1a004344:	b11e      	cbz	r6, 1a00434e <__udivmoddi4+0xa2>
1a004346:	40d4      	lsrs	r4, r2
1a004348:	2300      	movs	r3, #0
1a00434a:	e9c6 4300 	strd	r4, r3, [r6]
1a00434e:	4639      	mov	r1, r7
1a004350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004354:	2a00      	cmp	r2, #0
1a004356:	d053      	beq.n	1a004400 <__udivmoddi4+0x154>
1a004358:	fab2 f282 	clz	r2, r2
1a00435c:	2a00      	cmp	r2, #0
1a00435e:	f040 80b6 	bne.w	1a0044ce <__udivmoddi4+0x222>
1a004362:	1b49      	subs	r1, r1, r5
1a004364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004368:	fa1f f885 	uxth.w	r8, r5
1a00436c:	2701      	movs	r7, #1
1a00436e:	fbb1 fcfe 	udiv	ip, r1, lr
1a004372:	0c23      	lsrs	r3, r4, #16
1a004374:	fb0e 111c 	mls	r1, lr, ip, r1
1a004378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00437c:	fb08 f10c 	mul.w	r1, r8, ip
1a004380:	4299      	cmp	r1, r3
1a004382:	d907      	bls.n	1a004394 <__udivmoddi4+0xe8>
1a004384:	18eb      	adds	r3, r5, r3
1a004386:	f10c 30ff 	add.w	r0, ip, #4294967295
1a00438a:	d202      	bcs.n	1a004392 <__udivmoddi4+0xe6>
1a00438c:	4299      	cmp	r1, r3
1a00438e:	f200 80ec 	bhi.w	1a00456a <__udivmoddi4+0x2be>
1a004392:	4684      	mov	ip, r0
1a004394:	1a59      	subs	r1, r3, r1
1a004396:	b2a3      	uxth	r3, r4
1a004398:	fbb1 f0fe 	udiv	r0, r1, lr
1a00439c:	fb0e 1410 	mls	r4, lr, r0, r1
1a0043a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0043a4:	fb08 f800 	mul.w	r8, r8, r0
1a0043a8:	45a0      	cmp	r8, r4
1a0043aa:	d907      	bls.n	1a0043bc <__udivmoddi4+0x110>
1a0043ac:	192c      	adds	r4, r5, r4
1a0043ae:	f100 33ff 	add.w	r3, r0, #4294967295
1a0043b2:	d202      	bcs.n	1a0043ba <__udivmoddi4+0x10e>
1a0043b4:	45a0      	cmp	r8, r4
1a0043b6:	f200 80dc 	bhi.w	1a004572 <__udivmoddi4+0x2c6>
1a0043ba:	4618      	mov	r0, r3
1a0043bc:	eba4 0408 	sub.w	r4, r4, r8
1a0043c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0043c4:	e7be      	b.n	1a004344 <__udivmoddi4+0x98>
1a0043c6:	428b      	cmp	r3, r1
1a0043c8:	d908      	bls.n	1a0043dc <__udivmoddi4+0x130>
1a0043ca:	2e00      	cmp	r6, #0
1a0043cc:	d078      	beq.n	1a0044c0 <__udivmoddi4+0x214>
1a0043ce:	2700      	movs	r7, #0
1a0043d0:	e9c6 0100 	strd	r0, r1, [r6]
1a0043d4:	4638      	mov	r0, r7
1a0043d6:	4639      	mov	r1, r7
1a0043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0043dc:	fab3 f783 	clz	r7, r3
1a0043e0:	b97f      	cbnz	r7, 1a004402 <__udivmoddi4+0x156>
1a0043e2:	428b      	cmp	r3, r1
1a0043e4:	d302      	bcc.n	1a0043ec <__udivmoddi4+0x140>
1a0043e6:	4282      	cmp	r2, r0
1a0043e8:	f200 80bd 	bhi.w	1a004566 <__udivmoddi4+0x2ba>
1a0043ec:	1a84      	subs	r4, r0, r2
1a0043ee:	eb61 0303 	sbc.w	r3, r1, r3
1a0043f2:	2001      	movs	r0, #1
1a0043f4:	4698      	mov	r8, r3
1a0043f6:	2e00      	cmp	r6, #0
1a0043f8:	d0a9      	beq.n	1a00434e <__udivmoddi4+0xa2>
1a0043fa:	e9c6 4800 	strd	r4, r8, [r6]
1a0043fe:	e7a6      	b.n	1a00434e <__udivmoddi4+0xa2>
1a004400:	deff      	udf	#255	; 0xff
1a004402:	f1c7 0520 	rsb	r5, r7, #32
1a004406:	40bb      	lsls	r3, r7
1a004408:	fa22 fc05 	lsr.w	ip, r2, r5
1a00440c:	ea4c 0c03 	orr.w	ip, ip, r3
1a004410:	fa01 f407 	lsl.w	r4, r1, r7
1a004414:	fa20 f805 	lsr.w	r8, r0, r5
1a004418:	fa21 f305 	lsr.w	r3, r1, r5
1a00441c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a004420:	ea48 0404 	orr.w	r4, r8, r4
1a004424:	fbb3 f9fe 	udiv	r9, r3, lr
1a004428:	0c21      	lsrs	r1, r4, #16
1a00442a:	fb0e 3319 	mls	r3, lr, r9, r3
1a00442e:	fa1f f88c 	uxth.w	r8, ip
1a004432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a004436:	fb09 fa08 	mul.w	sl, r9, r8
1a00443a:	459a      	cmp	sl, r3
1a00443c:	fa02 f207 	lsl.w	r2, r2, r7
1a004440:	fa00 f107 	lsl.w	r1, r0, r7
1a004444:	d90b      	bls.n	1a00445e <__udivmoddi4+0x1b2>
1a004446:	eb1c 0303 	adds.w	r3, ip, r3
1a00444a:	f109 30ff 	add.w	r0, r9, #4294967295
1a00444e:	f080 8088 	bcs.w	1a004562 <__udivmoddi4+0x2b6>
1a004452:	459a      	cmp	sl, r3
1a004454:	f240 8085 	bls.w	1a004562 <__udivmoddi4+0x2b6>
1a004458:	f1a9 0902 	sub.w	r9, r9, #2
1a00445c:	4463      	add	r3, ip
1a00445e:	eba3 030a 	sub.w	r3, r3, sl
1a004462:	b2a4      	uxth	r4, r4
1a004464:	fbb3 f0fe 	udiv	r0, r3, lr
1a004468:	fb0e 3310 	mls	r3, lr, r0, r3
1a00446c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004470:	fb00 f808 	mul.w	r8, r0, r8
1a004474:	45a0      	cmp	r8, r4
1a004476:	d908      	bls.n	1a00448a <__udivmoddi4+0x1de>
1a004478:	eb1c 0404 	adds.w	r4, ip, r4
1a00447c:	f100 33ff 	add.w	r3, r0, #4294967295
1a004480:	d26b      	bcs.n	1a00455a <__udivmoddi4+0x2ae>
1a004482:	45a0      	cmp	r8, r4
1a004484:	d969      	bls.n	1a00455a <__udivmoddi4+0x2ae>
1a004486:	3802      	subs	r0, #2
1a004488:	4464      	add	r4, ip
1a00448a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00448e:	eba4 0408 	sub.w	r4, r4, r8
1a004492:	fba0 8902 	umull	r8, r9, r0, r2
1a004496:	454c      	cmp	r4, r9
1a004498:	46c6      	mov	lr, r8
1a00449a:	464b      	mov	r3, r9
1a00449c:	d354      	bcc.n	1a004548 <__udivmoddi4+0x29c>
1a00449e:	d051      	beq.n	1a004544 <__udivmoddi4+0x298>
1a0044a0:	2e00      	cmp	r6, #0
1a0044a2:	d069      	beq.n	1a004578 <__udivmoddi4+0x2cc>
1a0044a4:	ebb1 020e 	subs.w	r2, r1, lr
1a0044a8:	eb64 0403 	sbc.w	r4, r4, r3
1a0044ac:	fa04 f505 	lsl.w	r5, r4, r5
1a0044b0:	fa22 f307 	lsr.w	r3, r2, r7
1a0044b4:	40fc      	lsrs	r4, r7
1a0044b6:	431d      	orrs	r5, r3
1a0044b8:	e9c6 5400 	strd	r5, r4, [r6]
1a0044bc:	2700      	movs	r7, #0
1a0044be:	e746      	b.n	1a00434e <__udivmoddi4+0xa2>
1a0044c0:	4637      	mov	r7, r6
1a0044c2:	4630      	mov	r0, r6
1a0044c4:	e743      	b.n	1a00434e <__udivmoddi4+0xa2>
1a0044c6:	4618      	mov	r0, r3
1a0044c8:	e737      	b.n	1a00433a <__udivmoddi4+0x8e>
1a0044ca:	4607      	mov	r7, r0
1a0044cc:	e71f      	b.n	1a00430e <__udivmoddi4+0x62>
1a0044ce:	f1c2 0320 	rsb	r3, r2, #32
1a0044d2:	fa20 f703 	lsr.w	r7, r0, r3
1a0044d6:	4095      	lsls	r5, r2
1a0044d8:	fa01 f002 	lsl.w	r0, r1, r2
1a0044dc:	fa21 f303 	lsr.w	r3, r1, r3
1a0044e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0044e4:	4338      	orrs	r0, r7
1a0044e6:	0c01      	lsrs	r1, r0, #16
1a0044e8:	fbb3 f7fe 	udiv	r7, r3, lr
1a0044ec:	fa1f f885 	uxth.w	r8, r5
1a0044f0:	fb0e 3317 	mls	r3, lr, r7, r3
1a0044f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0044f8:	fb07 f308 	mul.w	r3, r7, r8
1a0044fc:	428b      	cmp	r3, r1
1a0044fe:	fa04 f402 	lsl.w	r4, r4, r2
1a004502:	d907      	bls.n	1a004514 <__udivmoddi4+0x268>
1a004504:	1869      	adds	r1, r5, r1
1a004506:	f107 3cff 	add.w	ip, r7, #4294967295
1a00450a:	d228      	bcs.n	1a00455e <__udivmoddi4+0x2b2>
1a00450c:	428b      	cmp	r3, r1
1a00450e:	d926      	bls.n	1a00455e <__udivmoddi4+0x2b2>
1a004510:	3f02      	subs	r7, #2
1a004512:	4429      	add	r1, r5
1a004514:	1acb      	subs	r3, r1, r3
1a004516:	b281      	uxth	r1, r0
1a004518:	fbb3 f0fe 	udiv	r0, r3, lr
1a00451c:	fb0e 3310 	mls	r3, lr, r0, r3
1a004520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004524:	fb00 f308 	mul.w	r3, r0, r8
1a004528:	428b      	cmp	r3, r1
1a00452a:	d907      	bls.n	1a00453c <__udivmoddi4+0x290>
1a00452c:	1869      	adds	r1, r5, r1
1a00452e:	f100 3cff 	add.w	ip, r0, #4294967295
1a004532:	d210      	bcs.n	1a004556 <__udivmoddi4+0x2aa>
1a004534:	428b      	cmp	r3, r1
1a004536:	d90e      	bls.n	1a004556 <__udivmoddi4+0x2aa>
1a004538:	3802      	subs	r0, #2
1a00453a:	4429      	add	r1, r5
1a00453c:	1ac9      	subs	r1, r1, r3
1a00453e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004542:	e714      	b.n	1a00436e <__udivmoddi4+0xc2>
1a004544:	4541      	cmp	r1, r8
1a004546:	d2ab      	bcs.n	1a0044a0 <__udivmoddi4+0x1f4>
1a004548:	ebb8 0e02 	subs.w	lr, r8, r2
1a00454c:	eb69 020c 	sbc.w	r2, r9, ip
1a004550:	3801      	subs	r0, #1
1a004552:	4613      	mov	r3, r2
1a004554:	e7a4      	b.n	1a0044a0 <__udivmoddi4+0x1f4>
1a004556:	4660      	mov	r0, ip
1a004558:	e7f0      	b.n	1a00453c <__udivmoddi4+0x290>
1a00455a:	4618      	mov	r0, r3
1a00455c:	e795      	b.n	1a00448a <__udivmoddi4+0x1de>
1a00455e:	4667      	mov	r7, ip
1a004560:	e7d8      	b.n	1a004514 <__udivmoddi4+0x268>
1a004562:	4681      	mov	r9, r0
1a004564:	e77b      	b.n	1a00445e <__udivmoddi4+0x1b2>
1a004566:	4638      	mov	r0, r7
1a004568:	e745      	b.n	1a0043f6 <__udivmoddi4+0x14a>
1a00456a:	f1ac 0c02 	sub.w	ip, ip, #2
1a00456e:	442b      	add	r3, r5
1a004570:	e710      	b.n	1a004394 <__udivmoddi4+0xe8>
1a004572:	3802      	subs	r0, #2
1a004574:	442c      	add	r4, r5
1a004576:	e721      	b.n	1a0043bc <__udivmoddi4+0x110>
1a004578:	4637      	mov	r7, r6
1a00457a:	e6e8      	b.n	1a00434e <__udivmoddi4+0xa2>

1a00457c <__aeabi_idiv0>:
1a00457c:	4770      	bx	lr
1a00457e:	bf00      	nop

1a004580 <__libc_init_array>:
1a004580:	b570      	push	{r4, r5, r6, lr}
1a004582:	4d0d      	ldr	r5, [pc, #52]	; (1a0045b8 <__libc_init_array+0x38>)
1a004584:	4c0d      	ldr	r4, [pc, #52]	; (1a0045bc <__libc_init_array+0x3c>)
1a004586:	1b64      	subs	r4, r4, r5
1a004588:	10a4      	asrs	r4, r4, #2
1a00458a:	2600      	movs	r6, #0
1a00458c:	42a6      	cmp	r6, r4
1a00458e:	d109      	bne.n	1a0045a4 <__libc_init_array+0x24>
1a004590:	4d0b      	ldr	r5, [pc, #44]	; (1a0045c0 <__libc_init_array+0x40>)
1a004592:	4c0c      	ldr	r4, [pc, #48]	; (1a0045c4 <__libc_init_array+0x44>)
1a004594:	f7fd ff1b 	bl	1a0023ce <_init>
1a004598:	1b64      	subs	r4, r4, r5
1a00459a:	10a4      	asrs	r4, r4, #2
1a00459c:	2600      	movs	r6, #0
1a00459e:	42a6      	cmp	r6, r4
1a0045a0:	d105      	bne.n	1a0045ae <__libc_init_array+0x2e>
1a0045a2:	bd70      	pop	{r4, r5, r6, pc}
1a0045a4:	f855 3b04 	ldr.w	r3, [r5], #4
1a0045a8:	4798      	blx	r3
1a0045aa:	3601      	adds	r6, #1
1a0045ac:	e7ee      	b.n	1a00458c <__libc_init_array+0xc>
1a0045ae:	f855 3b04 	ldr.w	r3, [r5], #4
1a0045b2:	4798      	blx	r3
1a0045b4:	3601      	adds	r6, #1
1a0045b6:	e7f2      	b.n	1a00459e <__libc_init_array+0x1e>
1a0045b8:	1a004924 	.word	0x1a004924
1a0045bc:	1a004924 	.word	0x1a004924
1a0045c0:	1a004924 	.word	0x1a004924
1a0045c4:	1a00492c 	.word	0x1a00492c

1a0045c8 <memset>:
1a0045c8:	4402      	add	r2, r0
1a0045ca:	4603      	mov	r3, r0
1a0045cc:	4293      	cmp	r3, r2
1a0045ce:	d100      	bne.n	1a0045d2 <memset+0xa>
1a0045d0:	4770      	bx	lr
1a0045d2:	f803 1b01 	strb.w	r1, [r3], #1
1a0045d6:	e7f9      	b.n	1a0045cc <memset+0x4>
1a0045d8:	0e0a0a0e 	.word	0x0e0a0a0e
1a0045dc:	0e1f170e 	.word	0x0e1f170e
1a0045e0:	70757247 	.word	0x70757247
1a0045e4:	00003a6f 	.word	0x00003a6f
1a0045e8:	6f646f4d 	.word	0x6f646f4d
1a0045ec:	00000000 	.word	0x00000000
1a0045f0:	696c6153 	.word	0x696c6153
1a0045f4:	003a6164 	.word	0x003a6164
1a0045f8:	ffffff00 	.word	0xffffff00
1a0045fc:	706d6554 	.word	0x706d6554
1a004600:	0000203a 	.word	0x0000203a
1a004604:	20646552 	.word	0x20646552
1a004608:	3a747845 	.word	0x3a747845
1a00460c:	00000000 	.word	0x00000000
1a004610:	00004e4f 	.word	0x00004e4f
1a004614:	6c6c6146 	.word	0x6c6c6146
1a004618:	00000061 	.word	0x00000061
1a00461c:	756e614d 	.word	0x756e614d
1a004620:	00006c61 	.word	0x00006c61
1a004624:	6f747541 	.word	0x6f747541
1a004628:	6974616d 	.word	0x6974616d
1a00462c:	00006f63 	.word	0x00006f63
1a004630:	70757247 	.word	0x70757247
1a004634:	0000006f 	.word	0x0000006f
1a004638:	676e694e 	.word	0x676e694e
1a00463c:	00616e75 	.word	0x00616e75
1a004640:	6f727245 	.word	0x6f727245
1a004644:	ffff0072 	.word	0xffff0072

1a004648 <_ZL15dscrc2x16_table>:
1a004648:	e2bc5e00 83dd3f61 207e9cc2 411ffda3     .^..a?....~ ...A
1a004658:	be239d00 f865db46 32af118c 74e957ca     ..#.F.e....2.W.t

1a004668 <InitClkStates>:
1a004668:	01010f01                                ....

1a00466c <pinmuxing>:
1a00466c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00467c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00468c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00469c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0046ac:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0046bc:	00d50301 00d50401 00160107 00560207     ..............V.
1a0046cc:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0046dc:	00570206                                ..W.

1a0046e0 <ExtRateIn>:
1a0046e0:	00000000                                ....

1a0046e4 <GpioButtons>:
1a0046e4:	08000400 09010900                       ........

1a0046ec <GpioLeds>:
1a0046ec:	01050005 0e000205 0c010b01              ............

1a0046f8 <GpioPorts>:
1a0046f8:	03030003 0f050403 05031005 07030603     ................
1a004708:	ffff0802                                ....

1a00470c <OscRateIn>:
1a00470c:	00b71b00                                ....

1a004710 <InitClkStates>:
1a004710:	00010100 00010909 0001090a 01010701     ................
1a004720:	00010902 00010906 0101090c 0001090d     ................
1a004730:	0001090e 0001090f 00010910 00010911     ................
1a004740:	00010912 00010913 00011114 00011119     ................
1a004750:	0001111a 0001111b 08040201 0f0f0f03     ................
1a004760:	000000ff                                ....

1a004764 <periph_to_base>:
1a004764:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004774:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004784:	000100e0 01000100 01200003 00060120     .......... . ...
1a004794:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0047a4:	01820013 00120182 01a201a2 01c20011     ................
1a0047b4:	001001c2 01e201e2 0202000f 000e0202     ................
1a0047c4:	02220222 0223000d 001c0223              "."...#.#...

1a0047d0 <UART_BClock>:
1a0047d0:	01a201c2 01620182                       ......b.

1a0047d8 <UART_PClock>:
1a0047d8:	00820081 00a200a1                       ........

1a0047e0 <gpioPinsInit>:
1a0047e0:	02000104 00050701 05010d03 04080100     ................
1a0047f0:	02020002 02000304 00000403 04070002     ................
1a004800:	030c0300 09050402 05040103 04030208     ................
1a004810:	04020305 06040504 0802000c 03000b06     ................
1a004820:	00090607 07060503 060f0504 03030004     ................
1a004830:	02000404 00050404 06040502 04060200     ................
1a004840:	0c050408 05040a04 0003010e 14010a00     ................
1a004850:	010f0000 0d000012 00001101 0010010c     ................
1a004860:	07070300 000f0300 01000001 00000000     ................
1a004870:	000a0600 08060603 06100504 04030005     ................
1a004880:	03000106 04090400 04010d05 010b0000     ................
1a004890:	0200000f 00000001 00010104 02010800     ................
1a0048a0:	01090000 09010006 05040002 04010200     ................
1a0048b0:	02020105 02020504 0e00000a 01000b02     ................
1a0048c0:	000c020b ffff0c01                       ........

1a0048c8 <rounders>:
1a0048c8:	00000000 3fe00000 9999999a 3fa99999     .......?.......?
1a0048d8:	47ae147b 3f747ae1 d2f1a9fc 3f40624d     {..G.zt?....Mb@?
1a0048e8:	eb1c432d 3f0a36e2 88e368f1 3ed4f8b5     -C...6.?.h.....>
1a0048f8:	a0b5ed8d 3ea0c6f7 9abcaf48 3e6ad7f2     .......>H.....j>
1a004908:	e2308c3a 3e35798e e826d695 3e012e0b     :.0..y5>..&....>
1a004918:	d9d7bdbb 3dcb7cdf d494c080              .....|.=....
